{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "agentpri2Count": {
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100
            ],
            "defaultValue": 2,
            "metadata": {
                "description": "The number of agents for the cluster.  This value can be from 1 to 100"
            },
            "type": "int"
        },
        "agentpri2Offset": {
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99
            ],
            "defaultValue": 0,
            "metadata": {
                "description": "The offset into the agent pool where to start creating agents.  This value can be from 0 to 99, but must be less than agentCount"
            },
            "type": "int"
        },
        "agentpri2VMSize": {
            "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A10",
                "Standard_A11",
                "Standard_A1_v2",
                "Standard_A2",
                "Standard_A2_v2",
                "Standard_A2m_v2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A4_v2",
                "Standard_A4m_v2",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A8_v2",
                "Standard_A8m_v2",
                "Standard_A9",
                "Standard_B1ms",
                "Standard_B1s",
                "Standard_B2ms",
                "Standard_B2s",
                "Standard_B4ms",
                "Standard_B8ms",
                "Standard_D1",
                "Standard_D11",
                "Standard_D11_v2",
                "Standard_D11_v2_Promo",
                "Standard_D12",
                "Standard_D12_v2",
                "Standard_D12_v2_Promo",
                "Standard_D13",
                "Standard_D13_v2",
                "Standard_D13_v2_Promo",
                "Standard_D14",
                "Standard_D14_v2",
                "Standard_D14_v2_Promo",
                "Standard_D15_v2",
                "Standard_D16_v3",
                "Standard_D16s_v3",
                "Standard_D1_v2",
                "Standard_D2",
                "Standard_D2_v2",
                "Standard_D2_v2_Promo",
                "Standard_D2_v3",
                "Standard_D2s_v3",
                "Standard_D3",
                "Standard_D32_v3",
                "Standard_D32s_v3",
                "Standard_D3_v2",
                "Standard_D3_v2_Promo",
                "Standard_D4",
                "Standard_D4_v2",
                "Standard_D4_v2_Promo",
                "Standard_D4_v3",
                "Standard_D4s_v3",
                "Standard_D5_v2",
                "Standard_D5_v2_Promo",
                "Standard_D64_v3",
                "Standard_D64s_v3",
                "Standard_D8_v3",
                "Standard_D8s_v3",
                "Standard_DS1",
                "Standard_DS11",
                "Standard_DS11_v2",
                "Standard_DS11_v2_Promo",
                "Standard_DS12",
                "Standard_DS12_v2",
                "Standard_DS12_v2_Promo",
                "Standard_DS13",
                "Standard_DS13-2_v2",
                "Standard_DS13-4_v2",
                "Standard_DS13_v2",
                "Standard_DS13_v2_Promo",
                "Standard_DS14",
                "Standard_DS14-4_v2",
                "Standard_DS14-8_v2",
                "Standard_DS14_v2",
                "Standard_DS14_v2_Promo",
                "Standard_DS15_v2",
                "Standard_DS1_v2",
                "Standard_DS2",
                "Standard_DS2_v2",
                "Standard_DS2_v2_Promo",
                "Standard_DS3",
                "Standard_DS3_v2",
                "Standard_DS3_v2_Promo",
                "Standard_DS4",
                "Standard_DS4_v2",
                "Standard_DS4_v2_Promo",
                "Standard_DS5_v2",
                "Standard_DS5_v2_Promo",
                "Standard_E16_v3",
                "Standard_E16s_v3",
                "Standard_E2_v3",
                "Standard_E2s_v3",
                "Standard_E32-16s_v3",
                "Standard_E32-8s_v3",
                "Standard_E32_v3",
                "Standard_E32s_v3",
                "Standard_E4_v3",
                "Standard_E4s_v3",
                "Standard_E64-16s_v3",
                "Standard_E64-32s_v3",
                "Standard_E64_v3",
                "Standard_E64s_v3",
                "Standard_E8_v3",
                "Standard_E8s_v3",
                "Standard_F1",
                "Standard_F16",
                "Standard_F16s",
                "Standard_F16s_v2",
                "Standard_F1s",
                "Standard_F2",
                "Standard_F2s",
                "Standard_F2s_v2",
                "Standard_F32s_v2",
                "Standard_F4",
                "Standard_F4s",
                "Standard_F4s_v2",
                "Standard_F64s_v2",
                "Standard_F72s_v2",
                "Standard_F8",
                "Standard_F8s",
                "Standard_F8s_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS4-4",
                "Standard_GS4-8",
                "Standard_GS5",
                "Standard_GS5-16",
                "Standard_GS5-8",
                "Standard_H16",
                "Standard_H16m",
                "Standard_H16mr",
                "Standard_H16r",
                "Standard_H8",
                "Standard_H8m",
                "Standard_L16s",
                "Standard_L32s",
                "Standard_L4s",
                "Standard_L8s",
                "Standard_M128-32ms",
                "Standard_M128-64ms",
                "Standard_M128ms",
                "Standard_M128s",
                "Standard_M64-16ms",
                "Standard_M64-32ms",
                "Standard_M64ms",
                "Standard_M64s",
                "Standard_NC12",
                "Standard_NC12s_v2",
                "Standard_NC12s_v3",
                "Standard_NC24",
                "Standard_NC24r",
                "Standard_NC24rs_v2",
                "Standard_NC24rs_v3",
                "Standard_NC24s_v2",
                "Standard_NC24s_v3",
                "Standard_NC6",
                "Standard_NC6s_v2",
                "Standard_NC6s_v3",
                "Standard_ND12s",
                "Standard_ND24rs",
                "Standard_ND24s",
                "Standard_ND6s",
                "Standard_NV12",
                "Standard_NV24",
                "Standard_NV6"
            ],
            "defaultValue": "Standard_D2_v2",
            "metadata": {
                "description": "The size of the Virtual Machine."
            },
            "type": "string"
        },
        "agentpri2VnetSubnetID": {
            "metadata": {
                "description": "Sets the vnet subnet of agent pool 'agentpri2'."
            },
            "type": "string",
            "defaultValue": "/subscriptions/e39b9baa-50b5-4665-8297-2fa801ed1fa4/resourceGroups/td-poc-vnet-devlabs-rsg/providers/Microsoft.Network/virtualNetworks/td-poc-vnet-devlabs/subnets/Agent"
        },
        "agentpri2osImageName": {
            "defaultValue": "",
            "metadata": {
                "description": "Name of a Linux OS image. Needs to be used in conjuction with osImageResourceGroup."
            },
            "type": "string"
        },
        "agentpri2osImageOffer": {
            "defaultValue": "UbuntuServer",
            "metadata": {
                "description": "Linux OS image type."
            },
            "type": "string"
        },
        "agentpri2osImagePublisher": {
            "defaultValue": "Canonical",
            "metadata": {
                "description": "OS image publisher."
            },
            "type": "string"
        },
        "agentpri2osImageResourceGroup": {
            "defaultValue": "",
            "metadata": {
                "description": "Resource group of a Linux OS image. Needs to be used in conjuction with osImageName."
            },
            "type": "string"
        },
        "agentpri2osImageSKU": {
            "defaultValue": "16.04-LTS",
            "metadata": {
                "description": "OS image SKU."
            },
            "type": "string"
        },
        "agentpri2osImageVersion": {
            "defaultValue": "16.04.201804050",
            "metadata": {
                "description": "OS image version."
            },
            "type": "string"
        },
        "agentpriCount": {
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100
            ],
            "defaultValue": 2,
            "metadata": {
                "description": "The number of agents for the cluster.  This value can be from 1 to 100"
            },
            "type": "int"
        },
        "agentpriOffset": {
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99
            ],
            "defaultValue": 0,
            "metadata": {
                "description": "The offset into the agent pool where to start creating agents.  This value can be from 0 to 99, but must be less than agentCount"
            },
            "type": "int"
        },
        "agentpriVMSize": {
            "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A10",
                "Standard_A11",
                "Standard_A1_v2",
                "Standard_A2",
                "Standard_A2_v2",
                "Standard_A2m_v2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A4_v2",
                "Standard_A4m_v2",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A8_v2",
                "Standard_A8m_v2",
                "Standard_A9",
                "Standard_B1ms",
                "Standard_B1s",
                "Standard_B2ms",
                "Standard_B2s",
                "Standard_B4ms",
                "Standard_B8ms",
                "Standard_D1",
                "Standard_D11",
                "Standard_D11_v2",
                "Standard_D11_v2_Promo",
                "Standard_D12",
                "Standard_D12_v2",
                "Standard_D12_v2_Promo",
                "Standard_D13",
                "Standard_D13_v2",
                "Standard_D13_v2_Promo",
                "Standard_D14",
                "Standard_D14_v2",
                "Standard_D14_v2_Promo",
                "Standard_D15_v2",
                "Standard_D16_v3",
                "Standard_D16s_v3",
                "Standard_D1_v2",
                "Standard_D2",
                "Standard_D2_v2",
                "Standard_D2_v2_Promo",
                "Standard_D2_v3",
                "Standard_D2s_v3",
                "Standard_D3",
                "Standard_D32_v3",
                "Standard_D32s_v3",
                "Standard_D3_v2",
                "Standard_D3_v2_Promo",
                "Standard_D4",
                "Standard_D4_v2",
                "Standard_D4_v2_Promo",
                "Standard_D4_v3",
                "Standard_D4s_v3",
                "Standard_D5_v2",
                "Standard_D5_v2_Promo",
                "Standard_D64_v3",
                "Standard_D64s_v3",
                "Standard_D8_v3",
                "Standard_D8s_v3",
                "Standard_DS1",
                "Standard_DS11",
                "Standard_DS11_v2",
                "Standard_DS11_v2_Promo",
                "Standard_DS12",
                "Standard_DS12_v2",
                "Standard_DS12_v2_Promo",
                "Standard_DS13",
                "Standard_DS13-2_v2",
                "Standard_DS13-4_v2",
                "Standard_DS13_v2",
                "Standard_DS13_v2_Promo",
                "Standard_DS14",
                "Standard_DS14-4_v2",
                "Standard_DS14-8_v2",
                "Standard_DS14_v2",
                "Standard_DS14_v2_Promo",
                "Standard_DS15_v2",
                "Standard_DS1_v2",
                "Standard_DS2",
                "Standard_DS2_v2",
                "Standard_DS2_v2_Promo",
                "Standard_DS3",
                "Standard_DS3_v2",
                "Standard_DS3_v2_Promo",
                "Standard_DS4",
                "Standard_DS4_v2",
                "Standard_DS4_v2_Promo",
                "Standard_DS5_v2",
                "Standard_DS5_v2_Promo",
                "Standard_E16_v3",
                "Standard_E16s_v3",
                "Standard_E2_v3",
                "Standard_E2s_v3",
                "Standard_E32-16s_v3",
                "Standard_E32-8s_v3",
                "Standard_E32_v3",
                "Standard_E32s_v3",
                "Standard_E4_v3",
                "Standard_E4s_v3",
                "Standard_E64-16s_v3",
                "Standard_E64-32s_v3",
                "Standard_E64_v3",
                "Standard_E64s_v3",
                "Standard_E8_v3",
                "Standard_E8s_v3",
                "Standard_F1",
                "Standard_F16",
                "Standard_F16s",
                "Standard_F16s_v2",
                "Standard_F1s",
                "Standard_F2",
                "Standard_F2s",
                "Standard_F2s_v2",
                "Standard_F32s_v2",
                "Standard_F4",
                "Standard_F4s",
                "Standard_F4s_v2",
                "Standard_F64s_v2",
                "Standard_F72s_v2",
                "Standard_F8",
                "Standard_F8s",
                "Standard_F8s_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS4-4",
                "Standard_GS4-8",
                "Standard_GS5",
                "Standard_GS5-16",
                "Standard_GS5-8",
                "Standard_H16",
                "Standard_H16m",
                "Standard_H16mr",
                "Standard_H16r",
                "Standard_H8",
                "Standard_H8m",
                "Standard_L16s",
                "Standard_L32s",
                "Standard_L4s",
                "Standard_L8s",
                "Standard_M128-32ms",
                "Standard_M128-64ms",
                "Standard_M128ms",
                "Standard_M128s",
                "Standard_M64-16ms",
                "Standard_M64-32ms",
                "Standard_M64ms",
                "Standard_M64s",
                "Standard_NC12",
                "Standard_NC12s_v2",
                "Standard_NC12s_v3",
                "Standard_NC24",
                "Standard_NC24r",
                "Standard_NC24rs_v2",
                "Standard_NC24rs_v3",
                "Standard_NC24s_v2",
                "Standard_NC24s_v3",
                "Standard_NC6",
                "Standard_NC6s_v2",
                "Standard_NC6s_v3",
                "Standard_ND12s",
                "Standard_ND24rs",
                "Standard_ND24s",
                "Standard_ND6s",
                "Standard_NV12",
                "Standard_NV24",
                "Standard_NV6"
            ],
            "defaultValue": "Standard_D2_v2",
            "metadata": {
                "description": "The size of the Virtual Machine."
            },
            "type": "string"
        },
        "agentpriVnetSubnetID": {
            "metadata": {
                "description": "Sets the vnet subnet of agent pool 'agentpri'."
            },
            "type": "string",
            "defaultValue": "/subscriptions/e39b9baa-50b5-4665-8297-2fa801ed1fa4/resourceGroups/td-poc-vnet-devlabs-rsg/providers/Microsoft.Network/virtualNetworks/td-poc-vnet-devlabs/subnets/Agent"
        },
        "agentpriosImageName": {
            "defaultValue": "",
            "metadata": {
                "description": "Name of a Linux OS image. Needs to be used in conjuction with osImageResourceGroup."
            },
            "type": "string"
        },
        "agentpriosImageOffer": {
            "defaultValue": "UbuntuServer",
            "metadata": {
                "description": "Linux OS image type."
            },
            "type": "string"
        },
        "agentpriosImagePublisher": {
            "defaultValue": "Canonical",
            "metadata": {
                "description": "OS image publisher."
            },
            "type": "string"
        },
        "agentpriosImageResourceGroup": {
            "defaultValue": "",
            "metadata": {
                "description": "Resource group of a Linux OS image. Needs to be used in conjuction with osImageName."
            },
            "type": "string"
        },
        "agentpriosImageSKU": {
            "defaultValue": "16.04-LTS",
            "metadata": {
                "description": "OS image SKU."
            },
            "type": "string"
        },
        "agentpriosImageVersion": {
            "defaultValue": "16.04.201804050",
            "metadata": {
                "description": "OS image version."
            },
            "type": "string"
        },
        "apiServerCertificate": {
            "metadata": {
                "description": "The base 64 server certificate used on the master"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSU5CRENDQ3V5Z0F3SUJBZ0lRWm8yZWk0WHZmYVNuSXN6YVI2OHhmekFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB4T0RBMU1ERXhOek13TVRaYUZ3MHlNREEwTXpBeE56TXdNVFphTUJReApFakFRQmdOVkJBTVRDV0Z3YVhObGNuWmxjakNDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DCmdnSUJBTXRMUGhGR2FYZWZDRUZuNElvd0x5TnVLMnIrYjMremVzajlHbEx5UzkrdEZEYmZCdjJjQVY5SXFGaG8KMmI0VU5aZlVTYXNyRWdkSHhMQnZaZ1VTTnl2V3Y0Yy9nbUgweUFBYnQ3VEFlQmFIMno4ZzRwQXhTTmt6MGVqQgppTWJjWkhYQnJFSTlQczlZNFIzVzZTcXFSTGdTK2dCdXVTcnVwZDhSZWNZdlU3bVJaZjZaN2dNVWk1MmdadFI3CnpVQXg0QjhuUUVLUm9yYkdyY1VwQ2dvYlVYcFprQUVKM3NIYUw5K1l1R0I0Z3ZHczNDVXUvQjBDelhTZ3lJOEEKajhScnNPM2NVTXBnQTlZR3pzblEyMnI1ZWNvYVJCQ1VkMlF4eERTM1FNWWtvRjJmamQrTWkrU1p4QVhvRDRtOApzSVNiZE5zRG9wTTRGZSs2SkZYdlg3bG5oaFBjMGh4anNuR1MwdzJXTlJIZ0FMRkxHN2Z2NFYwMXUyTGNxMnF3CjBZcTAvTEc5MzZuQ0QxbW1LME1RTG15UTV1cjljYlV3ZWFZdnQ3WlNyQU5ncHZTeUdaZnhUVWszQjZ1aW5EUkYKbVI4cENYSUs1TFlMbzZqR0MwdkFlNWV5M3B3ZkJ4MllKT1dheFZtR3dCbGR5dXpZeTd2NWdObCtVSUQxSWIwRApCRUI2a0pLeVNmOTZOcm0yWmJBRFVTNk4yb05MOEd1OE83elIxWlMzZi9xSTB3T2RMYzZ2QWx5MGpZTG1QT2UrCjFhUnBvTzA1c3gyUzBFVEg1anRIamlFemMvN0lWdHBNRmlUVUdVeEVqS21zbG1CWnBLdEdiMjBqaUJFbTFrMEQKc1NDOWR4RnBVdFVZaGtNMHVNV2R6c1NIS2hEeHZOMGNxZnVGVWk0RGwxdXNaQU8vQWdNQkFBR2pnZ2hYTUlJSQpVekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0V3REFZRFZSMFRBUUgvCkJBSXdBRENDQ0J3R0ExVWRFUVNDQ0JNd2dnZ1BnaTUwWkdSbGRtVnNiM0J0Wlc1MExtRjFjM1J5WVd4cFlXVmgKYzNRdVkyeHZkV1JoY0hBdVlYcDFjbVV1WTI5dGdqTjBaR1JsZG1Wc2IzQnRaVzUwTG1GMWMzUnlZV3hwWVhOdgpkWFJvWldGemRDNWpiRzkxWkdGd2NDNWhlblZ5WlM1amIyMkNMSFJrWkdWMlpXeHZjRzFsYm5RdVluSmhlbWxzCmMyOTFkR2d1WTJ4dmRXUmhjSEF1WVhwMWNtVXVZMjl0Z2k1MFpHUmxkbVZzYjNCdFpXNTBMbU5oYm1Ga1lXTmwKYm5SeVlXd3VZMnh2ZFdSaGNIQXVZWHAxY21VdVkyOXRnaXQwWkdSbGRtVnNiM0J0Wlc1MExtTmhibUZrWVdWaApjM1F1WTJ4dmRXUmhjSEF1WVhwMWNtVXVZMjl0Z2kxMFpHUmxkbVZzYjNCdFpXNTBMbU5sYm5SeVlXeHBibVJwCllTNWpiRzkxWkdGd2NDNWhlblZ5WlM1amIyMkNLblJrWkdWMlpXeHZjRzFsYm5RdVkyVnVkSEpoYkhWekxtTnMKYjNWa1lYQndMbUY2ZFhKbExtTnZiWUl1ZEdSa1pYWmxiRzl3YldWdWRDNWpaVzUwY21Gc2RYTmxkV0Z3TG1OcwpiM1ZrWVhCd0xtRjZkWEpsTG1OdmJZSXhkR1JrWlhabGJHOXdiV1Z1ZEM1amFHbHVZV1ZoYzNRdVkyeHZkV1JoCmNIQXVZMmhwYm1GamJHOTFaR0Z3YVM1amJvSXlkR1JrWlhabGJHOXdiV1Z1ZEM1amFHbHVZVzV2Y25Sb0xtTnMKYjNWa1lYQndMbU5vYVc1aFkyeHZkV1JoY0drdVkyNkNLWFJrWkdWMlpXeHZjRzFsYm5RdVpXRnpkR0Z6YVdFdQpZMnh2ZFdSaGNIQXVZWHAxY21VdVkyOXRnaWQwWkdSbGRtVnNiM0J0Wlc1MExtVmhjM1IxY3k1amJHOTFaR0Z3CmNDNWhlblZ5WlM1amIyMkNLSFJrWkdWMlpXeHZjRzFsYm5RdVpXRnpkSFZ6TWk1amJHOTFaR0Z3Y0M1aGVuVnkKWlM1amIyMkNMSFJrWkdWMlpXeHZjRzFsYm5RdVpXRnpkSFZ6TW1WMVlYQXVZMnh2ZFdSaGNIQXVZWHAxY21VdQpZMjl0Z2lwMFpHUmxkbVZzYjNCdFpXNTBMbXBoY0dGdVpXRnpkQzVqYkc5MVpHRndjQzVoZW5WeVpTNWpiMjJDCktuUmtaR1YyWld4dmNHMWxiblF1YW1Gd1lXNTNaWE4wTG1Oc2IzVmtZWEJ3TG1GNmRYSmxMbU52YllJdGRHUmsKWlhabGJHOXdiV1Z1ZEM1cmIzSmxZV05sYm5SeVlXd3VZMnh2ZFdSaGNIQXVZWHAxY21VdVkyOXRnaXQwWkdSbApkbVZzYjNCdFpXNTBMbXR2Y21WaGMyOTFkR2d1WTJ4dmRXUmhjSEF1WVhwMWNtVXVZMjl0Z2k5MFpHUmxkbVZzCmIzQnRaVzUwTG01dmNuUm9ZMlZ1ZEhKaGJIVnpMbU5zYjNWa1lYQndMbUY2ZFhKbExtTnZiWUlzZEdSa1pYWmwKYkc5d2JXVnVkQzV1YjNKMGFHVjFjbTl3WlM1amJHOTFaR0Z3Y0M1aGVuVnlaUzVqYjIyQ0wzUmtaR1YyWld4dgpjRzFsYm5RdWMyOTFkR2hqWlc1MGNtRnNkWE11WTJ4dmRXUmhjSEF1WVhwMWNtVXVZMjl0Z2k1MFpHUmxkbVZzCmIzQnRaVzUwTG5OdmRYUm9aV0Z6ZEdGemFXRXVZMnh2ZFdSaGNIQXVZWHAxY21VdVkyOXRnaXQwWkdSbGRtVnMKYjNCdFpXNTBMbk52ZFhSb2FXNWthV0V1WTJ4dmRXUmhjSEF1WVhwMWNtVXVZMjl0Z2loMFpHUmxkbVZzYjNCdApaVzUwTG5WcmMyOTFkR2d1WTJ4dmRXUmhjSEF1WVhwMWNtVXVZMjl0Z2lkMFpHUmxkbVZzYjNCdFpXNTBMblZyCmQyVnpkQzVqYkc5MVpHRndjQzVoZW5WeVpTNWpiMjJDTG5Sa1pHVjJaV3h2Y0cxbGJuUXVkMlZ6ZEdObGJuUnkKWVd4MWN5NWpiRzkxWkdGd2NDNWhlblZ5WlM1amIyMkNLM1JrWkdWMlpXeHZjRzFsYm5RdWQyVnpkR1YxY205dwpaUzVqYkc5MVpHRndjQzVoZW5WeVpTNWpiMjJDS25Sa1pHVjJaV3h2Y0cxbGJuUXVkMlZ6ZEdsdVpHbGhMbU5zCmIzVmtZWEJ3TG1GNmRYSmxMbU52YllJbmRHUmtaWFpsYkc5d2JXVnVkQzUzWlhOMGRYTXVZMnh2ZFdSaGNIQXUKWVhwMWNtVXVZMjl0Z2loMFpHUmxkbVZzYjNCdFpXNTBMbmRsYzNSMWN6SXVZMnh2ZFdSaGNIQXVZWHAxY21VdQpZMjl0Z2pGMFpHUmxkbVZzYjNCdFpXNTBMbU5vYVc1aFpXRnpkQzVqYkc5MVpHRndjQzVqYUdsdVlXTnNiM1ZrCllYQnBMbU51Z2pKMFpHUmxkbVZzYjNCdFpXNTBMbU5vYVc1aGJtOXlkR2d1WTJ4dmRXUmhjSEF1WTJocGJtRmoKYkc5MVpHRndhUzVqYm9JM2RHUmtaWFpsYkc5d2JXVnVkQzVuWlhKdFlXNTVZMlZ1ZEhKaGJDNWpiRzkxWkdGdwpjQzV0YVdOeWIzTnZablJoZW5WeVpTNWtaWUk1ZEdSa1pYWmxiRzl3YldWdWRDNW5aWEp0WVc1NWJtOXlkR2hsCllYTjBMbU5zYjNWa1lYQndMbTFwWTNKdmMyOW1kR0Y2ZFhKbExtUmxnalowWkdSbGRtVnNiM0J0Wlc1MExuVnoKWjI5MmRtbHlaMmx1YVdFdVkyeHZkV1JoY0hBdWRYTm5iM1pqYkc5MVpHRndhUzV1WlhTQ01uUmtaR1YyWld4dgpjRzFsYm5RdWRYTm5iM1pwYjNkaExtTnNiM1ZrWVhCd0xuVnpaMjkyWTJ4dmRXUmhjR2t1Ym1WMGdqVjBaR1JsCmRtVnNiM0J0Wlc1MExuVnpaMjkyWVhKcGVtOXVZUzVqYkc5MVpHRndjQzUxYzJkdmRtTnNiM1ZrWVhCcExtNWwKZElJemRHUmtaWFpsYkc5d2JXVnVkQzUxYzJkdmRuUmxlR0Z6TG1Oc2IzVmtZWEJ3TG5WeloyOTJZMnh2ZFdSaApjR2t1Ym1WMGdpNTBaR1JsZG1Wc2IzQnRaVzUwTG1aeVlXNWpaV05sYm5SeVlXd3VZMnh2ZFdSaGNIQXVZWHAxCmNtVXVZMjl0Z2dwcmRXSmxjbTVsZEdWemdoSnJkV0psY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjAKWlhNdVpHVm1ZWFZzZEM1emRtT0NKR3QxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1cwpiMk5oYklJV2EzVmlaWEp1WlhSbGN5NXJkV0psTFhONWMzUmxiWUlhYTNWaVpYSnVaWFJsY3k1cmRXSmxMWE41CmMzUmxiUzV6ZG1PQ0tHdDFZbVZ5Ym1WMFpYTXVhM1ZpWlMxemVYTjBaVzB1YzNaakxtTnNkWE4wWlhJdWJHOWoKWVd5SEJCNEJBQVdIQkI0QkFBK0hCQW9BQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFLbTQzMUFJbXhpQgpXa0Rnc1ZSZUQ1R0JYYmdUWTNiVTlrRDdkS3N5T2JxdjM0Y3A5eVFNL1pNVFBLSlQ3azRRQXlmeHQ5U2VEb0JCCmZBemdhNzJhcDVjUy8rSXRnQXlLOGdvdEZ4eSsvQU8xbGx6Q2RtR2MrblFwQ3MzWmphWTBSMWl3ZWkxdW1rajkKMThQVG5LQmx2QlpsVVFjcFlRbVVSZDlFTTlQODFYYWFIbjBSU3FnRFZsQTFnUlQweDNpcTk5MllybzkxYUhWaQpuOHkwSWh6THc1Tis2d0sxUVN3NmNicXFGejNMdEUrT21mUk1seVE2OEVDZldMYWhnWlhyN3ppNzdVclQzaG4vCjdNSFI5VTczcjRTb1hHWjM4eE1SNGtpWWY4RGZud2gvQ1l6Ykc0M2Yva3o4ZmkzRDZhL01VVGUvNFNRNEZ3SDMKRklWcm9qeHZESXhxcWRTYmJvMkIwci9kYmMyR293VFlyR1pxSkovNkNyR2RGdDdHaEZSMW5ZTlNWS2UvaklIZApCWE5JUEp4NjJPdTc0NWZNUjJUQmhZUjFRMWNnQmpBdVRWYk1CcGtQRTdtZWVIdkR4bXZKY3ZkSnhSQ1Q5NjdSCjVVR1VLbzI1UklSMTZVaWtaN2I4TlhlMTZ0dkl0K0tobDg5OEV0L0hmTFpwdTZCay9FY0NvZ2V3dFNHSmp2UDIKUVZOTXRteTlrR3RyS3c4aTlTd2Q1dzRTWkFUVDN4OVEvbEpVR2hRcWlOTk5DdGtKTy9QTnpMaE5CaEJVdHljeApwanBsbldLZkZSSWg3bFA2WlNIWlZReUFZMnVCZXI2THBZRG05MkJRWG5STzhFRWprS2IyUHhvSU40NXVpODN5CmFuaFhhazhYRnF2cGNpTTQ1Zm1ldnBKSURLTHBGZmx1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
        },
        "apiServerPrivateKey": {
            "metadata": {
                "description": "The base 64 server private key used on the master."
            },
            "type": "securestring",
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBeTBzK0VVWnBkNThJUVdmZ2lqQXZJMjRyYXY1dmY3TjZ5UDBhVXZKTDM2MFVOdDhHCi9ad0JYMGlvV0dqWnZoUTFsOVJKcXlzU0IwZkVzRzltQlJJM0s5YS9oeitDWWZUSUFCdTN0TUI0Rm9mYlB5RGkKa0RGSTJUUFI2TUdJeHR4a2RjR3NRajArejFqaEhkYnBLcXBFdUJMNkFHNjVLdTZsM3hGNXhpOVR1WkZsL3BudQpBeFNMbmFCbTFIdk5RREhnSHlkQVFwR2l0c2F0eFNrS0NodFJlbG1RQVFuZXdkb3YzNWk0WUhpQzhhemNKUzc4CkhRTE5kS0RJandDUHhHdXc3ZHhReW1BRDFnYk95ZERiYXZsNXlocEVFSlIzWkRIRU5MZEF4aVNnWForTjM0eUwKNUpuRUJlZ1BpYnl3aEp0MDJ3T2lremdWNzdva1ZlOWZ1V2VHRTl6U0hHT3ljWkxURFpZMUVlQUFzVXNidCsvaApYVFc3WXR5cmFyRFJpclQ4c2IzZnFjSVBXYVlyUXhBdWJKRG02djF4dFRCNXBpKzN0bEtzQTJDbTlMSVpsL0ZOClNUY0hxNktjTkVXWkh5a0pjZ3JrdGd1anFNWUxTOEI3bDdMZW5COEhIWmdrNVpyRldZYkFHVjNLN05qTHUvbUEKMlg1UWdQVWh2UU1FUUhxUWtySkovM28ydWJabHNBTlJMbzNhZzB2d2E3dzd2TkhWbExkLytvalRBNTB0enE4QwpYTFNOZ3VZODU3N1ZwR21nN1RtekhaTFFSTWZtTzBlT0lUTnovc2hXMmt3V0pOUVpURVNNcWF5V1lGbWtxMFp2CmJTT0lFU2JXVFFPeElMMTNFV2xTMVJpR1F6UzR4WjNPeEljcUVQRzgzUnlwKzRWU0xnT1hXNnhrQTc4Q0F3RUEKQVFLQ0FnQnF1R0VvNkhITlhpc1RTdGpSTW1KTWt6VXZ3Y24rbTlYRlZUbFFlZW5pemhWaWlNbytzSHIzN2tpUgp3Tmt0czZZK3dpNjZNSzRTTEZiUTJHb1NGM0huRGFFVit2MFROMUVXM1hZZTZUc2hlTWhiNTRPSWRwYnJqd3lPCng2cHAycURTUUkyUmFGMWt0Qi9aYmt5UkhUbGQrSGhOYWRMQyt1MFFvVGZ3RmtBNWxsNll2VzM1Si92ekQ1VnIKem1IOVpURm1xVkJPb2UxdFRmZERIVHdyK2hOWHkxU1Jkd0Q5ZXZET3pIbGVDMldTUVZDQUpKNHRESitXcmlFYgpFUXhuN0xEQTdYdHNBZU9CbzZsQ3dPV3V6ckJrckUwMjl2bUdHNm9Ja25ycWlhZTEvbUNZRGt3U0FiYXA4eHpWCkRiME1vQjlFS2pCYVlJTURpaEF4SEt4L3hCelp1Rk9jSW1ZS3BuZE9iU3htaUV3OFlBYy8zS2Y1Y2srUTh3TUkKT082NXdMd0U2V053ajVOVG0raGF1bUdTWmt3UFBXcDE2dlNGYk1jZXE1bjlVQ2lpN3hSWmQ3R0o1MktoYWlBdgpQdGIycXVsbERtTFlsWnA5eWhHYVFXWUJxNWlmQmRkdXFzRHBrdVlXRDQwTkFpVHd6aTRYRDZqa0hmN1RYWkl4Cm9DcmpDaCtpT01iaUtwL0Vnb21tdzBtdjdtWTNsb3czNEZFTjlmSUhleDl5eUxXNG1FSk45WFdNQ2k2aHhGT3UKQ21IT0tQUFVGTWNaNUhVZUdLeDMwZENPT2I4djBtRTRCendSV1g2aC9VN0VmTnlOemd0RkZaaTgxWHh0YzBSMwpveWQzd1NHcW9FUElzaXBMSDZPcmRDQkpZcHdycE1KaVNYUG51Wm1pT1pLemZXV0VZUUtDQVFFQTAvU2VXVGVnCmVyMnpzUTVqMTNtMzN1NkpyMnNKWm1sMS9GaUx4T2dVYlhlYkpuNC96ZWxxN1hvQVJXMFdaREs5Zk9hSnN6TU4KUFRHNFdNSGVnTWVrQlVEeGpMR2dDZzl1UWx3aTVFcVdhYk9BS3JiUCtwSHkzb3lFSlBEU0Z5eG1JVDhpUG1KTwpEeCtrTDkyL3haZGZYMUdyL3hmMWF2c0ozeHpkM2tJNnA5VHJuVWdlMWUxM0ovdk9KdWlKeFVZcXVUWWxyOHdECkovWTVWMGF3T1k5YmF1Sk80c3dpUW9HbHVjOU42dURrMU9FemZ4Qnh5Y2tXQWpXMkttSFpXckYrSXpvN0xwTmYKdDREUWI1VWhmOWNEZzRSODk4YUJ2QzdMQUhocnBCSkhtTzlBUzZtaEFhYk5WUUZSTFpuSndhamRXcEhqL2hiNApzVFVmNTFUcGJYaGZ2UUtDQVFFQTlZbmFKVUJMQU9tWGFlZzh0M1dXVG5tT1RRWVovYjZLSVVUVDhGckloWElPCmkybXNlOGlScDdvcnBTR2VCcDROT2h3Qm9YTmNFZ0o0RzN2RnU1cjBPdm1CWGNVTTk2aU9QVFRHOHBrY2lwZnUKaXpRdndrcHgrb3gzL3hJbE9sblNlTlpEeDZiaEYveXI2L3FEb0pTUHJ3QXJiL0t6SnQzc1E0dmJkdzB1eFZsZQprdTQySE5oOW51TURFaEhqTXF3Tmw0MERxOEdQS3dTNjJhT1gwRmpQTzJrdjZiWXNLU29MaGhpakNoa09iMkZkCnNiMzVlUGhtbUp1WG5EUHVBSHZ6UVNCNUV0TW9lMlRnZHVDWnJjUkEvTjdUWHpIdlVPVzFXYklBWS9Ga1VJcDMKdUdMTjlHSkxGck1kdFNScmFCZi90SGhsZGlkQnRXcXVUbGh2Rnc4Ykt3S0NBUUE0OU5RVWIzRk5hbXErR25yVAo3VjV1cHJVVEVYVk9NdXJFcTlxclNCNHRLR1hsMnlrMElSUmR5bG9HVGdFbFhja3pwaE84dHV4STFIS1FUMUNHClZKK0wxZDdUQ3V4UnA4SGVUVG9IRk5BRWlYcllmNVcxNU1CWjgzS1RKcStlRUkxRlE5emszSy9UT3BKNVZtSngKSzNNeWZ4VDBFTEVmVldSYXN6d2Z2TFpjWVVnTFZOVU1jYXFDY1JUOXVhRkVCTTM0UlVldFRPcFFNOGRHMzdUOQpVcnVqSmp0Q2tNNW9Cc1ROQUpzVWtlaU1HQlFwZ2ZiQjNhcHZYNVdiSC80emM5ek1oSnBnc3JPVzhTT1J5SVplCi94MXZtd3VsM1k4QlRhVzVjNktoVFZRMkVaeTZlRlBPeU04R2w3c0R3UDdKYnFKRTgwMUwrMHBLL0ZhZGFHRHQKek5vVkFvSUJBUUNQNTgxTWk5UHBvdjQwK2dHcjNHVE5kWHlyTStwRHgwcVptUWRHRlU3MHR4WkRLeG9HS2xVRApvcDgxMXZBUkhNelB3OTVJeTUyb2lIM3dUYWhqL2JzcVhWVXVxZkNocmM0L25SRUUyaXZhSnBXT1RIVzVQM3h4CnhhWUdmcElIRXVIQ0pJSHhINk5KTmJObFNKdWduN0ZlZFpEL3VaUzZNTkxwKzZ3U3FFMURLTSsrK1pJSmNmQ2UKRUpxYUdwVzMreEswUWRkbThMaUNFL0dXNE1SM1BiV25Na3o4Z3VKNjljTnZRajA4Qzlkai9BSzN5NG5ORm5pNgo5R1gxREpKdkFqWmRjelRDamJOcUxvTkg2UGJvMnQ3ajFZeTRmRUd3ZmhDOWt3K2JnN3l4WDVZdklPbG9VN3VDCmdGUG0rSU5pckw0Vy9ZRXBzSFJZYVQvamR2MFUzS3VsQW9JQkFRQzBMNTczdmVBelJJaVBPZUhPSTl4LzdjY2kKdXhITEduTWU2MGt5ZHRFWnAyL3JUVWVTTW9sVlRjRHRrTUtvWTlvbFhLQ2ZnbmhQL0NIRFdZMlIxS0xKbkVsWApwKytBbjZGS29oeG5FZThYZXZnbTlFUWorekVTUGRyTkoxeThudUtOWkNocndPeTBLL01JaW9CaVlRU2FDdFVPCmFJSmpyOXNQWFJueS9teGRiUWhRZ1dpdVhYbDdZZHN5SmhxRG8zV0hjc2U0QlpaN3A5OUhPZnFXVURmWStobkUKODg4Z0pYaFBtcytONS9pQ2dFRkhJV1F2Zkw4RnB1bFc0d1gwTGZYTEQrOHVDc3dYa0hSSnBvOFozN1ZRRitTYwpFTDdsYUZRcWl4VVBwa0podjZNWXRNek5jV01EREkxNStNQW5mdFJQZENodkFNcS9DZzViYkEwNThPQUcKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
        },
        "caCertificate": {
            "metadata": {
                "description": "The base 64 certificate authority certificate"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUV4ekNDQXErZ0F3SUJBZ0lRYU9pc2poQVAwUlZoSHNoYTBTbnllVEFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB4T0RBMU1ERXhOek13TVRGYUZ3MHlNREEwTXpBeE56TXdNVEZhTUEweApDekFKQmdOVkJBTVRBbU5oTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUE0RUZ6ClpVcnRUYmczalBXdktJV25sY05VeWZEK0IxL2VOMzZxS3ZyV2ZoQVhXUmZ5b2trV1d6UnJ5T1duYnp3SzZ3RTQKVTlNVXhWaHBva21pZEN3WURpRGZnQjJQakY2RnRKZzhSNjVTVVN4dFc5MncrV2wwV1RuRVhYWmE2MnYzWVZPTQppMTdxVUgyd3h1clBDU0UwRHhxMWR4OEFOcXM2N0QvNm9kUnR0SEtqa2FuOVR0cUNObjRkbFNFRHZpQmVDTm8yCjZicnZpdXpwcDNQbWZYUGQrWTJLR05QV1p6L1hPNzE2emZvcm9QSEIwT1Q5VFZVcTlrVTdkVS80dlFNalVBWUUKempsWHpmREZNd0tDVS93N2hUSmZCdk43NHR5LzljanY4eVJTUG9zNkNucHc1aG9hQUc3NUxiaXNYQVBhb2ZUYgpKUko2TmtVTVdRUGtSZ2ZLWkxFbTc4L21mK1BDQ1g3VmtVdmhVOUtsQjY3YW9GZlRSVktZK3NHQVZkeVVXc0RHCjRTRXNGTEdGSDQ1djdMeGdqUWpzU0VEdkV0MmJnT3UvSWtsTHhtR1VlT1ZOV0s1M2lLamxBZlNsdzJ3bG1hVW4KQ3BLZnN0TmpGaWJZWlhOMThOYklnZWl6YldrYkNyaFpkczRxMXI2U0hBTmw0VHBBSHhGcXEzWmpkTVpxdjROUApLRmc5bUpXNDlyc3o5UW5LZzUvbzNqbXFmSDAva0Z4dG81akFDOUZnSXczRVkyTFBBNmZ1S2Z1Y1dOSjlKbnJ2CjZRTk94YUhFMCtGcUc0YS9lWTRnb3ZtNStuREZwQW5RWEt0aEUrSldheFBacG1kUUFqbWlXK3FITTRtNzhORmcKWkxNamM3bEZPQ0xLUFRtMXhhb2tPUXo5eG9KNnFqK1J4NSsxY3FzQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFILwpCQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFKMzFKbHFSCkN5THIxVm9EOVNIVUdqNFNDYkFCd1RSa1J0Z3ZmRVdHNFd5N0dwTWVsN0lJOHJCYnFrOFlwenV2OVVuQ2NBN1kKYUJ5MmJ0a1hvNlRHb2wySXRpZkxoZE5JLy9GU052aHdiNmVMaTNCZVEvZFJqc3ZxY01lTmJxeE9MSzZkMHZIbQoraDlvLzFHTGlSMEhEcXlSYzBIa01TYllJNGZGVTc1Q0lsYTFCZDB6SVlMRUZ5T3VSM2lvalA0MSs3SmNtWEQ1Cko2dHVUVldNeEIzaTlDVHJqUURmT3UyS2R3K1dIMTdSWUVwZnh6YWJ3czlodEtLT21uU1BMbmIvN1hEWkQ3MGoKZnpDRE9zaVZWZi9mVG13aEhmZXlMWlo0S3d0WnVPQ3BTYVRWa3V1QUI3YUl3OEdGNXFNZUhqU1p4QmVxNHFRQQo5NTRNc3dnMUlRNlJMektUQTNwL1NxaFlybXMwcDkyWnBheXh0YkdMVXo2MUg4SXNuOTZkdkJsZ05CaDFyUUttCjBXTHZGbm9PWkVKQ011T1lqZU1ITEFVWmI0WVk5ZWJoanc0Zm1WZDVtTVEvZ0YwVWxOSTF6VUJZMmZoZVlxbWEKenV3b0VybkVyS1k3TGMrakR3UzVGekRSbzdIVmdVQUtNaVlVblltQUY2elcyLytjYmZ1OWhjSDU4MXVIaU9tbgp5T0ZHUXkzMDIwcGh4VHFMLzcvWFQ3SGVwV2tCbUVUWThqWUlDbXZPa201MlJoM3prcEtFeDczRTBMQWRmWDZPCkcycVd2UTlWWkF4bm03ZHdubVB3S3lrbFZpMm5naU5yV0grM09aR2FpbVB1WnAyNmEzWlVuMFpSYXJWQnV5bWEKY0hNa1RKNktCNlRiVnR6eWRUUnY1R0Ftbk5WYjNSVkdGZURWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
        },
        "caPrivateKey": {
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBNEVGelpVcnRUYmczalBXdktJV25sY05VeWZEK0IxL2VOMzZxS3ZyV2ZoQVhXUmZ5Cm9ra1dXelJyeU9XbmJ6d0s2d0U0VTlNVXhWaHBva21pZEN3WURpRGZnQjJQakY2RnRKZzhSNjVTVVN4dFc5MncKK1dsMFdUbkVYWFphNjJ2M1lWT01pMTdxVUgyd3h1clBDU0UwRHhxMWR4OEFOcXM2N0QvNm9kUnR0SEtqa2FuOQpUdHFDTm40ZGxTRUR2aUJlQ05vMjZicnZpdXpwcDNQbWZYUGQrWTJLR05QV1p6L1hPNzE2emZvcm9QSEIwT1Q5ClRWVXE5a1U3ZFUvNHZRTWpVQVlFempsWHpmREZNd0tDVS93N2hUSmZCdk43NHR5LzljanY4eVJTUG9zNkNucHcKNWhvYUFHNzVMYmlzWEFQYW9mVGJKUko2TmtVTVdRUGtSZ2ZLWkxFbTc4L21mK1BDQ1g3VmtVdmhVOUtsQjY3YQpvRmZUUlZLWStzR0FWZHlVV3NERzRTRXNGTEdGSDQ1djdMeGdqUWpzU0VEdkV0MmJnT3UvSWtsTHhtR1VlT1ZOCldLNTNpS2psQWZTbHcyd2xtYVVuQ3BLZnN0TmpGaWJZWlhOMThOYklnZWl6YldrYkNyaFpkczRxMXI2U0hBTmwKNFRwQUh4RnFxM1pqZE1acXY0TlBLRmc5bUpXNDlyc3o5UW5LZzUvbzNqbXFmSDAva0Z4dG81akFDOUZnSXczRQpZMkxQQTZmdUtmdWNXTko5Sm5ydjZRTk94YUhFMCtGcUc0YS9lWTRnb3ZtNStuREZwQW5RWEt0aEUrSldheFBaCnBtZFFBam1pVytxSE00bTc4TkZnWkxNamM3bEZPQ0xLUFRtMXhhb2tPUXo5eG9KNnFqK1J4NSsxY3FzQ0F3RUEKQVFLQ0FnRUExOENna1BlQlQ2REljU2wrRjNKZlJVcmtMRlZiVVNUKzJrMVcwbnI2R2RiSlg4SVdnZVBuU21Bbwp3dU9RTHdpSlNJZW45WjNEQWdxSnRzVTVNcU9wa1E0M2VUNzNlSWtJQWpQazZ1SGYrSkRSdGV5WDg1MXRmdHFBCi9acDg1cnE5Q2pvam9ZTHowL1RaT3NkMTRNYTlHenNMRTB3VUhJU283OXF0K3p3eFA4WjdjQTBuMDlHT0xYY3cKWnVXWWdEY0x3V0NRTEZiWlY4T1BHTGY5TFAxb3RrdGliWGlCY2x5TmFzQmxnZjRLTTVIa2NtR2RBZVhLcTV6NApFMm1aV2QvRy9acU16UXVHV25BbWlXa0VrbUM5c3V3L1dLU3dzQmJKNkdJbDJMczlGVWRGMUFid3o3Q1ZDNDI0CjFqQXlRMlRCMThlSGZ5ZER4U3F4TW9MNEFCaEdzc1FwTmpXemZuYzk2YTBnR3pNM01wNytxMTY0SDBuYkZUUHUKNm15V2JkaXBlNGk0TW0yOW9ucVAvODBUQ1VVYktqWUhUWDhkWGZ0YStGS2ZJSnMxbUQ1bU5jYlBzRzVjNTV6WQpNY1NlYmlDV3ZtYk9NdnNlNkl3OWlsM1NoOVREM1Vpay9jVVF5NFpNVEN6WEJmU0ZvRTMybG90TDlBUjF4M0NCCjQxcUFYcnlraXNWaklRTzVtMzhBb3pKMnNwYzlWcGhXd3VHa09GZEIxVXNySG8vdWhLdkh4aGI5azZMaVBDZEcKSlVOQWxEckwyaUxaZ0ZwWSsrR01oMVpCTmxISU8vTG1YT0NPdTBkbHc2ellSa2pkL3lDTXFjekI5NnhSR2drMAozdXQzK1VaYWdOeHFhRjMxNFc5VVhiZVpycE5aQy8xSlc5RndGWFRBSW4zVzRiVzIvS0VDZ2dFQkFQY3VtT0p4CkZ5T3ZRcmU0SGhmbWNrUG82UU5GbU1tM2J3RktVYmZCR3A0c0RyNEhWVThJQ1FiajRtdmNYMlBYOVZRSGFoS3oKMG5PQStpTjZlMVpWdVlYbldSODIxN3BFMjBDUjArNmNPK2k1WXc0bW90ckhFRFQyOWJZVitzM2ptdW5Dbm5mSwpBdVVGY1U1V2o2aUJwK3NFb1dSNWxFVEpsbnJzd2oxcUJDMitSaUVRMGZ5SzJEZWdPTDZZbjBPYlRjam5teEYwCkZldmp0S3N3dWFWWitVMXNsand0RVZRQURQVDkvOFpXMjZUSzJTNGNaRmhZTlNFUHE1NzZhZzZ5SkE0bWR2ZjgKK3Y3MXNCckRXYlhSUGZrcDZTSG5HSHAzc2YxY0RQRXRtdTIzSjBhaUlLeXdtV2wrNlZsQVl4Szhhdm9OVWs2TQpjcFQ4UFlFME5JQUJVSzhDZ2dFQkFPaEJlamtFNEt6OU9MV1JhQVFiL1BaMVJOUjJNbCthTlhWMVVjdTRoOG9MCjUwOXY4RHA0VFB3NmhoMmsydVRacXhPbXpHTXAvK3VWOU1IR01LU3dYVHVSRzhJYVh6OFQ2T084M04yK1cxdjQKaVNxMUFscjl3ek5yeXBSR0h1K2xaTXpYV1hQd04rNG05M1ZtTTk2UHR1QVArRWhaeC9Kck1yTFBXNmJvYWlrMwp1UjdCbVoxeUZhMUFxek0zVWtaS1R2RGpDclFIK2lHMlhWWXhFVVhsZWlNYmFiNStXUjdoQnU3ME5PT0NTN1pZCklXeGlGTVZkYUNyTEhHU0J1L0s5T243UWxLcFZTVWdpZ2VYd3FMaldWZjFrNnZObytwVGQzOWRraUJ0ZzRwZU4KcnFLLzczRmVEUk1nQkRIS0FvR0FId0t6SVk1T1dhUVlwZk43bXZjeVpNVUNnZ0VBZGVQaWhQVjlITWJsSWl5TgpKY2NDTG9OeVJ0NDF2ZGRmK1JTU0h2clprQ0RoTXg3YVFDUkw4ZDVVU2k5RHk2SGZYeUZlSk9kZzh6ZkxsWXBBCk12QVYyTmg3T0JqM0VON3dWejUxL3ZMQzIvODNVRE43THE4TWVzWmljR0xSU010S1FqMVJTVDZ1M0w0WXlVMGQKblRlaGQ4U3dtUFFubEJzMVN4R0tuckhtcGs1K3NoeU1tazg2U21WL1N1QU43YmV2aEtkNTNQd3B6R1RBOFhqKwp3ZTlFcVBtbU9iTWc5WmhFbGNCaThoelJDeXE0Skhia0lRS0k3R2pGNkwvMFAyZ1ZMQzZLUlVLQ0Q0SHNhUWRNCnpSdXIzQjl5RW5wZXdXSS9JT0I3UjdnQmtXanVNWkQzMW9VdjFoSHloMS9mSUx0K3BoNGVhRm94OS83SjhzcU0KVTVUTS93S0NBUUVBbmdoWGtzNm4xZTFqRmVCL3B6UW9Gc2JLYzhxTkVoSUt5QVp4QnE1ajd1M1VrVys0UlFDdwpXWHUwNEJ6Wk9KaUhXSkxKUmJ4QlA5ckVOTW1YTmFndmVDV1BmcTZWR29XQWxOMWdaNTFyNnBPZE9hcjZsRkZRCjdmOHRVMkMzRWhjM0ZFNS90bXpBa2RKLzFLa2JLQmdmdGl3SG82czdhczdZSzJUK2x2NVRwZ0lkZXpqK1BteHYKSlhqNFJKd2k1bU1QZmNidTlIcnREdDFZZXhwZUIzSlNmZXJjTTlzaTV1ajAzOGpZNStremZUcFFXOEFOSkJJZgptK2FpUmgwa2R0R2RLTWJpTVZoZ3lhMTVONjFlRUk3KzZiRXVVVHVnTFlVZkZ4OTNvVEYyWE9yeDVobTFZaTA5CnRrSzF0KzhkYjJKdk4xWU53aGU3MVBWVWplMFFENTJCaFFLQ0FRQUMrNGwyZ2plQTUwcTFwTE1rTUV4cWFxYlQKanF5emE2L3hWT1dSbk5GazB1eTYwZ0crQXFyRlRERnBVVTh4WURnRU53T2FjV1JMb2ZRelQvZU9POVk2VDR1Qgp3d2lLdUs3NkNJV1EvdGY4ZHM1czRlUDI2TnNnbTI4K0RDMVk2NzZnREFrSFY4TDRaSmMydWVlaTdWYStWN0gwCkl3RXdpRU0rTmR2OTNLNjVOZTRPQkMyS2ZFWTRiSUNQSldwMTV2eEFIRlZKOWNlQk91MHRON013TDc5Uk1HSHgKUVdqWnNndWNHRlBtLzB4VVZSdGYxT2s0NEQwNHV2K2FwRDd1ZVF3S2lEUzNRVEUyTDBtTWtVaDFaOU5ocWlySgpjQjdVMDNXU2pKc0J1ZVJzbUJReStLakkrS1h1Z0drbkVUWjhDZHRMeEpRQVNqcXAzV29zemtiTE9sUm4KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K",
            "metadata": {
                "description": "The base 64 CA private key used on the master."
            },
            "type": "securestring"
        },
        "clientCertificate": {
            "metadata": {
                "description": "The base 64 client certificate used to communicate with the master"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU5akNDQXQ2Z0F3SUJBZ0lRYUUyWDlsNmI1TzhraUloZlNzK0tTREFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB4T0RBMU1ERXhOek13TVRaYUZ3MHlNREEwTXpBeE56TXdNVFphTUNveApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1ROHdEUVlEVlFRREV3WmpiR2xsYm5Rd2dnSWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFEQ1J5UnRERUFnZnlJYmwxb21LRW0wVUUrWUJ5Q1MKbDNEWG1DaDNBMEt1VkdGaTBNUmsyWjU5YVFvTTFoL1lWQ2pUT3ovbjVJNlE4d0t1WlpMTVNNQ1dIWVIwUjMwYQpQSzh5VmF5aTlHbHdRUi9jcmJhUEtXOHQxNEx5bHBremcrL0pMdURXdy8rR1BsNE5tUnV1dXZqMDY5RTUyOW5oCnFvajV4WkxRRzF4YURVQjh6WGxGT2UydU1uV3c3ZEpBcHdvSDVMd1JGaFhLZENwWG5VdDd1VE55Q2MvZFd2L3QKYSsrWFFxVTRWU1JseDY4dkEyT1dyYW80SjIrRWpIYmc0Sjhma29CT280TllzUU5jSEE4QWhreUoveS8vUEYzMwpla0dYZDVUU050UldRUFNpVGtzNkM3K1ZpM0V6aFRYK05MRUdTNDB2RldzYlBtMm5nMmczZ2FOMzVyMnFONjJkCmpkcmJHOU8vQm5rNE5qZFVpY085MTlxSktwNDJYUWtmTjVmODRnZHNtVjcxQ1p3b3hrMXI4ZHlURDdFZ01GcE4KeVlENHoxdUJISjVDbkU0NmNudmVLRUVZN2xqM2JaTk53cHhvODBmVkh6OHdaOWprdURMY0NBSmJkUk1HeC9JOQowV0o5L0xBM0VpMy9VQ0JBaUltZUlySGtESThZMWV0NGJmaFNPR2I4cVlObUVKcVM2TDl3WUl0ZDRxV0JNQkNhCmk5RzI4LzNxNC9uNjFCZDN1bUZuV0JiS0NFbEQ2MGF0VW1BdlQ1WUp2YXRuWUkzN05IR2UzNlBvbkFQZk5sWDIKOTVSQW82Vjl2ZXNmRlpOU0pQZk40RmFWTFo3b3J2VlVwTlZPSnpLTG52ZUJSZkxYUTJBU2xRbGE3dkdjMERjUQpFdmNZZTRBMnFkUFdDd0lEQVFBQm96VXdNekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJCkt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBSlJ5U2hpclEKUWMvNVBMSnBFWEQwc2xFWlNBeHNzVXJ6L3VFamxPQVp4V2RZVXZKS1JUQS9BRDVwc3lyMVZIUUEzclRGcW1URApwdzhvWHV6SWtpNndHdEVqalRHNkpsS2J0cm41UGV4bEZYLzQzUXlSQ2FpUXR2VTNlLzF1VTFrZ3IxK1hjbWhjCmxFSVl1UzBIdGFFb2lqdFF4S3Bxc3h0VFk0TUExaVdweUNaTjhxaHRWbkQ4eVQzUThzUVh3RXZSdDhhVmc3MWMKa2s1aHVrZStSRjJRYmhKNTBNekIxZW9oZWp0U1k0bDhXSENhT0xtL0loQzgvVlZ4RmZNeEZlQjBuMGFVWHZBbwpiZWpzS3RlaW00LzdFclpoaHowRzNJektNaUpFcGR4YmNzWFAzRjFzYVhBZ2tZejNaQmNQT0NqcmNURzY2eU96CiswdkV2ZEh5ak1vOEdmLy9WTHFqYkd2YnNLb2p3czNlU3gxN2dsNi8wTzg4d0NMMHFiNk9rM0RmeG9pcG9MWUMKLzFnTG9nOURMcUVmUFN6eWlWbENlQnVnd0w4dXRBYk1GTFQ4LzZ6RVRFaVd1TDd4em5GMEFkVHE5K1pUQVJMMgppT0lYWTdUYlFhT3IvenB0bVVXQWpMdFVWTWx0bGhQRCtPWVRGem95MWttTmZBTDFRZUkvRHoxRlRDR3JnaGVHCnRodEtNZnhqdVBGRUtjR1ZpdEtoeU12WlRteVlRS3JpM3k5SEZYRTFQaXhZSDdOK282eHhGaU9vOXN0MmhReXIKdnZMZk1yMXRpczhFYmptZy9pY01NUlQ3R2ZLSDlPZThNMzF2R0NITlE5TkJiT1gyL3BObFFxeEs4REdLSTNPMwpPUTJUeGdNMXlFZVFDVU1SY3ExVkVNSG1abUFJdHdSRC9Saz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
        },
        "clientPrivateKey": {
            "metadata": {
                "description": "The base 64 client private key used to communicate with the master"
            },
            "type": "securestring",
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBd2tja2JReEFJSDhpRzVkYUppaEp0RkJQbUFjZ2twZHcxNWdvZHdOQ3JsUmhZdERFClpObWVmV2tLRE5ZZjJGUW8wenMvNStTT2tQTUNybVdTekVqQWxoMkVkRWQ5R2p5dk1sV3NvdlJwY0VFZjNLMjIKanlsdkxkZUM4cGFaTTRQdnlTN2cxc1AvaGo1ZURaa2JycnI0OU92Uk9kdlo0YXFJK2NXUzBCdGNXZzFBZk0xNQpSVG50cmpKMXNPM1NRS2NLQitTOEVSWVZ5blFxVjUxTGU3a3pjZ25QM1ZyLzdXdnZsMEtsT0ZVa1pjZXZMd05qCmxxMnFPQ2R2aEl4MjRPQ2ZINUtBVHFPRFdMRURYQndQQUlaTWlmOHYvenhkOTNwQmwzZVUwamJVVmtEMG9rNUwKT2d1L2xZdHhNNFUxL2pTeEJrdU5MeFZyR3o1dHA0Tm9ONEdqZCthOXFqZXRuWTNhMnh2VHZ3WjVPRFkzVkluRAp2ZGZhaVNxZU5sMEpIemVYL09JSGJKbGU5UW1jS01aTmEvSGNrdyt4SURCYVRjbUErTTliZ1J5ZVFweE9Pbko3CjNpaEJHTzVZOTIyVFRjS2NhUE5IMVI4L01HZlk1TGd5M0FnQ1czVVRCc2Z5UGRGaWZmeXdOeEl0LzFBZ1FJaUoKbmlLeDVBeVBHTlhyZUczNFVqaG0vS21EWmhDYWt1aS9jR0NMWGVLbGdUQVFtb3ZSdHZQOTZ1UDUrdFFYZDdwaApaMWdXeWdoSlErdEdyVkpnTDArV0NiMnJaMkNOK3pSeG50K2o2SndEM3paVjl2ZVVRS09sZmIzckh4V1RVaVQzCnplQldsUzJlNks3MVZLVFZUaWN5aTU3M2dVWHkxME5nRXBVSld1N3huTkEzRUJMM0dIdUFOcW5UMWdzQ0F3RUEKQVFLQ0FnRUFwbnBPRlgvYzU3dnBuMWtYOEFDdi8rcWQrZm1KaVBScXh1UmxNRzdEMGgwT2dwM0EzV2E1OEY5MQpORUM4Y3lUVEF3Y1BvUWZ5dnZUdWhFRVlCU1FHbTl4WlowYm5SZmRnYmJLS3grekcrV0ZsQ3paMGJNTWx1Vk9tCnEzZ3ZlYnlDV3BSb0tNRTFrblNaSmUvZ2o5ODZmSzRpMFFDNitTeW9TZGhyRVJlUkVMMndXQUcrL0hwQ1dQWjIKY1pHcGpLdFc1aUswb2JPYUlxMWVwMHRycG02eVRmTm9neGQ2blpuVGFudTZsc1ltOVd5aWlwZk4zQTJmQXBXUQpjelhtbkpiKzVCQW5FTHYvVHA0SThnSTlQTWJZaVp2NkppNDFtMTdSSEJsbGxxbFRWVUkrSDJNV0JYeVJ4SFVFCklSRHlqbzNhY0RtSGx5UTBidGtWSCtsMEFiUitQVDBoKzlMWk5mNDRtZU44TThRbVpnZnZmQXlTWlFHMGJSVnkKd3p2N1Y5S2pwTWMyeFZLdzhxZStnT2lhSGJrTWlkNTl4SGxaK0hIVmdMYmNCUWNicWVLbDl5OUV3bFZrSTJySgpYOWVUNUdQSW5GSitYcWd6T3M4SUQ3dS9MWlh5RlhNUUlSOFBVL1RoNmRPWHVtajJ4eXZraDhOYlVqdGFuTzkrCi94MXpyRjlrTmxvazFDekVjbzE5cHBYd3VLNUxKd3hYd29JV1hKZWxyQlRlcFJLV2M0bXBRM3FOSjF3VjVaSEkKcXVXNE4xYldVWXVvK1c2ZjZKclh3a3JOMVkyN0U4eXBUQlMreEMxbEs0WmN3MWVuWktZU1ZFZDZDVFpLVnlrNQpvTHdYMC96UC84TVV0dWNkdXdONmZpalNTVVY1cXhvK0kycTREMkRUdmtDSVpuZy9PK2tDZ2dFQkFNZlVNdjZxCk8rMWRMSHBKS29LS09BTExPbnZvbHo2Y3VzK1dnVmlDWk04MmlFaXQ5aTI2U0JGZXNheXhiSmlMekd6TGRtYWIKTTNFU2E1QlJ0UWY3aGc1YlduNVZKVm9IT0tlTkdUYk9aU0I4ZHZWZ0w4UVpZak0vdlFEelBTQ3ZFNkxmQ2JyQgpFSTZXYkhsenROUHlBWDJqaDRtYmRRTGRrLzh6MEtvZE9jWkZQdzNrV1RIN0x3MGNVdmRlV2ZXaFk2cEJHdlc3Cmgrc2kxWmFuZmMwbzZtQlZEWmlXTmtuRjZDQ0lTVmxaaEFZUlFvT2dpa1VEUEdHSUZVdzVyZHRabjBZOWdIZDgKaU1nSE1jQjVBcktkeTc1SktRRFAzQW54YXZpL0p0eTdDTS85dW0yNCtFVjR2amNXenkvWXN5TmNlZFdhTnJkNQpsTlpxbjRwOHZMRVdwblVDZ2dFQkFQampmVjkwYXptaGJMdXdPajhpM0tKUWI3ZUkyRHplOEwybUtvT0paNllFCnRnODlENDVmaFpoSzJKR3dXcXNVZEMvVlh4SERsSXpheTRnZ0xPRWsraUVNRkZhNVpjV21RQm5QUXQvb2o0L2QKRGJkUEdzamJkZ3NNV294aGhCODM2Z1pvcGJOeWQ4bGg2V1owdzloK0hjUFl3V2IxaWNRRnE3RGYwNE5MQm1UWgo2T2NZRXNoTkVsZEZ6QkZyWUxkZzkwenpxeXozcVdkek85a2JOaStIeHVReUJQUGtOWUVBY0w4MGU2LzNZR29iCjBwY1BXQmpSVi8xVWh0c0ZhTFg5b2hPSDBLOUdFR1RvRUdxbnV0SHM5QWFGeFRxdXdSTHBQclFXczJMQWYyYzQKUGQ2ZjJCbjRRMk00bVFvTXQ1eGRwVWRFWFRlay8xQ0pnU1pvb1JYRituOENnZ0VBWlluQXc4Q1NwT0VrV1pyVgorL0RwMXhtWFJTRUJ3VEg0aHNUdVFxQTNRMGR0WnFqbW40TzVYUUlsL0I5SGxCZnRMeGNQdWNHQkdTS0gvNVJWCkRaSlVJdlZ1ZlNVY3pxcytzWHl6NURKcUZtRElQWlM3a01ScExxdGppWmtQWlkwd3lDRFhHOHRBYzRPaDZQRFAKWUtibTlRVmtPSnNDa1Fzd1NZdjFxb3NoTVVzOFovMnhDUUdlZmVYM2puU2w5M2NqWW42a2lWcmFETFB0bmhqTApoclVVcXhCczBTejZ0dS9XTExtenM3QVZzdE9RWGJ2MHBtNm5mdE9jSnRoa0xFSlUrV2NFNFRJcGVxS1ZPRDBGCkR1ZTVnSjVDTklScVJhOGpjUFFJZGo2ZmtyaFZ3NjBxa25weEJTTVU4allGaUtGVDB5TUNUS1o5NTVuVUtaV0sKZDkyUGhRS0NBUUVBK0VFaG13YnF0UzlZMzlXbUk3ZklUM2JnR0RlOVNPb3ZRMXZ0YUFxMGdocU01cUpIVkFIZgpwY3B5UHMramdLWUVSbm9VUEFuVHNMUEU5R0R6b3hkWkQ0R1cvL0lwbTM1NnpjTzR0dEtuOEIzVVFwWDY1NEpRCk9qRDJXTFFrTDJkOFhTd2dxOTl2c0VXam8zaXdxTThUTFhpVllQZGxsVXI2dUpCcHo3b1VCS0IrK1pNL21OK1gKZmNtM0JXRVB0WnBZMGo3eTdRV1R5Z1pkR2U5VW14Qlp5T0JEcEdwckcrT3VrbW50UGRZSUs0N1kvYWhtZlVyQwo4NE5PaUVUYTd6eXdYNzdHM3kySnlMelpNeWxlNVdudTlscVVJamFSaXlWd1QvMmNyTkhKd3RHTWxQVG5mdS90CmQ1akt2Z1YxVjlqb3RTOXhzOEUya2NTMk4vT0JTZENTVFFLQ0FRQjk4OU9zaEpyemZHSXBmQitzc29LUmQ5cDMKZ1Z1eTZ2ejNyVE9RcktJUE9aOWdWMzVQbXdjS0N0dXBGZFg4WUVSampWc21IREI3OUhCNGtIZkcxK2QrLzFmMgpZRkM4SWZPeEFFTjZ5TjVTVHQrcU9TekpkREJuV0dPcEdMbVg2NXdzdFZUekhPV21nWHJLV3BZUVlZek9BakV0Ck9MZUprVFNwK0VqTHNpQlRSUUJmWStTSFF0SkhGS0lNdFQ3d0dYYTRRYk5JcFRNSnpkRGFya0NmMWVXbmFFeGcKNjhBYzdXanJSWkFaaVhqUkdtZE5KWlpIUlNHUnFJN1BMRFRWOEc0Tzh5YURzQ2tmVTVyNHlzaVVtUU1uRkI4LwpsTmluSlJ6cXVmVExpSjkwZFE5cGt6NFlmblF6NmZNWUNnMVRHVkczTTdTaXhNNjQ1ZmRxajJFdE9zZUoKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
        },
        "cloudProviderBackoff": {
            "defaultValue": "false",
            "metadata": {
                "description": "Enable cloudprovider backoff?"
            },
            "type": "string"
        },
        "cloudProviderBackoffDuration": {
            "defaultValue": "0",
            "metadata": {
                "description": "If backoff enabled, how long until timeout"
            },
            "type": "string"
        },
        "cloudProviderBackoffExponent": {
            "defaultValue": "0",
            "metadata": {
                "description": "If backoff enabled, retry exponent"
            },
            "type": "string"
        },
        "cloudProviderBackoffJitter": {
            "defaultValue": "0",
            "metadata": {
                "description": "If backoff enabled, jitter factor between retries"
            },
            "type": "string"
        },
        "cloudProviderBackoffRetries": {
            "defaultValue": "0",
            "metadata": {
                "description": "If backoff enabled, how many times to retry"
            },
            "type": "string"
        },
        "cloudProviderRatelimit": {
            "defaultValue": "false",
            "metadata": {
                "description": "Enable cloudprovider rate limiting?"
            },
            "type": "string"
        },
        "cloudProviderRatelimitBucket": {
            "defaultValue": "0",
            "metadata": {
                "description": "If rate limiting enabled, bucket size"
            },
            "type": "string"
        },
        "cloudProviderRatelimitQPS": {
            "defaultValue": "0",
            "metadata": {
                "description": "If rate limiting enabled, target maximum QPS"
            },
            "type": "string"
        },
        "cniPluginsURL": {
            "defaultValue": "https://acs-mirror.azureedge.net/cni/cni-plugins-amd64-v0.7.0.tgz",
            "type": "string"
        },
        "containerRuntime": {
            "allowedValues": [
                "docker",
                "clear-containers"
            ],
            "defaultValue": "docker",
            "metadata": {
                "description": "The container runtime to use (docker|clear-containers)"
            },
            "type": "string"
        },
        "dockerBridgeCidr": {
            "defaultValue": "172.17.0.1/16",
            "metadata": {
                "description": "Docker bridge network IP address and subnet"
            },
            "type": "string"
        },
        "dockerEngineDownloadRepo": {
            "defaultValue": "https://aptdocker.azureedge.net/repo",
            "metadata": {
                "description": "The docker engine download url for kubernetes."
            },
            "type": "string"
        },
        "dockerEngineVersion": {
            "allowedValues": [
                "17.05.*",
                "17.04.*",
                "17.03.*",
                "1.13.*",
                "1.12.*",
                "1.11.*"
            ],
            "defaultValue": "17.05.*",
            "metadata": {
                "description": "The docker engine version to install."
            },
            "type": "string"
        },
        "etcdClientCertificate": {
            "metadata": {
                "description": "The base 64 server certificate used on the master"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZEakNDQXZhZ0F3SUJBZ0lRVHVEeGlYWmFaeXNJeWV5ekJ0aHVnakFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB4T0RBMU1ERXhOek13TVRaYUZ3MHlNREEwTXpBeE56TXdNVFphTUJVeApFekFSQmdOVkJBTVRDbVYwWTJSamJHbGxiblF3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLCkFvSUNBUUQydmkrRlR4OUdtYk9yWlhoaW9FR1pSS3hXUjBVd3d5elY5SmNZT2wyVWhSc2N6WHFUY0dDUE91dnoKN0tJRVBkSEdiL1pMTWVKZDFrSlg3aE5MaHBic1JuQUtXSXVOem1SelJHQ0lySmx3SzBVTU1tRUpRZGZPMEhtZwowN2tnaWxRYzBLTWhLazNZaXpGTDR3cGVoZ0wzTU40d1RNNEhvVm9sei9mUTBidVlKUVBqdWlYd2hTRFFUR1E5CjJOTGVYOW1QVTEvaGl0bnl2dGt4VUhPYTc3YVRVeU9KdGttSDliWTJLM21SUTB3d1luTngzTDB5V1I4OEZJWksKaVBTYU5sT2RvMVVnemRIYTNoV3M5a2VnVFl2NVdDU294bDgyWkJVZVRmcHBsRzJTTEwyaUs4Z0thZ0M1eWcvVQozeFM1NCsyRmIyckFEM2Rmb2NBWEVCbHZmbjZsaUtQSXcvMUVvMHY5Znh5ODlDMHgwSXdXajNVRjYwOUZlN3BrCmV1c3FsNG5PdVRxYnM4MnlQQUtnVzlESlY4eFVWSXBGTExFNEZ0aFFpbGVxTG5QYzJqd3h3a1RBVHREWUlTMUcKRWkvczRuSmFQSTZuLzZuSHFZeitDbHdkRG1LemNRNHRuL1Q3NHNSQ1FvM21LNitweTVySFRZb0Y4d2RueFJ1TAp6SEwvUS9OSnNBdGFiV2FBVTRBWkVwTnpVS3lMMVRCcEViTG5NSS9KSm9WcG1sY3NxWVlnbEtQcHIzZUpQZEZwCkE4M05maEgrS3drN3hTWGUvdnFKVWpTQ0FlSWcvcExtRmZrMTJvY3JqdDRuS1cxUGJzN0kyY2RhS1JFY1VnU3gKMSsxL01CQXk1ek05OVhlaVNOYk1LclQ5QUViaWoxdHNTbkZHOHdMc1Z0VXd3ZElicHdJREFRQUJvMkl3WURBTwpCZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHCkExVWRFd0VCL3dRQ01BQXdJUVlEVlIwUkJCb3dHSWNFSGdFQUJZY0VIZ0VBRDRjRUNnQUFBWWNFZndBQUFUQU4KQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBVE1wSXk1VjFFNXN3a3Jwd2hGNDJtK3Fva25XOVhRSlFiRENacE90QwpvekdYZVlkU05VOCtXcHJBdGRWejJwczJYd1dnaHpLNCtqdVdod2F0d1VteUFwOGFabUNmTGpyQUdpMUw3MXMvCmw4RDRvdnRabW9hNXFQSXgrcVZGTHdVNHlvNHVYM01ua3d0dUtNWTJiQ1R3QUc3dllua0xYZlh4VmY4WXRnZngKVk5NejAxODMrZzdqZGgrNW5sdFhtZi80OGIvYzEwUGF4Wi90U0wrRDFjV2UvWS9HUVJsSTRnWjFoTkYvdTBFNQpCTkRleVRaR1RQcnlzRFFWaUUyTGRQaDhzMVdTcFlxL2VPYU1lOXJmK3RQTkNPMWpyYzVPY3Y1cWlQR2hrSDg4CjJOY1dXZDRtdGRVVkVEWGdKeXJkak4vdHpTSW1QaWx3czVqMzdZaFUrczFla1NQa1ZiLzFPNExhc3ZqMS9BWmwKVlJNdXppUFJ5aXpnci9SRlYxMGhZd01pb21UZU5lNjBqbCtrOC9nNzM2SWgwWUxDOThIWkhhbjBaNlYyTUw2UAovK3QvUitiTCtaTzB5TmpUd1FLYkZ4Tkh4ZEtXRWtUK3dLcGhselBhSEIxQ2RVaFJCcDRVMmtra2FhN2Fab0ZhClZRWUdPbW0xQTg3ZkhwVURqVXNrQmJmWWZ0TllCYWhITDVXRGRPeVJrNzlXZ05JU0t0MERoM0svZEM4aEdlMlUKSkpqakdNcEhDVnVUTU1ReEIrVk55MzVHV09pSXRvOFNDWVg0Ymplb2VkSWNOTlQyV2lzREdBWkFGaFVEMkdCUApQcGFtV2ZBVGVDUXRUaTdWcndFK1VIMzluVlhzN2tFdis4bDdYbEQwZ1NmZ013VThvZzFqeUlhRUErci80RFhJCkV3az0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
        },
        "etcdClientPrivateKey": {
            "metadata": {
                "description": "The base 64 server private key used on the master."
            },
            "type": "securestring",
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS2dJQkFBS0NBZ0VBOXI0dmhVOGZScG16cTJWNFlxQkJtVVNzVmtkRk1NTXMxZlNYR0RwZGxJVWJITTE2CmszQmdqenJyOCt5aUJEM1J4bS8yU3pIaVhkWkNWKzRUUzRhVzdFWndDbGlMamM1a2MwUmdpS3laY0N0RkRESmgKQ1VIWHp0QjVvTk81SUlwVUhOQ2pJU3BOMklzeFMrTUtYb1lDOXpEZU1Fek9CNkZhSmMvMzBORzdtQ1VENDdvbAo4SVVnMEV4a1BkalMzbC9aajFOZjRZclo4cjdaTVZCem11KzJrMU1qaWJaSmgvVzJOaXQ1a1VOTU1HSnpjZHk5Ck1sa2ZQQlNHU29qMG1qWlRuYU5WSU0zUjJ0NFZyUFpIb0UyTCtWZ2txTVpmTm1RVkhrMzZhWlJ0a2l5OW9pdkkKQ21vQXVjb1AxTjhVdWVQdGhXOXF3QTkzWDZIQUZ4QVpiMzUrcFlpanlNUDlSS05ML1g4Y3ZQUXRNZENNRm85MQpCZXRQUlh1NlpIcnJLcGVKenJrNm03UE5zandDb0Z2UXlWZk1WRlNLUlN5eE9CYllVSXBYcWk1ejNObzhNY0pFCndFN1EyQ0V0UmhJdjdPSnlXanlPcC8rcHg2bU0vZ3BjSFE1aXMzRU9MWi8wKytMRVFrS041aXV2cWN1YXgwMksKQmZNSFo4VWJpOHh5LzBQelNiQUxXbTFtZ0ZPQUdSS1RjMUNzaTlVd2FSR3k1ekNQeVNhRmFacFhMS21HSUpTago2YTkzaVQzUmFRUE56WDRSL2lzSk84VWwzdjc2aVZJMGdnSGlJUDZTNWhYNU5kcUhLNDdlSnlsdFQyN095Tm5ICldpa1JIRklFc2RmdGZ6QVFNdWN6UGZWM29rald6Q3EwL1FCRzRvOWJiRXB4UnZNQzdGYlZNTUhTRzZjQ0F3RUEKQVFLQ0FnRUFpZUE2VTZhajFtS2F5RUthSTVwakxZNzNNZnIvU2NFMk01UktQZXFYVWgrU3grUjJBeDgvaGFtcQpJWkp2OGlqTktMSjFrUTBkN2N1RkpQZE81dHdkUjRnUW9XZGJDL0Z4cGd0bVdka0FvSEk5VWhSd3JxaVJPK3E0Cm5FclMzc0VOUVZEQVp3N3Brd0FzbXJnU21rRU9OU3lrYTU3dlhjb213b3hVY09aUmlqSGMyNHF3R3BkNWY0dkEKVStMdDZmN3JaakJ6bW1kcFpFQ0t3d2l1b0x3a2JHeC9wanNyR1lNT3YzUkpxUWRPOHBhQTVmWXY3b3RvYmIwVwpVVjM0T0pmMDMxaGVnRWNpWmNmRm12Ry9rbTdpc1lFMGN1N3VVMGxYbDZpQkxqQVhqaC9jRTF1ZG0xd2liYTdnCmE5WUFFZU93WE9pbVlRNERhWGZNQzljZUwzUWl0YW9rSisxcWRoVFhPNDhwcHVkVzIyMnJsWTZCSGlHVU5vZzEKQ0lZY1U5ZG4xemVIWVZ1K215ZTczMjdSbFNLOEF3c3c3and1cnN2Uk9aSlAzbXlyYUc4UWR5NExUYVVHaWtTZQpMeU8wZUUzOUVZUjNsaEdIRW1xMzU4MzIzaFJDVUdWUnFQSzF5NjJMbHpUR3MrODlYVWxBd2ZaRE9mZXduTmJGCmloQ25jb01KMFUvVlpHamYzR29QZTUydFJRQjMxZzZUT1lWZFBzbXdUMmZKUDc3TUtqYjUxZWdscTVrYkZlYlQKNHFFMUtadm5hUERkeGxGMmZTYzBodVJnU3JuMzN4MXZSWXRHZitGNDcyY2lNUXJKb25aV1BRcGlzYk15anZLSgo1WEtDQXF2bDRaU0J1a05oWDFEN1lxbDFFNXAzVGEzUXlObmdwTWpoRlVwckZNbEEwZ2tDZ2dFQkFQdVNJSmNuCk5sOXNlWDkzRmFZV0VEd2FFLzZjb09zZ3NnUm9qUE1lTDV1VGdQRGxSNVJHbjc5MGd0aVlEV0NRd200bDY4UEMKRDNKVDdIQ2luSFJqSjd3R1QzZ21lWWZEN1Mrb3dyc1dpNmNlTnVQODQxenJJS1lqbDA0OCsyY1VTVmdNTG4wbwpMSy9sUzRzeXFWdUc2dndiSUM4SFNEYXluTTNHcXd6VlFnV3FYUm1JVjBpeVU0eVBtcnNZSnR3TXErZ2hmcUFPCnhTNW5mUXBmbjhVV0JONGlIWjBQSEVOT1RyYk13bXRwT2FQTTczdnRjbE96Q2xvd1l1Y01VUWppYXFaeDRxOGcKVVhldUdJdW5aQUpWcUtGd1BMY2VURjJMUnpIWlpVb2FSVGF3b1NKcC9VK3I3QllvRUl3ZUFhOERWckMzT1ZiMgptQUVjUTRVSThtWlFBMlVDZ2dFQkFQc1dURlJpeFlGeGhoNzRXNlBCQUthYlRTelFLMUx5aFFqaTdOWXFYOGhQCnRWTFlyS0xrME50c1lMcUgwWUJZQkJNbFAvTWFQZFBTWncyOGc2eVd0VWhRcTRCUCt6VXA5aGxsT2FQUTNmWGgKMXVhZHUyMnI5QUJlWEErc3RkTGxmdjZ6dXBXU2Y2cEdNNWdhTnJYMnJQQTk4THg3TkNtb3NrZW9Ndm9JUzIxYgpVK2tMUVlMTzhJcFJmVU9aOUZCYUVFd3RKaTVLQU1GRlN4aDhxNEExV3ZpY3JYZFVQVjdONnhnOXBmY3FOVHhEClJwN0pvOU5UQVdZeEZiblR1eWNNVzRrQzBIcWI4TTc0djh2L3BBdUdKaWZpZmF5MFFJbzhpUzRQZG42TUwvL1EKa1dHcVUvdVFwcUNxbzVEeU0xMFpkbDk4ellISUtXYTZRdTNhN2VNZXdCc0NnZ0VCQU9lN25udTk2aThTVEFUbgpYRERHcUNQRTNlQXV4V2h4a0tuUTZPMVdSQUpxYUY3K3hPWEgvSVV1dlF6cFc0RTFOM1NoUjhEbU5MWmFxalRECkJaMk1iT0NkYTN6QTdEZnNlY0xxRUo2bjBQS2JPWExmMDB3WFp0YkRlQy9ncXJBMEZxK2RZUUYzRFZybHU2VzQKZ0JySWVCTE1wZVBNTUcvNkxjaTdsWHJYd3Q1WEpUVk15eUl5NmhWVGZ2T1M5dERDZDJQMzNwMXZuYUQyUVU5Wgo4R0ZxdkFjbW8rSzJOWkdtUTRuTnFkV3BjeWY0c2kyVTl6ZzBkM2ZHbElSQ2F5N2s2ZHJ5a3g1QWhlclptdENoCjI5VHV0TXdwQ0RTaUd6UWNCUFBkVHBscEE1S3lOMnZzK0NMNHVodGF3b3RmWkt1alJxcTN6SURYM0FOQjFzeG8KQm1uS2tLVUNnZ0VCQUk1dC82NSt1UHJNb3dBK2NmMWFKanhjTEZNWFl2d1NobFNjSlN6M3JJMjhhV2N0Y2dDVgpPOFM4bmNJeCtTMk13QUw4Um1Kb3FGbllLSTBxT3FkVWRsRW5NYUgvdk1oVG5UNmFwUysvODZqZkMwQ1dpUk9WClR6eEdTb0s1dmdwOEZLWDIzZ2lxcWJDMVVkOGVQNXJJNnlEOGdlcnBHSlhwRS9pQitTak1PNzAwNlV4eERpQmQKc3lWRFJJTnNlYUo2OUhQQnlMN0pTOVJXc2xxWm5jK0VkSzVDY2tRV2pSbVNSYUhpbHBxMlhxeG9uVTdGb3lEbApIUTRUR2Zmbm0ycHpJQm1BZHpLVjh1djFQeGRCVkpVVTYrQUVJcll0S2M5QXQ3QmhKUjV6OTJadHNZcHRUR2FQCmozWGtWaFNLejRnb1FYVzVIZnBZeU9OMUZUSkgxbG5YdjdFQ2dnRUFGdVIyL1MwV0MzTnpOWmcveUxiR2U3Qm8KVml0L0NzdnVwaHBiMmxENDBHM3hrR1VEbDFtc081QjQyanI4UFJLUlpaYXdUUk9JWFc5VzZ1R3VZTGVuaWppbAptZk9SUkhsRDVrY2hiMCtZOFF5VVhVZ0RzaStnT1VURDR4NFhXU0JPdXMwNXhyTmZRU1pwTnl5MkJLTzZQUDNMCm01a2ZVSjcvK2Nwemx1Q3p2V0R0OXhobGQ5dUhyT3pHQWVlQWZ6KzhQZXEzc3p4Wk5mZlpvb1ZCUDVIS2h0YWIKTmh1VDJwTnlPbk1LSWFZU2IrcFU2V0ZnN0VnSDNCdHVYbW9SQ2Q0Tm42Y2t3VnpkYVl6Y2gwTk5NaHNvd29nYQozUEZCUDZ0RU9kN1kzZ1RRZTRuOTJrK1NraG0wTHNPN1JWRzJ4Q0ducCt3ODYxY2xDSlVZT2QwMDlEcWhaQT09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
        },
        "etcdDiskSizeGB": {
            "defaultValue": "512",
            "metadata": {
                "description": "Size in GB to allocate for etcd volume"
            },
            "type": "string"
        },
        "etcdDownloadURLBase": {
            "defaultValue": "https://acs-mirror.azureedge.net/github-coreos",
            "metadata": {
                "description": "etcd image base URL"
            },
            "type": "string"
        },
        "etcdPeerCertificate0": {
            "metadata": {
                "description": "The base 64 server certificates used on the master"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZEVENDQXZXZ0F3SUJBZ0lSQU9EdHRNZFVQODEwdllZcVFZZ0Y1SUl3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTVRnd05UQXhNVGN6TURFMldoY05NakF3TkRNd01UY3pNREUyV2pBVApNUkV3RHdZRFZRUURFd2hsZEdOa2NHVmxjakNDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DCmdnSUJBT0IzQ0xqN1dpUTJuZFlxSDZJcHpBYlZGWmFnenI5Y1FLOWZ6WG9pZ21OczBNTGhPSWxRQjVaRjhWM1EKbC95dEZVYXNWMzlTcWN0VnBVV2ZwNENib2VScHREYkN5eTRHRnlOMmVOSEpGd1d2UmYzcmtKb2VLTGtTU3J6egpVNUVqeHNPL1NmMHl1YmFoZW5XckVQTzRVWGEwRnVVcWJRbW43YW9JQ2s2Z3BWaXBPbW9HZ3VLSWQwNkdaZFRTCkdmdkIzQ2RxT3lQQ29CdU9MMFdyRTVrLzNpdnF1bXYyaVcrOUx3TEkzcE5mRmp0MTdLVURkaUFjeGhHa1ZidmgKZjhaNzFLYjBQbU5rZTVRZ0V4VFBUWkdNNlJoYTNDL0M0VGV2WVNQUzBBelRNQ3FoOHhZZDIxQ0ExOWQ3ejIxeQozcG1ZTTVadGhwV3VFZ05tK0lVckVNVUJmWHZvcmlGakx5V1pBRGtFUGswL1A0T3lSeWtsWFR2RW9KbGd0M0JLCm5rVnRJWDlVTXVuTzZ5NUptYVMybjVRa3NLNC9Kc3hoRWJCQkM1WlluUjMySHdRd2RHMFJvbGRCUkc2QWV0OGQKNHFLSlVsRkc3cFVSRzNycGFMbEh6L1dGWmtwb254bFlOaHFQWmIvUHB6MVJZd0tORjVKeXp4SGI5ZWYzL3BEVgpVc243TVNQOFZJbURBc2pJRjVrYVhGSEdhaHAybzE1THZObVAzV2UvbFdmeURGOWo1Tmw3ZThoRm4yVGtyMWJ3CmNVbTd1dUgvZXZnMCtyV0NiekJwUVJVcWY1djBBMWt6MXpMNVJpWC9SOGN4Q2xFd2R4dzhWSTdHVjEvemI2VVYKUFRvbG5Ccm1PRTdnb2pYYUszZk16WlNnekhFQmVJV3ZCbThFbmRpRSsyZHczMDJQQWdNQkFBR2pZakJnTUE0RwpBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEClZSMFRBUUgvQkFJd0FEQWhCZ05WSFJFRUdqQVlod1FlQVFBRmh3UWVBUUFQaHdRS0FBQUJod1IvQUFBQk1BMEcKQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUMyWlNxcHNiWkJFQTRVODVPWDk2UFEzaGRKU2N1SWRHWjJhVEE3UTVTMQp4WTEvM3VoNGdkVWhpTS9wYVZKb1Yxb3pBM3BLSWZ3VWh1S3hlMW9jek1GeXZDbUovS01tN2pTYnZJUDhvcUxYCmR1cDgxU09zSHhEY2F5djNObi9XdVYzTERvaEh6WEwyN3JUU1hlbmdGNSt4dmR4MGoxSFFSSDQ5Z2lqTldXc0QKK3A3R3h6Z3N2d0Z3bzdMUXhGb2JWaGd3U2F1eVZFbnZLQmxuVEJXUmtaZVlxV01FRmdoOTV6MFBlbm1LRjBMZgpXdmZtbWtpR2lHUDlEZ0k1V3dCbXdpRVE4NnpPMWVLSGVSd1NzdlpLQ1Fpc1did2lHZVMrdWRJcVFrVmJuVmQ3CnkzdlA0ZGpHRFRMMFBiM1BJNm1HYitNUTBGVjBSbDNDOHZ1cXdWYm1YbHhKS241dWkybmw2eTgwMmkzRFMzUjkKdHduUVhWZFJ6YVJqTm1ocE4yNEIxTmxjNGZ6Y2MvMjdFNTNyZmE1NnB1M1FyenJCMEFjMXN4Y2wyZGNIQ2RjegptcHB5NCtqd2pOYTVqQVJBeWRhSENlV2VIREdEZlNDK0o2WUhFZDhFanZ4RmFYcy9oYWRFUmRzVFd0THlacjl6ClZDWWNLbDlRSEgrVlRtUkpLWWRGbnF6RnlzU0orT3Z6ZWd4R0xlei9jMlovemZaemRRc0FHRGtkY0ZZekp4alcKb1dtM2hxN3l4aURZTWVBNFNZL2xLREl3TkZTSUhWUUVlR2NUYTJ4S1VUWFMvYWVLajdDMVVGanRRaVhPZ3hnZQpqc25nL0ZUMDc2SlJuV2NMSmE2M2d5L2liTVBzUUU1YXc2WVEwU0tUTXpBcjBMSTh2akRGRUNMVmtsanNGdDk1CmJBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
        },
        "etcdPeerPrivateKey0": {
            "metadata": {
                "description": "The base 64 server private keys used on the master."
            },
            "type": "securestring",
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS3dJQkFBS0NBZ0VBNEhjSXVQdGFKRGFkMWlvZm9pbk1CdFVWbHFET3YxeEFyMS9OZWlLQ1kyelF3dUU0CmlWQUhsa1h4WGRDWC9LMFZScXhYZjFLcHkxV2xSWituZ0p1aDVHbTBOc0xMTGdZWEkzWjQwY2tYQmE5Ri9ldVEKbWg0b3VSSkt2UE5Ua1NQR3c3OUovVEs1dHFGNmRhc1E4N2hSZHJRVzVTcHRDYWZ0cWdnS1RxQ2xXS2s2YWdhQwo0b2gzVG9abDFOSVorOEhjSjJvN0k4S2dHNDR2UmFzVG1UL2VLK3E2YS9hSmI3MHZBc2plazE4V08zWHNwUU4yCklCekdFYVJWdStGL3hudlVwdlErWTJSN2xDQVRGTTlOa1l6cEdGcmNMOExoTjY5aEk5TFFETk13S3FIekZoM2IKVUlEWDEzdlBiWExlbVpnemxtMkdsYTRTQTJiNGhTc1F4UUY5ZStpdUlXTXZKWmtBT1FRK1RUOC9nN0pIS1NWZApPOFNnbVdDM2NFcWVSVzBoZjFReTZjN3JMa21acExhZmxDU3dyajhtekdFUnNFRUxsbGlkSGZZZkJEQjBiUkdpClYwRkVib0I2M3gzaW9vbFNVVWJ1bFJFYmV1bG91VWZQOVlWbVNtaWZHVmcyR285bHY4K25QVkZqQW8wWGtuTFAKRWR2MTUvZitrTlZTeWZzeEkveFVpWU1DeU1nWG1ScGNVY1pxR25halhrdTgyWS9kWjcrVlovSU1YMlBrMlh0Nwp5RVdmWk9TdlZ2QnhTYnU2NGY5NitEVDZ0WUp2TUdsQkZTcC9tL1FEV1RQWE12bEdKZjlIeHpFS1VUQjNIRHhVCmpzWlhYL052cFJVOU9pV2NHdVk0VHVDaU5kb3JkOHpObEtETWNRRjRoYThHYndTZDJJVDdaM0RmVFk4Q0F3RUEKQVFLQ0FnRUF4M3lDb0FPaWhQU1ZLYlNlRUh5YytxVjlYalRrQ1dWdmgyelpMR1puQXYyK09yUDJqdkkxQy9SMQpJaTgwSkRlZTVRUmRicWFFaUZWQllMTVhKbEVxZTlrRmRIV0NKUkQ4bDJPKzFKS21oMExTTFd5aFFwYnpFaWVUCmpJR2tEeVdBakk4QXJxbmFLdGt3QUV0YjhYNHB5QmtkRCtXNHFoQTRSQmlKTUgvTTh4TFMrMDkyR3VXMVFuQm4KSjlEaGpzRW5hMUFaNXhvZE9PQVFXeFpEZ0xzbU5GbVQvRWRLdGFlb2xBejQ0bmhyUmNUejMyTklKQm51WGRkeQo2bHJxTi9mdGNjTTNmeFhhVGphRFBzZE41TUVhbDY2SWFWb0UxbnhqRkhkU3QxTXBSM3BPazZWTk9DcUpxTlE3CjhNVloxNTlRbWF3VkpBbGpzT3BlaTl0T09BZXZBRG9meTIzWjNGUG95MElEQ0lkeW9CeXdCb3lTYk5XMXYyWi8KcGF1ZUtLZTJzK1pIcWNTNEJmd3gyWU9sdlJrSFFVeVk0QWZtV0x5dHlFN1BMVmhMQStNSlhvZkFTd0MvVkhyUAo5T2k0WEtYUmQrVTZPdldWZmxVb3FQcFVweG5ROHRRYTFqMkRCcjh6Qnp6dm12RW1nOG9kdWZ2WnRUQzI0NC9ICmhnOGkwQlcwK3owT1ZNL05rNk1JQlBNTHdtRFNtV3hhZ0FtZzc2akk0NE44NXJHYk1zaHR2RlkvQWtOVDBoVVQKR2NQN1lSS1RTa0VJajJIclQxM0pBS0hJWkhPOXNpR3ZYOFpwbnBoZi9tUHN0YlhpWGxUYkpWWGR0aEJtNFlndQpVdjBqbEJCSXhlRTZ2cWFOTlVSZmJPa3FiSnVZdzladU9HLzdJOGFyNDgrZkswQUpjc0VDZ2dFQkFQQ2ZBZWlQClR1YUdCSnhoVzA5T2FKbzU4T3lIV1BST2dKODZZSTZDekUrcGQvcjE1Mk1NdHV4ZmV6OWZlQ2ptV1VSYVBQNGcKYkRIdDJXZzBnaXp5SXBMV0lyUEYxWEZmNmxHSEtWY0tLbSsreUFRVU5WSDd6MHpYZVNtUVgyOE11SnRuVEZmNQpxblYxd3F6ZDZhQnZlVEJGbWRTK2NvNzZXZC9hSVYyUjBnT3RSUHJ6S08yUGE5R0t6VmxZOEFSdHdMenlIMHl4CjZhdm1Dcnhrbzl0bzU4aXNoMEZMeGU3OHlPd1NXT1h6TnlXM0dKUGRRTGJVNlFmOXZoR1FTS3RYWlZtQm5LRHgKT1JsRWZPWHhIWVhDbW90SXlsaWwrd01uYjk0bGhxV01SS2YzYitmQkJxYVhyYXN0V0JLc0s5R0paNjQ0WjVjbwpMUUd3c0srZHBRVlBzTmNDZ2dFQkFPN1BydUczQk1tT2VzRGQzWjY4Nkw2UUMzVW0vOS81WlFXak1jSDJiYVRZCjFTSGdnN1kvU3F2NVlxSWlZRTgvTHh4RG5nYzZlS0dTKzVpT3ZkTk03bHBoMjJPZGx1TXJRZnNSWTJ4aWVjS3kKd0x4UDhGRlR1b3RCR3gwNHRLcnlNRzZvcmU3eXZIL2RraEVFVkhxaTlTOTBPa3M5djZnMkVHbCtubk5mU25TaQp5dFN1bW5PbUtHQUE2MzM5a3VVSjAwM1UvS2xxL3NHeXRSZTVPTU9QRzBEOXJ6dGl6SXdYS3A4RG92VHUwUGJlCk9zellheWx0OXNZY2JrM2dOSnl2SDQ2ckFza0sxdVd4QU4xZmV6bkdocGxsSU9MWG5LODEraTNNWWJqUld4ZmMKcDVNUFFUQkVRSHIrUWtvRW53VnNiTklnQUd5UENibmNQOGY5em1EOTJna0NnZ0VCQUtnQWZWYWc2SmZ2cnJ4NQpCVVhrR3dqRHQ4R041ci85SjdVRkQzR3hSWEhCZzNJSHkxek8vZEVnQVcrSCt0K2pwV1FpRlQvaDUya2RCcFRKClJMS1pCU2E4dUZJSXFUU1ZvWWIyOWhnOWtzK2V4d3lDQjVDTVhucnFYMEJ6K3c0UU5iemJiT1JuLzJvdnBKTUsKQmhyc2VoTUlKWlh5dXcyMUlwYzNOK0NhOWFWM2p4Z2dPczFUUEJaNzhWQ1cxazVoU3hjaGZsVVFTM1NvRTRyaQpRYjNxQ3h1RHlwUCtrZDZCUk0vL0oyNjJXQ1RQS0N2bGFVKytiRTRXRG1VNDltUWJpem5wVXpEVCsrZjJkN1ljCm1WNVJONUpVYW1ObTBGR3RjV0FMbDIxeStHVEdVSzNoaWdFN0doalFlaFBmZm1DNHJWbHBMSHJQcEV6dnp3MXUKNWs5RkN0VUNnZ0VCQUlRK3RoV0FpRUlsaUl5dFVFRExWQWZUTk1VWFo3TGNKTGxPZWd0ekw1eU9CdGpQdjZCNAp4QjBmNlNMbjduVjBBOTZmQXkvMWpUL01hVTgrSEppYWpaTzNoUXBSQm5HZVR0ZDk5WlRibzVuUjZ6RmRBelBHCkxoTlhabkIwS25oUHpjbzUxcmZ2NjdyVE5FUUFKZGdUemJzTm5ncDBrMkhQTHA5ODRybjVGdjRuK0RKMnpra2sKeGs4RHMyVDl1dzdpdGdUdjRVcmdXVnRpWHk1WC83c3IwR2ZaRStUSy9ZTEdnVysxVDlSYk81UzUwODRFT3JPaQpsWGwzM1ExN0R5ZUZRdkI2ZXZ4aDZFY2lFZHlGTjNQeklDNXA5aUFvVGpnb3AvWWNyRER3bm9WRVIvZ0VCcEYzCitrMGg2QXVkSzRLUlhHR3dId3YrMmQvMnU4dEFIYjFRVmlFQ2dnRUJBSzMrakRKZm9ObTZFL3hlMWpPdGRGNS8KQjNmSXlyQ3B1azc4QlZqbUE4b3U2bkpXd0xrRmhkRXFBbHdaV0NwUFNHbmVGdzhYQTBBWjZQMTVzSHp1a0JuaApERTl1L1BuSENkSVorQTEwVWZyM0lGbnUrbHFWN2Q1OVhMZGJFM2p4Qkg5TUo3V0NoMHZOUlpyVFRkUEJXTlkzCmF1TWhQYndnU0dJTklhUFc5dUVGQjd5Qnp3SDlNbHVJd2trNWpjWEJaT1hZb25xRW5XbEc1S2l2ZVkycXFUcW8KYVQwNjBKWm1INnRTK3Q1ZDJNbWk0bXVrNFF2dDFaRjZXZFdyM0RUVXhyQTJoM1hkMEVjQ2x4NHNNMjlUcEl4aApITS9KcjM3N2VqU2J1SE9UVlNSTnUzZFZWSFpuWWZYRXE1NUR2bVZyS2RLZFkvaU5yQW51MTBHbHd1SktmOXM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
        },
        "etcdServerCertificate": {
            "metadata": {
                "description": "The base 64 server certificate used on the master"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZEekNDQXZlZ0F3SUJBZ0lSQUp3MXFzaW5PTEVlT1l4ZkhiT240UEF3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTVRnd05UQXhNVGN6TURFMldoY05NakF3TkRNd01UY3pNREUyV2pBVgpNUk13RVFZRFZRUURFd3BsZEdOa2MyVnlkbVZ5TUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDCkNnS0NBZ0VBK0tXallGOVc1NDZSUHcxdkxDV2RCM28yRVVWZnEwYnlqQWlOaHhIdm41dXBUZVBCbUdCWHk4SUQKNllxbVpJOVZqSnkvNllGMTJuL0JVNmZPMUhZTUxldWJHNHZXZXJvZmRGNkFvLzI2SkFrVURzdm1pWWJKbWxXVgpITG9VekpGMnVGZHVZano1MmQrdS9NNG0yQTBqV3NoWDUxSml1WEIxSnkxcVdmTUtDQUVDZFpvZzFhWDNnM3htCmxKQ0NZLy95QXYxL1F2YWllbllrM3RKRVpGa0RvZzM0T3V3NGVrVGVuWmduYTNNd3dWamNMYjhjNXRmUWJXRXEKTEFyVk11OWloTEM5aVNaOHlkaEY4bm54eEVVb0srK05ncy9JQndPN0t2RW9WWDZtZnVoSjkvMHRQWDlyNDJiOQp3eStWdXlwSVJPY09BazdGU05TdE11eEtnb0dyOHZ1eG1SdW53blZDRWg4bG1ING5MN3NpOWU0ZnhzSEdBM3N6CmpXcjNNbk5PQnNGRnllUklzb2syVzdJSWwxWVV2alhzRmpQTU9OcUMwUUVWdzJHc2lHMkJmSVlkQzh5bHRhSnYKSDVpUlZWRmt4QkpUMjlRTFR2YUZCVDZQSEJYTHU3Q2VLRmd2djFmSUJlcmZpeFQ0NlNQY1dzUGYwTjRSVlVhcApWTm9GM1lmNlNhMU9Udy9TdDlNdGtRMUZnRHRLZnBpbVFFdlQ4dUxHMXBZQU9kOVlNaThkVGVldlFrWTlFYjdmCkhqbnBudndPdEE5bXlmTi82b3gvSDFoaWtuSmUrWlVzVzFTemRtK0pOOHRCSGlGekhqZ3Y5clgrdnQ1aW9ndU8KaENBUmFBYitHdzZWclhJZGFkV1BhK0VoY1VGZVZpNmtyd29UNFFwTVFHT2RzaEN1L3EwQ0F3RUFBYU5pTUdBdwpEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNCkJnTlZIUk1CQWY4RUFqQUFNQ0VHQTFVZEVRUWFNQmlIQkI0QkFBV0hCQjRCQUErSEJBb0FBQUdIQkg4QUFBRXcKRFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUlTamRLWGkzT2hxMGJIM0N3N1RCWmN0YnRLdzNZZHNqM2pYLzh3NQpvVklIUzlLQTBsa3pXalNqb3VXcDlpVmhFdXdGYW1GdGhIMXlsMmQ5bnJMMmVCYVhTSVdVMGNyL0s3aUlQejJiCnk0bFd6dFJjemtMdm9icDAyNklrODBNdmE4NWJod2tKV1VydUxIaUNvdHRSTlpXZHdCSzQ3ZER6S1poc2pHZncKZnV2U2w3ZWtpZzBwSmx6a2lvbWUwYmlXNnJkZ0ljaWRFZEZKRm5nS09zYVdBZ2p6aklBNk9MdmhZdjNpUHNyVgp3NlUvalBEMjVkWkNraHQ2Q1diRi84QkcvaHF4UGV3cDExODh6L3ZpMStjRzhibWlpaURPZ2xDeWZnVy93ZUhmCjVWeHJyVXQxajF2OXgwWkFwZVN6MnJsRTJEZG84S0Q2M1RHRU15RGVlT0w0bkVJMzUreGRoZXdpeG1pbStUR2sKQmFoMmlEY3Q1YmlOeWJVTEZ5U285NlN2MzVJUnlWTzdUbE5oQzZVbXBMZWZQUGZoTjJ4VkF3dVRsSi9IckNwbQpxQUFicFc5UkJ4enkyZDIxbVpwUWdydGFwY2lRZjFwd1VQdVlIU1pDcWhLWVJSamJwZzVNSlBLNkMrakQvTmZzCmgvSXBObjJPN0hlK1hFTEtSYXNGL09rVm5hTWpMUDVFSDhkSFJVc0YveXlYL0lCb25DaUY3azlXMUU1dWNkQlIKVHB5NWhmRDAvVkVOd2UwNUdQcUJ6MWlwVjB2L204SnpzTGh2bmk3RGRmaDVMQVVHVUJybmxTTzUwT24wMkRZNAp4UlpuWENGZW9ma0F4OURQMEp2eGxJeDJxVFozYlg0OHVKMWVwSHpEVmJxZ2ZETlhIY3JPZ3VlWFNKVS9NaldnClNMNHoKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
        },
        "etcdServerPrivateKey": {
            "metadata": {
                "description": "The base 64 server private key used on the master."
            },
            "type": "securestring",
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBK0tXallGOVc1NDZSUHcxdkxDV2RCM28yRVVWZnEwYnlqQWlOaHhIdm41dXBUZVBCCm1HQlh5OElENllxbVpJOVZqSnkvNllGMTJuL0JVNmZPMUhZTUxldWJHNHZXZXJvZmRGNkFvLzI2SkFrVURzdm0KaVliSm1sV1ZITG9VekpGMnVGZHVZano1MmQrdS9NNG0yQTBqV3NoWDUxSml1WEIxSnkxcVdmTUtDQUVDZFpvZwoxYVgzZzN4bWxKQ0NZLy95QXYxL1F2YWllbllrM3RKRVpGa0RvZzM0T3V3NGVrVGVuWmduYTNNd3dWamNMYjhjCjV0ZlFiV0VxTEFyVk11OWloTEM5aVNaOHlkaEY4bm54eEVVb0srK05ncy9JQndPN0t2RW9WWDZtZnVoSjkvMHQKUFg5cjQyYjl3eStWdXlwSVJPY09BazdGU05TdE11eEtnb0dyOHZ1eG1SdW53blZDRWg4bG1ING5MN3NpOWU0Zgp4c0hHQTNzempXcjNNbk5PQnNGRnllUklzb2syVzdJSWwxWVV2alhzRmpQTU9OcUMwUUVWdzJHc2lHMkJmSVlkCkM4eWx0YUp2SDVpUlZWRmt4QkpUMjlRTFR2YUZCVDZQSEJYTHU3Q2VLRmd2djFmSUJlcmZpeFQ0NlNQY1dzUGYKME40UlZVYXBWTm9GM1lmNlNhMU9Udy9TdDlNdGtRMUZnRHRLZnBpbVFFdlQ4dUxHMXBZQU9kOVlNaThkVGVldgpRa1k5RWI3ZkhqbnBudndPdEE5bXlmTi82b3gvSDFoaWtuSmUrWlVzVzFTemRtK0pOOHRCSGlGekhqZ3Y5clgrCnZ0NWlvZ3VPaENBUmFBYitHdzZWclhJZGFkV1BhK0VoY1VGZVZpNmtyd29UNFFwTVFHT2RzaEN1L3EwQ0F3RUEKQVFLQ0FnQk05d2lSUmpHaVQzRUtNV0JlSys1bGFDRGdTN2NIVDFpNG05VWpJQndxTFliRWcyRmpoejdsNVZKTQpzZ3c3U0ZyVXdaaHQ4UkxINVkrMEUxZGtVSDRJb010TVJZYklTbUIrSnRwdTZKVDdub3ZFNEx5bGlVRlNNbmVMCmd0WDVWSFdKTGhjTzlZenBNZUg2Z3Qxbk52bmdtZThMdldhdHUrK25odGxLcW41S1ovV1k3WEtJYjIwa0dCZXcKbU9LampaQWQrTld4cHFJNGdlVjd5MTQ4S1ltRVdncWlRb2hnNEh5QUQ1NzBGWjNiMjJPY0RYSW15bHJMNEsycgpJRmRLQXV0ZDQwOW42cS9wMHJZa0RqY1Y1OG85ZjFNd1VKeTcveDJxZHlkaS8yY09GVjBBRkRBeXZ3Um9TWEwzClBmMTlCK09DNEhwbm9IWlV5dkFwdVJaL095QTc1QmJSWEhQY0VVdjhST0w2YitSei8yZ2Nic2J2Qzh1WDloN0gKODVZQVk1ZWd3bjVvQy9Ba2l5dXpDY2dKWDRLb0VUL3ZzUUlPUjJKMjJsck1Db1gvaWJBRHR5RCs3TU1xVm1UZApidXRERHlwU2piWXFvTjhEOEt3N1kvdXBhckl6MTk5MWFWY0VLRUMrL2NyZkJ5aThwTnY0QktpVWlKQjZzbXBCCjZFdnlkVDIzUURCKytxNld1ZitTZnVqZ2JIT3BYbkY0ZVNlbzZZVDRiMjYxakl6MFZhRGFPWmlBZjd2TFlEcmQKQ09JVmdnTEtUWmlUZFk0cXBvUnJDcVY4K2d2UlNjOXZZbVR5ZitkYUNVUEZ0MVZYQUlxNTZKa0xkYVdGcEs3MQpPQnRoNzRsLzNlVGdkK0F0UDhtRGtoeWM4RmR2cEptc083N2NwM2xocVJHM0laTzdpUUtDQVFFQS9nNDcraVYzCjRoQWNMRU95Ujh5b0RUakR2SnRtZjl2bklBbHMyUUxhOUpHOW9jVHdHUnRHSXcxTTVSRVlDZ2JUMEFwTEZDZG4KWDRmRDNMYzR5RU9XTXdwdVpsU1ZOVjF5TTZ2ek9nSHRkVHgzeTJWWW1ZMjBwMStmQldKUnVLN0xZdGtzV0QzaQo3YlJEazBzQjA1TWxtQXJ0bVBteWdRYStuMXpwZ1RERnBhZDIrTWRmT3Y3Nk5idUF0Nm5zeU9mdFRQOHRxWHZLCnJxZDNNVVVrWTZIZDFnckI0MG1IdjNWMDEzMXd0bThNK0NDa3BPc1p1cDczbzJqT1E4RURBQk51UnlpTkJKcWMKRWR4dEE4OG16YXRiT3RubnlDMHJmNDZWc3ZKR2l4Z0tvSS9yUDhjclA2eGhyTzVjTjYxclB0K3FPYzVIV2djdQppaXBKOEJhNktyU3ptd0tDQVFFQStvek9sdnRCY3ZiVXY1U3prbDAwN0JQS3h4ZUZweENOanBlcDk1Rk56dkh3CmdkSHY1aFIwdGgxZWxvTTB6QXFXNGc3b3Q1WVdjTXpJL0hpQjVuMVdyeE5FY3hBa1BTY0NlUXQxMFYwdUlnQnkKOFdNcDBZMFFhQ0Z2bkF4a0haM0hBdjZ3b0RVaEpreUJrbU9XVkRRZS9oRlNHblh3Nnl6U2J3RFpkVWRYVWZRcgptVEpGTE5EbGFONW9zTHFOZjdYTzdaTnpVVEwwSzhVWHozUFNWTlp5bWl5ZTZtUlcycmloMHp6Yy9kTGdnZmhhCmtyUUNPT2llYzYvTkY0MVpQU0d1VU9pQjVCNi9abHZ0UmV1dWpJNFBsM21EZDJLRjRrL0JBVUFSazZkd01RNlEKT3BGelgwaUNTb1ArYmFqVjZ0RFpzR3hLRnU5OW1GeWFvRFZSUU8ydlZ3S0NBUUFPUmZwMHFWbzg1eTdPQmRlawpWUWswQlBacVNFalA4aWpnRWVkOW9iMXZkQ2kxUi8wOVM5ejY1eXBrekRzUGhTYXRUNGE4VVNKcnFaTUZlWDNGCk1wYmpzemhVbzNmbWthTnk1N3c0akJjdE9RSjUrTzJyWXR5OWNvL2FtNVYvek1JOGdYc09VaHZId3hMdzJZdjIKdVJPcG9TT01McXNxdUpoSkY4MCtwdURUMTc3RloxNGdVR2I2VWRoL2VScUdoeEU3L0RJeWpYUHJzQmp3T2JRNwpyTUpyM2hyYWpDMEdRckVYMGtKYzNZeGEvR3FEb1huR2xGdlJZSGdHTW5mYXJ6ekkzcXhkajlvbzNydDVOVkEyCnllUE1RS1hYQjBLa1hmeG5HMWwvUXhDRnlOQXN1eUhnNSt4czdNOWRpVzYzRDVYZXZZb2dzcnFZcEp1VzA1QU8KQ2l6MUFvSUJBUUNpNGxPVVdEZ09jMldRUHk0VzR6MTZsTXRwYjJOV1h5NklHeFZHZTFKb1RXV2NJRTJqK0h4Lwp3TXd6Y1kwcmNWN3lDOXRETHZIYjEyWjZyQ1ZYSVBqdnpNamRQUXN5TG1BdkxVSWxJRHpUb2hNWDF1M2k2NkJVCjhoZkxEVXN3N2RmcG5JWmJRTzhTSlA2L21ycXFkMUFHd0YvdUQrcldHVWVkSHFKQTJtWnNReDdzODMrQlNUVTcKWGd3VmlOSmd5bU9DbEMrT0JHQTA3R2MwV1FuT1diUWJneEsxTXhJOEUzZ3hDZ3BwZ1dTdldqUVgxNnJ5TUZpQwp3VEhHTkFCbCs3V0ZxQUo1dVh1WklmNDVUS1VuZjF1bmtEbmxyVWw0L1h4dVFhYXJwVmtNcTNrY2VsN1UvU0NuCkxQU0ZlaFBJR29yTFpUc3RlZmpleXFWRHJpWHEzaHIxQW9JQkFRRGtvWGorL1drMW5yd0ZPNnNnamNxazFMa3YKeENjRUlGZFQ4QUdzb3BXdjFlUjhSeEF4N0c2enRESHVlYXRzald4eVlobjRGTCsvaGlZbFIvTlE3eFVYNElUcwo1MmhOdzVjanh2TVYxS05ManptSjNHN0FScmtSTW8zZlkwV21XeGVXWVhYVFFnb3NvNDRHN3JXVUxOS1hTeC9SCmVRY0w0c2lPYVd6TzVwMkluZyttZHhlaEFaSkVsV3kwbUxmbDFJcUhrUmw0cjVsUWJ1NDFBOFIzR2E5cURXOVoKekFXMVRpbFJTYXloUmluN2J3RmhYeEtkbjNNYXdsOXEwTHNKRkp0SW1ZNkR5em5jb1lIRmwxUkE1TVhZcStoTQpYT1pFN2FTb0pmRlpzaVhVb3U4ZnY0NGlVRnFEemZJRnlid2JRVU9laGxhcE1yVGFXY0hOa2ZiQzVudDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
        },
        "etcdVersion": {
            "defaultValue": "3.2.16",
            "metadata": {
                "description": "etcd version"
            },
            "type": "string"
        },
        "firstConsecutiveStaticIP": {
            "defaultValue": "30.1.0.5",
            "metadata": {
                "description": "Sets the static IP of the first master"
            },
            "type": "string"
        },
        "fqdnEndpointSuffix": {
            "defaultValue": "cloudapp.azure.com",
            "metadata": {
                "description": "Endpoint of FQDN."
            },
            "type": "string"
        },
        "gcHighThreshold": {
            "defaultValue": 85,
            "metadata": {
                "description": "High Threshold for Image Garbage collection on each node"
            },
            "type": "int"
        },
        "gcLowThreshold": {
            "defaultValue": 80,
            "metadata": {
                "description": "Low Threshold for Image Garbage collection on each node."
            },
            "type": "int"
        },
        "generatorCode": {
            "defaultValue": "acsengine",
            "metadata": {
                "description": "The generator code used to identify the generator"
            },
            "type": "string"
        },
        "kubeClusterCidr": {
            "defaultValue": "10.244.0.0/16",
            "metadata": {
                "description": "Kubernetes cluster subnet"
            },
            "type": "string"
        },
        "kubeConfigCertificate": {
            "metadata": {
                "description": "The base 64 certificate used by cli to communicate with the master"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU5ekNDQXQrZ0F3SUJBZ0lSQUx6bGl6YkVoY2NnODB4MGpRYkxnd1V3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTVRnd05UQXhNVGN6TURFMldoY05NakF3TkRNd01UY3pNREUyV2pBcQpNUmN3RlFZRFZRUUtFdzV6ZVhOMFpXMDZiV0Z6ZEdWeWN6RVBNQTBHQTFVRUF4TUdZMnhwWlc1ME1JSUNJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQTBBN3J6ZU9tUDFmaks1ODNzMmlrMFlseEhsZ1gKSHdPVEI2UklwWEtUTk1TdFZHRnVvaDFRd3ZaYzIyeU9vRDAxWU9vUTUyZi9SNVU1L1k3ZzRKbE4zL0p3bmVyWgo4MU5BUDdFeUFkWlNoS0pRdnZrVkF0Rzg2TWp6ekFNZjE0YlZ6d1lNMWlVSDRHa2lBRG9ieHFCMzRCd1JoeE5FCi9kNFFHRVpsTXBLYWVzajhVcWwxZ2hiaHNqSHRTYUN4WHpNWE9BMU9JMzh4djduWkVPQmg2QXA4czNJcGVYUDUKb003K3JmanNPRmVmaEVoT2IrZVNmdDNRZmsvckFiUldXRkh2a2VybXFRQmpIRW1iMVdMWmdZU1J5V0xBZ1VBTwpLZGhBdEtmNGpNMWlqL1pjbTIxQ0I0V3BmNjFQUE96dkJzTzNqR3p3VWFJNENjZERobThtQkJnUkFSWlMvbis2CjZ5SnBuUi9TbVFMQm9va0Y4K2EzcHRuay9WYXk3TmNRc2o0WlZMRk1GMC84SlgyaVlURk9KWXpiVjBETWRaOGEKbFkvWG1tdThUd3FndkNUd0ViSWhtSmtRUGQxNUtWSWZlTVpFaGN3YjdlVEsxUmlGY2UyeFB3UjlFOHAzeDU1eQpnN1M3Mksyck11OTQ5aEJwek1WeXJvUGt5OVRmd2M4UVN4WGpDMlliZnlOc2RJak9WclpQTm5wd29obzZ1T0YrCnZLWjJFWjRuUkFyblFHRHU1RmFudXhSRVg2cS9abVFFRWx2Z2V5UVhtQmtrWSs1a1p5dGMrUXYzajZkcGNUam8KRFYyRnoyNlJ0NVBsSFNzUGFKZ2wxKzg2MzN4THN3T1dXVEJoRDdTTVA2K2ZST0NnVFRVcXpCMm8wN2V4bEZVdQo5WVljeFJzUjVIcHF0QVVDQXdFQUFhTTFNRE13RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU1NQW9HCkNDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUdiOE9jRW8KM2YzVXowV09oVUJ4N3VuVW0xTGxmSGdLclMxMmh4WkRqUDQvYzkvWjg2WlE1R1Q2MVJRL2w2OVVWT0tPS1QvcAp0TTNEcFlJOFFjSjZWV3Z2K3orZE9XOHQ1MWV5dkx5WjVPeVdmRmgwcmVVTWwzL0hXSFlnZjBNM1ZCcndKQ2ZFCnlPY3RHdGllQlhIV1d4Q1BwRGJjMHpXVTg0M0ZmS2wydjl1NEIrQlc4cDgzMmE2OXZ2MUtGMm9vWkdvVmhLT0cKLzRlYmxkNUxzQ0FhR1pLajU1bk90amthV0lYMzlNSVhiclV1UVJoVFVTU3MrRHMyeFNockUrNDFiQXc2T3A1Lwp2bmlsdk5rbzBxNlh2Vkd5QkdGRnZXWFpHRTA5ak0xR0gzZzZKa2pzWUdkbzhBSXo2clpyUmNxRFU1b1FxdWpCCjBsdjhWL2xuUjBQTzh4T1RIZ3JPQzdDOWFPdVgyVEhFbmw3OXh1a2NKai9MZFpXTFNXWktQaFd2bDFHenZOeW8KOEgyRko4NnpyMjFPbnNIUFYvdlNaeisxeFFSUm5ndWNLZWdhL1JzeVROYVNCVlY3TFZMZXdGK3VTUEdXL25CcgpYUzRwUjV0QXVHNHZEamsydEszUXE0YzFkdXZUbG5WWHRGdXF0eFJCWldPN1lpd04rUy9zZktEKzhLcjRRenZFCnY3Q2k0VU9FdUJiUmhHVitPZ1pueGVwQW1SWmE5blNSakIxYm9ZcDNUT3lJYVFZYzNObENjNzZHK1Vmc0FucnkKc0dBT2wvVlg1TlY3bnMzc05DcVVaQzVkZlVybHpwTVp0T1pFUWRSNkJJMHFBazd3Zi9IVlExTjcrZmdIaFR6dQpvWjVIRi9rckRnNXJWaHFsZlZzMityVlV3VmpENTNGYVFES0EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
        },
        "kubeConfigPrivateKey": {
            "metadata": {
                "description": "The base 64 private key used by cli to communicate with the master"
            },
            "type": "securestring",
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS2dJQkFBS0NBZ0VBMEE3cnplT21QMWZqSzU4M3MyaWswWWx4SGxnWEh3T1RCNlJJcFhLVE5NU3RWR0Z1Cm9oMVF3dlpjMjJ5T29EMDFZT29RNTJmL1I1VTUvWTdnNEpsTjMvSnduZXJaODFOQVA3RXlBZFpTaEtKUXZ2a1YKQXRHODZNanp6QU1mMTRiVnp3WU0xaVVINEdraUFEb2J4cUIzNEJ3Umh4TkUvZDRRR0VabE1wS2Flc2o4VXFsMQpnaGJoc2pIdFNhQ3hYek1YT0ExT0kzOHh2N25aRU9CaDZBcDhzM0lwZVhQNW9NNytyZmpzT0ZlZmhFaE9iK2VTCmZ0M1Fmay9yQWJSV1dGSHZrZXJtcVFCakhFbWIxV0xaZ1lTUnlXTEFnVUFPS2RoQXRLZjRqTTFpai9aY20yMUMKQjRXcGY2MVBQT3p2QnNPM2pHendVYUk0Q2NkRGhtOG1CQmdSQVJaUy9uKzY2eUpwblIvU21RTEJvb2tGOCthMwpwdG5rL1ZheTdOY1FzajRaVkxGTUYwLzhKWDJpWVRGT0pZemJWMERNZFo4YWxZL1htbXU4VHdxZ3ZDVHdFYkloCm1Ka1FQZDE1S1ZJZmVNWkVoY3diN2VUSzFSaUZjZTJ4UHdSOUU4cDN4NTV5ZzdTNzJLMnJNdTk0OWhCcHpNVnkKcm9Qa3k5VGZ3YzhRU3hYakMyWWJmeU5zZElqT1ZyWlBObnB3b2hvNnVPRit2S1oyRVo0blJBcm5RR0R1NUZhbgp1eFJFWDZxL1ptUUVFbHZnZXlRWG1Ca2tZKzVrWnl0YytRdjNqNmRwY1Rqb0RWMkZ6MjZSdDVQbEhTc1BhSmdsCjErODYzM3hMc3dPV1dUQmhEN1NNUDYrZlJPQ2dUVFVxekIybzA3ZXhsRlV1OVlZY3hSc1I1SHBxdEFVQ0F3RUEKQVFLQ0FnRUFscjFZeHREYTBDWGk1dVh5T3ovanVoUjBLbUgwVG5vT2VvamlRVXhqcnVXWUZ2eUlaVmdML1ZUMQpMZHpXOE8ybjBOR0U4Y045UnVXdElESDJaNE5xMG9nYVk2K1Z2UjloKzBOc1VieHdDTHg0K0FRSzN3SUtkald4CnZPdStsQzZTbGUxeU8yeVU2bGdCVkZ6Rlp3RTRHTno5TGZvZUVEaGxQTkV6M0pJdTdpclQ5U2ZsaFIwQzVGSWIKOHk1RGxBKzJFTnhDOHFEaThGKzhEdWdpeHpWaDU3a2NwMndKUGlMNmpoMDlPQXp6KzZsUGV2QXlTVXg0RkN2ZQp2bHRqKzVWUmwweXpWVnA4ZERBNGdUK2ZDcUY3NW9adnByVThEY0VxRURscWNNa1ZVZXhTYUNHZXAwaUY1NFV2ClZacnNDdUNlQ1ZXY1Aramg1T1BEM3BDRTRJNTNNaDFhY0c4bGc1UFJWODJSeHJxVi9GR3pvQ1UyY08xWkNZWVcKNDIvUWFMWGpNTjI3N1BWbWpmcFAzR3JFMDVVK0JYbEFnNk1UeG5SRGI5dWMrRitJTldCcmdVMGIyeFEyRGxGRwpCcHV0ZEsxb1Uwdk9NZms0WWRJRXM5a3JRSHRFRmlYY1FzejQ1dXN0U1Y5ZVpxQ0ZtbkxaTGE3ZlQxM1hoWElRCllzN0FHVzR1SUZoZVg1ZDNDaGxrN0JsZmw4SHNpK0h0b0lnNkl2WkJITnovWWQxZzlCQ1lTcVhlVi8zblJmMlYKbDhZK0tmS0hsZWRrcDlzSlJGWnJRMDlZYlZNaVRtNlVoUCtJZVZGcDczbktwbU4ydGo2WWxITW1xUjQ0RCtiTQpNQXhXMjdySGk0SnQ1NVYyRURZak10MmM3MGRaMEVEYkRBdWhzTU5QL3VTbXlZTFhnbmtDZ2dFQkFQWUNQZEtSCmZsVlh6MjkvTzU2Yzh3OStWd2Nqd01tNVlpNHlaeXkzdUtBZnJ1aS9idFRIbXhQNnNSQkJyUnI4VHNHUThXTUIKRnhQL0NreXpDNldCVzczV2tjc0t3cWoxd3ZZOEhGYWp5VjkyZSthWkxOaUhFK1pzTkc2bEF6V1pJL0xwNzhObwo2RDRNV3NNbHcrNURTVXU1N0YrQVlTZS9LNXUxRzRpaEF3ckkwajQrUE1ieXF0QUJuaWJEdVViejlpK1V2TkszCmRtUlBzRVJMYXVPVGlBN1Mzb0QyUTJoTyszNGZhdUtURnRsdHdrQXo1US9mRmNWM2o1N2ZHTmV3aDJ3VE83MzUKWUlWOEVVRW5SYlFUbUp1TzhOendFb0hBNW9teW5PYUNOKzJCZk1YV21FZG5UOVVGVWJOS25xRGNsVW4vRlVYTwpvMW9QcUJNQ05FRnBvSE1DZ2dFQkFOaUNHNVJoOTZMZTNkQzFtTDB5VDNGVnZma0Z4RXEyTEpVNW94UG5UQ2pjCmR2S2NHMEp2YUpwdGRLaEM0VGtpRG9IUFNFNEx0SUd1SHN2eXpXSCtDcFBDR0FiRGRkUVB1ZitZY3NhYVVWNXUKaWxKZVEvZkdaWE9VeFhpVk01dzZoeDRTcWo5ZFRrYzZjR2JEdWlzVU5idGlIZ01nRzNNcCthdTUrUSttNlAxSwpzSzdYcWIweU5tbWFoSkw1dlU4UmdBRnAvRDNvVHFnQmpObGpiZkhSTklXc0NNY1RyaHBuQUgzSHdQUmppUFVwCkdxZVpOdGJCeHZtRHFtM20wczJpd1VaUENsdkxOSWNFczlEK1pkbkFuMVBwQy9UUlc2ODVtNTJvMkx2VkZNYkQKdUVZMHpyRnY4Y21ybXI4dHBpTW5ENHBPOUFxaUZhYjhDQzgwbGtmYms2Y0NnZ0VCQU1sdDZtcm9nSFdta1kycwpzd2RiWVZWVlVETGpYbTZOb1V0TUw5aVlrYzVpUXRnR0x0eUFsNFRUWm5sMkhTUVVaUFB2RndiR2xMdmx2dXd3ClNoLzQvRUpEVjFyVjg2OWVrNFVFa1B1TDNrMlErVUJHT1VjTnl3aUhucUxkNy9QSjhYcHJlOHNYc2Rsa1NraXgKT20xem9LY2xrOXBhaHJLQndGWWRBMjlxenMvY3dQRUFDc21uVnA4OFE5OWZzT3Zjdzc0UDNrLzJzalRPWHZoOApmQWZjKzdHUGpXb3d1ZDdGbFB5ZkF1aUVJVmhrbTRId08rVXo5MktaVS9wMGw2Vzd3QmFJNVFqWEVPWWJRUkdFCjgzalA5c3VnVGEzSjBJMTNnZ3hMT0ZjeFZsUGRDMm4rSE8rU012YXNCVXAxbGM4RzdpSUpmOFNKdm96MmR0c2gKbWVIWmQrc0NnZ0VCQUtRZ1ZXbnhyamt3ZTdSb3hXVy9Tc3ZldE1tZkhvT0lnRm1MUE4yc3ZHWkpZbjVkNnFnOQpMbTNLeGVGNythSkc5L3BkdVRFNDNGaG1ONEJpQ21IYnBBY0kzdy9aZ213RWsvcDNoYUthZjA1M3U3SGZOZVVSCjUveHJiaHNQOS9UWnhXMzl0a09jcHVlR0hJazZuTmxsVTZvK0lnUTZoYlNTd0dyMjZ5QjdaaW9GUWRUNU5mcHYKb3lJQStiazFTdFl5clBmbGNVczQzTSt0aFNtU24xanVQOE9KZTRuMm1FZjVoenpTZmFxRi9kL2pqZ281TW9JdwptWGF5NGpLNEJWdlBvblo3R3A0bGVDZFdZRDN4YkNKYlRDemZBS3BSUHhDaE9oK1ZUTjl2RTNYdURyWmg5OEk0CjIzRUcvcU1vcHNZRktWbXVxbitaQ1pMeGdmN08vWkZ4bWdjQ2dnRUFFYlA3bnlWR2IrQ2tCcXgwYnp5c1poRHIKNERFQzUxd2tsQllYRWxrbk02U1lra0tVcFp1UWFZTTdVSTlkZWx2UHpjVW9xQmVydnFZUUVHek5GYzNOZTVFWgoxNnIza0hveFdicWc3MEcxVzlBMkd4V2Yra043eUVFbHVISEdSZ3p0L1pLZXQ1MUZWandmTEJ0eHMrM2t2OC9KCjhLVlV6UVZWT2V5a0lKN20xVTRyWjdtWFh0bDhrK0t6eHpPaXA3MFE2c3p5NFFEVVFseTRGMC9DRSs3WXVTRmIKekNwa0xzSWJFYUVVTDkreUVMeFdnNmp1dEthNVJld25GQ1JmWkFzVjBVSDhPQ1UyRHFLRk53aTdwb1llV1l6UAowc0dHR05rOGpPcjZyOXFhVnMyQzhUT2hQVFhud3FDZmlSVEV5K0NNTVhZY0s5YXdTRnVRQkdrOEdiOWNDdz09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
        },
        "kubeDNSServiceIP": {
            "defaultValue": "10.0.0.10",
            "metadata": {
                "description": "Kubernetes DNS IP"
            },
            "type": "string"
        },
        "kubeServiceCidr": {
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "Kubernetes service address space"
            },
            "type": "string"
        },
        "kubernetesACIConnectorCPULimit": {
            "defaultValue": "50m",
            "metadata": {
                "description": "ACI Connector CPU Limit"
            },
            "type": "string"
        },
        "kubernetesACIConnectorCPURequests": {
            "defaultValue": "50m",
            "metadata": {
                "description": "ACI Connector CPU Requests"
            },
            "type": "string"
        },
        "kubernetesACIConnectorClientId": {
            "defaultValue": "",
            "metadata": {
                "description": "Client id for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorClientKey": {
            "defaultValue": "",
            "metadata": {
                "description": "Client key for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorMemoryLimit": {
            "defaultValue": "150Mi",
            "metadata": {
                "description": "ACI Connector Memory Limit"
            },
            "type": "string"
        },
        "kubernetesACIConnectorMemoryRequests": {
            "defaultValue": "150Mi",
            "metadata": {
                "description": "ACI Connector Memory Requests"
            },
            "type": "string"
        },
        "kubernetesACIConnectorNodeName": {
            "defaultValue": "aci-connector",
            "metadata": {
                "description": "Node name for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorOS": {
            "defaultValue": "Linux",
            "metadata": {
                "description": "OS for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorRegion": {
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Region for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorResourceGroup": {
            "defaultValue": "",
            "metadata": {
                "description": "Resource group for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorSpec": {
            "defaultValue": "microsoft/virtual-kubelet:latest",
            "metadata": {
                "description": "The container spec for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorSubscriptionId": {
            "defaultValue": "",
            "metadata": {
                "description": "Subscription id for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorTaint": {
            "defaultValue": "azure.com/aci",
            "metadata": {
                "description": "Taint for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorTenantId": {
            "defaultValue": "",
            "metadata": {
                "description": "Tenant id for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesAddonManagerSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/kube-addon-manager-amd64:v8.6",
            "metadata": {
                "description": "The container spec for hyperkube."
            },
            "type": "string"
        },
        "kubernetesAddonResizerSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/addon-resizer:1.7",
            "metadata": {
                "description": "The container spec for addon-resizer."
            },
            "type": "string"
        },
        "kubernetesCcmImageSpec": {
            "defaultValue": "",
            "metadata": {
                "description": "The container spec for cloud-controller-manager."
            },
            "type": "string"
        },
        "kubernetesDNSMasqSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/k8s-dns-dnsmasq-nanny-amd64:1.14.8",
            "metadata": {
                "description": "The container spec for kube-dnsmasq-amd64."
            },
            "type": "string"
        },
        "kubernetesDashboardCPULimit": {
            "defaultValue": "300m",
            "metadata": {
                "description": "Dashboard CPU Limit."
            },
            "type": "string"
        },
        "kubernetesDashboardCPURequests": {
            "defaultValue": "300m",
            "metadata": {
                "description": "Dashboard CPU Requests."
            },
            "type": "string"
        },
        "kubernetesDashboardMemoryLimit": {
            "defaultValue": "150Mi",
            "metadata": {
                "description": "Dashboard Memory Limit."
            },
            "type": "string"
        },
        "kubernetesDashboardMemoryRequests": {
            "defaultValue": "150Mi",
            "metadata": {
                "description": "Dashboard Memory Requests."
            },
            "type": "string"
        },
        "kubernetesDashboardSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/kubernetes-dashboard-amd64:v1.8.3",
            "metadata": {
                "description": "The container spec for kubernetes-dashboard-amd64."
            },
            "type": "string"
        },
        "kubernetesExecHealthzSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/exechealthz-amd64:1.2",
            "metadata": {
                "description": "The container spec for exechealthz-amd64."
            },
            "type": "string"
        },
        "kubernetesHeapsterSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/heapster-amd64:v1.5.1",
            "metadata": {
                "description": "The container spec for heapster."
            },
            "type": "string"
        },
        "kubernetesHyperkubeSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/hyperkube-amd64:v1.10.1",
            "metadata": {
                "description": "The container spec for hyperkube."
            },
            "type": "string"
        },
        "kubernetesKubeDNSSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/k8s-dns-kube-dns-amd64:1.14.8",
            "metadata": {
                "description": "The container spec for kubedns-amd64."
            },
            "type": "string"
        },
        "kubernetesKubeletClusterDomain": {
            "metadata": {
                "description": "--cluster-domain Kubelet config"
            },
            "type": "string",
            "defaultValue": "cluster.local"
        },
        "kubernetesMetricsServerSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/metrics-server-amd64:v0.2.1",
            "metadata": {
                "description": "The container spec for Metrics Server."
            },
            "type": "string"
        },
        "kubernetesNonMasqueradeCidr": {
            "metadata": {
                "description": "kubernetesNonMasqueradeCidr cluster subnet"
            },
            "type": "string",
            "defaultValue": "10.244.0.0/16"
        },
        "kubernetesPodInfraContainerSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/pause-amd64:3.1",
            "metadata": {
                "description": "The container spec for pod infra."
            },
            "type": "string"
        },
        "kubernetesReschedulerCPULimit": {
            "defaultValue": "10m",
            "metadata": {
                "description": "Rescheduler CPU Limit."
            },
            "type": "string"
        },
        "kubernetesReschedulerCPURequests": {
            "defaultValue": "10m",
            "metadata": {
                "description": "Rescheduler CPU Requests."
            },
            "type": "string"
        },
        "kubernetesReschedulerMemoryLimit": {
            "defaultValue": "100Mi",
            "metadata": {
                "description": "Rescheduler Memory Limit."
            },
            "type": "string"
        },
        "kubernetesReschedulerMemoryRequests": {
            "defaultValue": "100Mi",
            "metadata": {
                "description": "Rescheduler Memory Requests."
            },
            "type": "string"
        },
        "kubernetesReschedulerSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/rescheduler:v0.3.1",
            "metadata": {
                "description": "The container spec for rescheduler."
            },
            "type": "string"
        },
        "kubernetesTillerCPULimit": {
            "defaultValue": "50m",
            "metadata": {
                "description": "Helm Tiller CPU Limit."
            },
            "type": "string"
        },
        "kubernetesTillerCPURequests": {
            "defaultValue": "50m",
            "metadata": {
                "description": "Helm Tiller CPU Requests."
            },
            "type": "string"
        },
        "kubernetesTillerMaxHistory": {
            "defaultValue": "0",
            "metadata": {
                "description": "Helm Tiller Max History to Store. '0' for no limit."
            },
            "type": "string"
        },
        "kubernetesTillerMemoryLimit": {
            "defaultValue": "150Mi",
            "metadata": {
                "description": "Helm Tiller Memory Limit."
            },
            "type": "string"
        },
        "kubernetesTillerMemoryRequests": {
            "defaultValue": "150Mi",
            "metadata": {
                "description": "Helm Tiller Memory Requests."
            },
            "type": "string"
        },
        "kubernetesTillerSpec": {
            "defaultValue": "gcrio.azureedge.net/kubernetes-helm/tiller:v2.8.1",
            "metadata": {
                "description": "The container spec for Helm Tiller."
            },
            "type": "string"
        },
        "linuxAdminUsername": {
            "metadata": {
                "description": "User name for the Linux Virtual Machines (SSH or Password)."
            },
            "type": "string",
            "defaultValue": "azureuser"
        },
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Sets the location for all resources in the cluster"
            },
            "type": "string"
        },
        "masterEndpointDNSNamePrefix": {
            "metadata": {
                "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
            },
            "type": "string",
            "defaultValue": "tddevelopment"
        },
        "masterOffset": {
            "allowedValues": [
                0,
                1,
                2,
                3,
                4
            ],
            "defaultValue": 0,
            "metadata": {
                "description": "The offset into the master pool where to start creating master VMs.  This value can be from 0 to 4, but must be less than masterCount."
            },
            "type": "int"
        },
        "masterVMSize": {
            "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A10",
                "Standard_A11",
                "Standard_A1_v2",
                "Standard_A2",
                "Standard_A2_v2",
                "Standard_A2m_v2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A4_v2",
                "Standard_A4m_v2",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A8_v2",
                "Standard_A8m_v2",
                "Standard_A9",
                "Standard_B1ms",
                "Standard_B1s",
                "Standard_B2ms",
                "Standard_B2s",
                "Standard_B4ms",
                "Standard_B8ms",
                "Standard_D1",
                "Standard_D11",
                "Standard_D11_v2",
                "Standard_D11_v2_Promo",
                "Standard_D12",
                "Standard_D12_v2",
                "Standard_D12_v2_Promo",
                "Standard_D13",
                "Standard_D13_v2",
                "Standard_D13_v2_Promo",
                "Standard_D14",
                "Standard_D14_v2",
                "Standard_D14_v2_Promo",
                "Standard_D15_v2",
                "Standard_D16_v3",
                "Standard_D16s_v3",
                "Standard_D1_v2",
                "Standard_D2",
                "Standard_D2_v2",
                "Standard_D2_v2_Promo",
                "Standard_D2_v3",
                "Standard_D2s_v3",
                "Standard_D3",
                "Standard_D32_v3",
                "Standard_D32s_v3",
                "Standard_D3_v2",
                "Standard_D3_v2_Promo",
                "Standard_D4",
                "Standard_D4_v2",
                "Standard_D4_v2_Promo",
                "Standard_D4_v3",
                "Standard_D4s_v3",
                "Standard_D5_v2",
                "Standard_D5_v2_Promo",
                "Standard_D64_v3",
                "Standard_D64s_v3",
                "Standard_D8_v3",
                "Standard_D8s_v3",
                "Standard_DS1",
                "Standard_DS11",
                "Standard_DS11_v2",
                "Standard_DS11_v2_Promo",
                "Standard_DS12",
                "Standard_DS12_v2",
                "Standard_DS12_v2_Promo",
                "Standard_DS13",
                "Standard_DS13-2_v2",
                "Standard_DS13-4_v2",
                "Standard_DS13_v2",
                "Standard_DS13_v2_Promo",
                "Standard_DS14",
                "Standard_DS14-4_v2",
                "Standard_DS14-8_v2",
                "Standard_DS14_v2",
                "Standard_DS14_v2_Promo",
                "Standard_DS15_v2",
                "Standard_DS1_v2",
                "Standard_DS2",
                "Standard_DS2_v2",
                "Standard_DS2_v2_Promo",
                "Standard_DS3",
                "Standard_DS3_v2",
                "Standard_DS3_v2_Promo",
                "Standard_DS4",
                "Standard_DS4_v2",
                "Standard_DS4_v2_Promo",
                "Standard_DS5_v2",
                "Standard_DS5_v2_Promo",
                "Standard_E16_v3",
                "Standard_E16s_v3",
                "Standard_E2_v3",
                "Standard_E2s_v3",
                "Standard_E32-16s_v3",
                "Standard_E32-8s_v3",
                "Standard_E32_v3",
                "Standard_E32s_v3",
                "Standard_E4_v3",
                "Standard_E4s_v3",
                "Standard_E64-16s_v3",
                "Standard_E64-32s_v3",
                "Standard_E64_v3",
                "Standard_E64s_v3",
                "Standard_E8_v3",
                "Standard_E8s_v3",
                "Standard_F1",
                "Standard_F16",
                "Standard_F16s",
                "Standard_F16s_v2",
                "Standard_F1s",
                "Standard_F2",
                "Standard_F2s",
                "Standard_F2s_v2",
                "Standard_F32s_v2",
                "Standard_F4",
                "Standard_F4s",
                "Standard_F4s_v2",
                "Standard_F64s_v2",
                "Standard_F72s_v2",
                "Standard_F8",
                "Standard_F8s",
                "Standard_F8s_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS4-4",
                "Standard_GS4-8",
                "Standard_GS5",
                "Standard_GS5-16",
                "Standard_GS5-8",
                "Standard_H16",
                "Standard_H16m",
                "Standard_H16mr",
                "Standard_H16r",
                "Standard_H8",
                "Standard_H8m",
                "Standard_L16s",
                "Standard_L32s",
                "Standard_L4s",
                "Standard_L8s",
                "Standard_M128-32ms",
                "Standard_M128-64ms",
                "Standard_M128ms",
                "Standard_M128s",
                "Standard_M64-16ms",
                "Standard_M64-32ms",
                "Standard_M64ms",
                "Standard_M64s",
                "Standard_NC12",
                "Standard_NC12s_v2",
                "Standard_NC12s_v3",
                "Standard_NC24",
                "Standard_NC24r",
                "Standard_NC24rs_v2",
                "Standard_NC24rs_v3",
                "Standard_NC24s_v2",
                "Standard_NC24s_v3",
                "Standard_NC6",
                "Standard_NC6s_v2",
                "Standard_NC6s_v3",
                "Standard_ND12s",
                "Standard_ND24rs",
                "Standard_ND24s",
                "Standard_ND6s",
                "Standard_NV12",
                "Standard_NV24",
                "Standard_NV6"
            ],
            "metadata": {
                "description": "The size of the Virtual Machine."
            },
            "type": "string",
            "defaultValue": "Standard_D2_v2"
        },
        "masterVnetSubnetID": {
            "metadata": {
                "description": "Sets the vnet subnet of the master."
            },
            "type": "string",
            "defaultValue": "/subscriptions/e39b9baa-50b5-4665-8297-2fa801ed1fa4/resourceGroups/td-poc-vnet-devlabs-rsg/providers/Microsoft.Network/virtualNetworks/td-poc-vnet-devlabs/subnets/Master"
        },
        "maxPods": {
            "defaultValue": 30,
            "metadata": {
                "description": "This param has been deprecated."
            },
            "type": "int"
        },
        "nameSuffix": {
            "defaultValue": "ffd256a",
            "metadata": {
                "description": "A string hash of the master DNS name to uniquely identify the cluster."
            },
            "type": "string"
        },
        "networkPolicy": {
            "allowedValues": [
                "none",
                "azure",
                "calico",
                "cilium"
            ],
            "defaultValue": "none",
            "metadata": {
                "description": "The network policy enforcement to use (none|azure|calico|cilium)"
            },
            "type": "string"
        },
        "orchestratorName": {
            "defaultValue": "k8s",
            "maxLength": 3,
            "metadata": {
                "description": "The orchestrator name used to identify the orchestrator.  This must be no more than 3 digits in length, otherwise it will exceed Windows Naming"
            },
            "minLength": 3,
            "type": "string"
        },
        "osImageName": {
            "defaultValue": "",
            "metadata": {
                "description": "Name of a Linux OS image. Needs to be used in conjuction with osImageResourceGroup."
            },
            "type": "string"
        },
        "osImageOffer": {
            "defaultValue": "UbuntuServer",
            "metadata": {
                "description": "Linux OS image type."
            },
            "type": "string"
        },
        "osImagePublisher": {
            "defaultValue": "Canonical",
            "metadata": {
                "description": "OS image publisher."
            },
            "type": "string"
        },
        "osImageResourceGroup": {
            "defaultValue": "",
            "metadata": {
                "description": "Resource group of a Linux OS image. Needs to be used in conjuction with osImageName."
            },
            "type": "string"
        },
        "osImageSKU": {
            "defaultValue": "16.04-LTS",
            "metadata": {
                "description": "OS image SKU."
            },
            "type": "string"
        },
        "osImageVersion": {
            "defaultValue": "16.04.201804050",
            "metadata": {
                "description": "OS image version."
            },
            "type": "string"
        },
        "servicePrincipalClientId": {
            "metadata": {
                "description": "Client ID (used by cloudprovider)"
            },
            "type": "securestring",
            "defaultValue": "2ddba07b-95b9-4d45-b224-f03afd5eefbd"
        },
        "servicePrincipalClientSecret": {
            "metadata": {
                "description": "The Service Principal Client Secret."
            },
            "type": "securestring",
            "defaultValue": "tdadmin2018"
        },
        "sshRSAPublicKey": {
            "metadata": {
                "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
            },
            "type": "string",
            "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8ujxcfRR4df4clP8up2LSQIB0w8CaQVLEFsiSnhgfXtLTR+QbrXhVpMvayhXpCCTJfqOSF0pGGEd+aEO1febNhq9eC0U/uL6VcD1h6AFRrnAeVe/T95AuFqbRJ8PVqegzLdan0kY/IbCbSt1tilBFFNKqxSADFufhrOj1Tt5qP/me/X6QFyypQeQXeNPIuDdCiQPppaKC7ZbmBUQDqbCsm2zINt1L1PE0LhoDLJuAE6EDwDLxnhEXBijumQzVSWpXvy2nqGrOjtaPZW6A1WH6dGEBjtj3HgWMQwuihwbq7nBILDAeOlJkUWD6SVyEz314K4KIHLu0otBlM4H1W8vR jvarughese@architech.ca"
        },
        "targetEnvironment": {
            "defaultValue": "AzurePublicCloud",
            "metadata": {
                "description": "The azure deploy environment. Currently support: AzurePublicCloud, AzureChinaCloud"
            },
            "type": "string"
        },
        "vnetCidr": {
            "defaultValue": "",
            "metadata": {
                "description": "Cluster vnet cidr"
            },
            "type": "string"
        },
        "vnetCniLinuxPluginsURL": {
            "defaultValue": "https://acs-mirror.azureedge.net/cni/azure-vnet-cni-linux-amd64-v1.0.2.tgz",
            "type": "string"
        },
        "vnetCniWindowsPluginsURL": {
            "defaultValue": "https://acs-mirror.azureedge.net/cni/azure-vnet-cni-windows-amd64-v1.0.2.zip",
            "type": "string"
        }
    },
    "variables": {
        "agentpri2AccountName": "[concat(variables('storageAccountBaseName'), 'agnt1')]",
        "agentpri2AvailabilitySet": "[concat('agentpri2-availabilitySet-', variables('nameSuffix'))]",
        "agentpri2Count": "[parameters('agentpri2Count')]",
        "agentpri2Index": 1,
        "agentpri2Offset": "[parameters('agentpri2Offset')]",
        "agentpri2StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),variables('agentpri2Index'))]",
        "agentpri2StorageAccountsCount": "[add(div(variables('agentpri2Count'), variables('maxVMsPerStorageAccount')), mod(add(mod(variables('agentpri2Count'), variables('maxVMsPerStorageAccount')),2), add(mod(variables('agentpri2Count'), variables('maxVMsPerStorageAccount')),1)))]",
        "agentpri2SubnetName": "[parameters('agentpri2VnetSubnetID')]",
        "agentpri2VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri2-', variables('nameSuffix'), '-')]",
        "agentpri2VMSize": "[parameters('agentpri2VMSize')]",
        "agentpri2VnetParts": "[split(parameters('agentpri2VnetSubnetID'),'/subnets/')]",
        "agentpri2VnetSubnetID": "[parameters('agentpri2VnetSubnetID')]",
        "agentpri2osImageName": "[parameters('agentpri2osImageName')]",
        "agentpri2osImageOffer": "[parameters('agentpri2osImageOffer')]",
        "agentpri2osImagePublisher": "[parameters('agentpri2osImagePublisher')]",
        "agentpri2osImageResourceGroup": "[parameters('agentpri2osImageResourceGroup')]",
        "agentpri2osImageSKU": "[parameters('agentpri2osImageSKU')]",
        "agentpri2osImageVersion": "[parameters('agentpri2osImageVersion')]",
        "agentpriAccountName": "[concat(variables('storageAccountBaseName'), 'agnt0')]",
        "agentpriAvailabilitySet": "[concat('agentpri-availabilitySet-', variables('nameSuffix'))]",
        "agentpriCount": "[parameters('agentpriCount')]",
        "agentpriIndex": 0,
        "agentpriOffset": "[parameters('agentpriOffset')]",
        "agentpriStorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),variables('agentpriIndex'))]",
        "agentpriStorageAccountsCount": "[add(div(variables('agentpriCount'), variables('maxVMsPerStorageAccount')), mod(add(mod(variables('agentpriCount'), variables('maxVMsPerStorageAccount')),2), add(mod(variables('agentpriCount'), variables('maxVMsPerStorageAccount')),1)))]",
        "agentpriSubnetName": "[parameters('agentpriVnetSubnetID')]",
        "agentpriVMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri-', variables('nameSuffix'), '-')]",
        "agentpriVMSize": "[parameters('agentpriVMSize')]",
        "agentpriVnetParts": "[split(parameters('agentpriVnetSubnetID'),'/subnets/')]",
        "agentpriVnetSubnetID": "[parameters('agentpriVnetSubnetID')]",
        "agentpriosImageName": "[parameters('agentpriosImageName')]",
        "agentpriosImageOffer": "[parameters('agentpriosImageOffer')]",
        "agentpriosImagePublisher": "[parameters('agentpriosImagePublisher')]",
        "agentpriosImageResourceGroup": "[parameters('agentpriosImageResourceGroup')]",
        "agentpriosImageSKU": "[parameters('agentpriosImageSKU')]",
        "agentpriosImageVersion": "[parameters('agentpriosImageVersion')]",
        "allocateNodeCidrs": true,
        "apiServerCertificate": "[parameters('apiServerCertificate')]",
        "apiServerPrivateKey": "[parameters('apiServerPrivateKey')]",
        "apiVersionDefault": "2016-03-30",
        "apiVersionLinkDefault": "2015-01-01",
        "apiVersionStorage": "2015-06-15",
        "apiVersionStorageManagedDisks": "2016-04-30-preview",
        "caCertificate": "[parameters('caCertificate')]",
        "caPrivateKey": "[parameters('caPrivateKey')]",
        "clientCertificate": "[parameters('clientCertificate')]",
        "clientPrivateKey": "[parameters('clientPrivateKey')]",
        "cloudProviderBackoff": "[parameters('cloudProviderBackoff')]",
        "cloudProviderBackoffDuration": "[parameters('cloudProviderBackoffDuration')]",
        "cloudProviderBackoffExponent": "[parameters('cloudProviderBackoffExponent')]",
        "cloudProviderBackoffJitter": "[parameters('cloudProviderBackoffJitter')]",
        "cloudProviderBackoffRetries": "[parameters('cloudProviderBackoffRetries')]",
        "cloudProviderRatelimit": "[parameters('cloudProviderRatelimit')]",
        "cloudProviderRatelimitBucket": "[parameters('cloudProviderRatelimitBucket')]",
        "cloudProviderRatelimitQPS": "[parameters('cloudProviderRatelimitQPS')]",
        "cniPluginsURL": "[parameters('cniPluginsURL')]",
        "containerRuntime": "[parameters('containerRuntime')]",
        "contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "dataStorageAccountPrefixSeed": 97,
        "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]",
        "dockerEngineDownloadRepo": "[parameters('dockerEngineDownloadRepo')]",
        "dockerEngineVersion": "[parameters('dockerEngineVersion')]",
        "etcdCaFilepath": "/etc/kubernetes/certs/ca.crt",
        "etcdClientCertFilepath": "/etc/kubernetes/certs/etcdclient.crt",
        "etcdClientCertificate": "[parameters('etcdClientCertificate')]",
        "etcdClientKeyFilepath": "/etc/kubernetes/certs/etcdclient.key",
        "etcdClientPrivateKey": "[parameters('etcdClientPrivateKey')]",
        "etcdDiskSizeGB": "[parameters('etcdDiskSizeGB')]",
        "etcdDownloadURLBase": "[parameters('etcdDownloadURLBase')]",
        "etcdPeerCertFilepath": [
            "/etc/kubernetes/certs/etcdpeer0.crt",
            "/etc/kubernetes/certs/etcdpeer1.crt",
            "/etc/kubernetes/certs/etcdpeer2.crt",
            "/etc/kubernetes/certs/etcdpeer3.crt",
            "/etc/kubernetes/certs/etcdpeer4.crt"
        ],
        "etcdPeerCertificates": [
            "[parameters('etcdPeerCertificate0')]"
        ],
        "etcdPeerKeyFilepath": [
            "/etc/kubernetes/certs/etcdpeer0.key",
            "/etc/kubernetes/certs/etcdpeer1.key",
            "/etc/kubernetes/certs/etcdpeer2.key",
            "/etc/kubernetes/certs/etcdpeer3.key",
            "/etc/kubernetes/certs/etcdpeer4.key"
        ],
        "etcdPeerPrivateKeys": [
            "[parameters('etcdPeerPrivateKey0')]"
        ],
        "etcdServerCertFilepath": "/etc/kubernetes/certs/etcdserver.crt",
        "etcdServerCertificate": "[parameters('etcdServerCertificate')]",
        "etcdServerKeyFilepath": "/etc/kubernetes/certs/etcdserver.key",
        "etcdServerPrivateKey": "[parameters('etcdServerPrivateKey')]",
        "etcdVersion": "[parameters('etcdVersion')]",
        "fqdnEndpointSuffix": "[parameters('fqdnEndpointSuffix')]",
        "gcHighThreshold": "[parameters('gcHighThreshold')]",
        "gcLowThreshold": "[parameters('gcLowThreshold')]",
        "generateProxyCertsScript": "H4sIAAAAAAAA/5RW/2+jxhP9nb9izrbOiXQEcC7ffPLnI4tQXZQ0STGVGrUVWsPYbA27ZHedxL3L/14tNgQc4179k5md9+btm2FE94M1pcyaEpkYhuRLESFYPFcW+Xsp0Io4U4QyFNLKBX+iknIWrtOONOLev/vtIXTH4bX3MOr0vtWfhyNLZbnGvazMKKXIlBmRowWuXjsl0A9qKD9ogURCvUFurrzbYKteFdtB0Cy4znQn/ju0O/F3oSMp3qEbqqvYTnSh3Avcy9D3fvnVmwRfvfGl51ewsWbadz4crRkjFEpaAh+XKFWCJEbx5pA5oymWhTa6vLXKrVCTrmk0CrWDaON0M7KHZoGrkuX6fBJWE+H6QfjT1Y13Pw6+asLWw+HIQhVZi+UUBUOF0mpUKcfhDX/tPbQw10/20m6GpKapXe2PSt3oNPAl50KBNtANbkLv9vL+7uo2mJSuNoLDUaJULoeW5QzOjuwj+8gZDo7PLl472zzuuJBRZ9mE2lRV1m0xlS7VqcpYGxeqKG68X9vqvI1NDX1l8AdYG0r98e1lQdY7yBYKs/zQMLowR4aCKATBuQJ3bPAcmZSpPhCSgMmXCnr1lQQD+/N5lSbwEUyGz2C+nNgXYMZkJcE5H5yCHuItZIPMD8CUy+lf0Lfc21HRbbeQ7Y77dWGaXN9sr7JqebWpq4t5S97B4U78ui4ynwucE8WFdTeSK6kwG2ZEKhSyX5VZX70oVtz/7NgGk7JdzO64YYA73uGSRBVKFJSkYA92avQDw3gWVGFY9DxUPIypXBwcwjcDAKCYAaWtUtDbtxnhf9BrXSItVNVaaILre2IvUk/wVt3tol3wMeNPCM8JVShzEiHkJI4pmwNRMMU5ZUw/8Bk4UkFKGRZAiTGYFPqOtP6QltXfc7s2AXvvFCUZj+HUtluzXnd2JnymKgkFKrGqmjTjAihQBg4M4Bg+wwmcwhmcwwU4NjgOOIMvEPMiV/920FZnv0Pv/2DiI9gAf8LHjzAVSBbw/TvIFDGHkyIz5gy1wC5MUx4tYMkUTYGkadEroBIEknhlFDqjLA7pLJwRmi4FgmPbcKKFlW2N0qV+DcwESaoSows/kwWuiRa4kp+g7BekSIp/tWZOMSJLuUl/5qyvgEQR5goIPJEUVFK2WYK2Dgj0zT4cJKs8QXb4waCzSki2+JcZ70DvICIKah9Jr4edL6ASZI1JrZjeRvwdtloer4edfeBiylvQawHrga21Z//cGF24mmnNRcV1wYhnGWEx6CZh/GltW4aEySJR7xaSFj0FfKFSSQNTif+18Iwa/wQAAP//gHPm/+MKAAA=",
        "generatorCode": "[parameters('generatorCode')]",
        "kubeClusterCidr": "[parameters('kubeClusterCidr')]",
        "kubeConfigCertificate": "[parameters('kubeConfigCertificate')]",
        "kubeConfigPrivateKey": "[parameters('kubeConfigPrivateKey')]",
        "kubeDNSServiceIP": "[parameters('kubeDNSServiceIP')]",
        "kubeServiceCidr": "[parameters('kubeServiceCidr')]",
        "kubeconfigServer": "[concat('https://', variables('masterFqdnPrefix'), '.', variables('location'), '.', variables('fqdnEndpointSuffix'))]",
        "kubernetesACIConnectorCPULimit": "[parameters('kubernetesACIConnectorCPULimit')]",
        "kubernetesACIConnectorCPURequests": "[parameters('kubernetesACIConnectorCPURequests')]",
        "kubernetesACIConnectorClientId": "[parameters('kubernetesACIConnectorClientId')]",
        "kubernetesACIConnectorClientKey": "[parameters('kubernetesACIConnectorClientKey')]",
        "kubernetesACIConnectorMemoryLimit": "[parameters('kubernetesACIConnectorMemoryLimit')]",
        "kubernetesACIConnectorMemoryRequests": "[parameters('kubernetesACIConnectorMemoryRequests')]",
        "kubernetesACIConnectorNodeName": "[parameters('kubernetesACIConnectorNodeName')]",
        "kubernetesACIConnectorOS": "[parameters('kubernetesACIConnectorOS')]",
        "kubernetesACIConnectorRegion": "[parameters('kubernetesACIConnectorRegion')]",
        "kubernetesACIConnectorResourceGroup": "[parameters('kubernetesACIConnectorResourceGroup')]",
        "kubernetesACIConnectorSpec": "[parameters('kubernetesACIConnectorSpec')]",
        "kubernetesACIConnectorSubscriptionId": "[parameters('kubernetesACIConnectorSubscriptionId')]",
        "kubernetesACIConnectorTaint": "[parameters('kubernetesACIConnectorTaint')]",
        "kubernetesACIConnectorTenantId": "[parameters('kubernetesACIConnectorTenantId')]",
        "kubernetesAPIServerIP": "[parameters('firstConsecutiveStaticIP')]",
        "kubernetesAddonManagerSpec": "[parameters('kubernetesAddonManagerSpec')]",
        "kubernetesAddonResizerSpec": "[parameters('kubernetesAddonResizerSpec')]",
        "kubernetesCcmImageSpec": "[parameters('kubernetesCcmImageSpec')]",
        "kubernetesDNSMasqSpec": "[parameters('kubernetesDNSMasqSpec')]",
        "kubernetesDashboardCPULimit": "[parameters('kubernetesDashboardCPULimit')]",
        "kubernetesDashboardCPURequests": "[parameters('kubernetesDashboardCPURequests')]",
        "kubernetesDashboardMemoryLimit": "[parameters('kubernetesDashboardMemoryLimit')]",
        "kubernetesDashboardMemoryRequests": "[parameters('kubernetesDashboardMemoryRequests')]",
        "kubernetesDashboardSpec": "[parameters('kubernetesDashboardSpec')]",
        "kubernetesExecHealthzSpec": "[parameters('kubernetesExecHealthzSpec')]",
        "kubernetesHeapsterSpec": "[parameters('kubernetesHeapsterSpec')]",
        "kubernetesHyperkubeSpec": "[parameters('kubernetesHyperkubeSpec')]",
        "kubernetesKubeDNSSpec": "[parameters('kubernetesKubeDNSSpec')]",
        "kubernetesKubeletClusterDomain": "[parameters('kubernetesKubeletClusterDomain')]",
        "kubernetesMetricsServerSpec": "[parameters('kubernetesMetricsServerSpec')]",
        "kubernetesNonMasqueradeCidr": "[parameters('kubernetesNonMasqueradeCidr')]",
        "kubernetesPodInfraContainerSpec": "[parameters('kubernetesPodInfraContainerSpec')]",
        "kubernetesReschedulerCPULimit": "[parameters('kubernetesReschedulerCPULimit')]",
        "kubernetesReschedulerCPURequests": "[parameters('kubernetesReschedulerCPURequests')]",
        "kubernetesReschedulerMemoryLimit": "[parameters('kubernetesReschedulerMemoryLimit')]",
        "kubernetesReschedulerMemoryRequests": "[parameters('kubernetesReschedulerMemoryRequests')]",
        "kubernetesReschedulerSpec": "[parameters('kubernetesReschedulerSpec')]",
        "kubernetesTillerCPULimit": "[parameters('kubernetesTillerCPULimit')]",
        "kubernetesTillerCPURequests": "[parameters('kubernetesTillerCPURequests')]",
        "kubernetesTillerMaxHistory": "[parameters('kubernetesTillerMaxHistory')]",
        "kubernetesTillerMemoryLimit": "[parameters('kubernetesTillerMemoryLimit')]",
        "kubernetesTillerMemoryRequests": "[parameters('kubernetesTillerMemoryRequests')]",
        "kubernetesTillerSpec": "[parameters('kubernetesTillerSpec')]",
        "labelResourceGroup": "[if(or(or(endsWith(variables('truncatedResourceGroup'), '-'), endsWith(variables('truncatedResourceGroup'), '_')), endsWith(variables('truncatedResourceGroup'), '.')), concat(take(variables('truncatedResourceGroup'), 62), 'z'), variables('truncatedResourceGroup'))]",
        "location": "[variables('locations')[mod(add(2,length(parameters('location'))),add(1,length(parameters('location'))))]]",
        "locations": [
            "[resourceGroup().location]",
            "[parameters('location')]"
        ],
        "masterAvailabilitySet": "[concat('master-availabilityset-', variables('nameSuffix'))]",
        "masterCount": 1,
        "masterEtcdClientPort": 2379,
        "masterEtcdClientURLs": [
            "[concat('https://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdClientPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdClientPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdClientPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdClientPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdClientPort'))]"
        ],
        "masterEtcdClusterStates": [
            "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0])]",
            "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2])]",
            "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2], ',', variables('masterVMNames')[3], '=', variables('masterEtcdPeerURLs')[3], ',', variables('masterVMNames')[4], '=', variables('masterEtcdPeerURLs')[4])]"
        ],
        "masterEtcdPeerURLs": [
            "[concat('https://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdServerPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdServerPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdServerPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdServerPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdServerPort'))]"
        ],
        "masterEtcdServerPort": 2380,
        "masterFirstAddrComment": "these MasterFirstAddrComment are used to place multiple masters consecutively in the address space",
        "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
        "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
        "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
        "masterFqdnPrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
        "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
        "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
        "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
        "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
        "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
        "masterOffset": "[parameters('masterOffset')]",
        "masterPrivateIp": "[parameters('firstConsecutiveStaticIP')]",
        "masterPrivateIpAddrs": [
            "[concat(variables('masterFirstAddrPrefix'), add(0, int(variables('masterFirstAddrOctet4'))))]",
            "[concat(variables('masterFirstAddrPrefix'), add(1, int(variables('masterFirstAddrOctet4'))))]",
            "[concat(variables('masterFirstAddrPrefix'), add(2, int(variables('masterFirstAddrOctet4'))))]",
            "[concat(variables('masterFirstAddrPrefix'), add(3, int(variables('masterFirstAddrOctet4'))))]",
            "[concat(variables('masterFirstAddrPrefix'), add(4, int(variables('masterFirstAddrOctet4'))))]"
        ],
        "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterFqdnPrefix'), '-', variables('nameSuffix'))]",
        "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
        "masterVMNames": [
            "[concat(variables('masterVMNamePrefix'), '0')]",
            "[concat(variables('masterVMNamePrefix'), '1')]",
            "[concat(variables('masterVMNamePrefix'), '2')]",
            "[concat(variables('masterVMNamePrefix'), '3')]",
            "[concat(variables('masterVMNamePrefix'), '4')]"
        ],
        "masterVMSize": "[parameters('masterVMSize')]",
        "maxPods": "[parameters('maxPods')]",
        "maxStorageAccountsPerAgent": "[div(variables('maxVMsPerPool'),variables('maxVMsPerStorageAccount'))]",
        "maxVMsPerPool": 100,
        "maxVMsPerStorageAccount": 20,
        "mountetcdScript": "H4sIAAAAAAAA/3RSUW8TPRB896+YL8nb14uTgioVKUWVACmCNhWEJ4Qqn713Z+LYx3ndpgX+O/IlTQ8J7uXkHe/M7HjH/8nSelmq2IgxrkLybH0NG2GCJzTUEayPTMogVCDWBiVplSLlc5lqNMxtfCVlmeo4dSp53bTKTD2x1C4kU1hvWf5fplrOz85PZ+cvxBgrrwncUM9gIyq7I3OCjlqnnhBy4R73lpv+2HMhc0E3ytcUn27n6tFFbblJ5VSHrbx8TB1JpWNBvraeZJuck2dn86mIxCh24s3y0/uFNHQno9Hi5vLjerlerq4Xkx8Z+TUXV6vP1+ub1fJ6vZB3qpPOljJnYGzciGToTpktIjE7EtuNsR2KFpPnLrHNieIn6o7+BGyFL5i8RkHfMcNXwQ15AQCkm4BRFsi5KNeRMg/oeciM9ld2ljETlRVjVNY5ZE+yiqxK0QuNnmaaj4bYUdPT3zQnxwCw/wZ+DxWVOOS/oUolx/HEh0pZd0Bnh//pCBcXQ+HeqW5Ib2ArtKpjyzb4PEjkKFzEs/a/XY4HnSZQhA+8p+hhGfMmx7qPrig83WOOSX7IAbzdVHFKO345UETxoV/s233nOxRv4dTjw61lVTq6zTu3mJ/0pW8hdV65Qy0Ptn/hQVS/AwAA//8o5bmvUwMAAA==",
        "nameSuffix": "[parameters('nameSuffix')]",
        "networkPolicy": "[parameters('networkPolicy')]",
        "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
        "nsgName": "[concat(variables('masterVMNamePrefix'), 'nsg')]",
        "orchestratorName": "[parameters('orchestratorName')]",
        "orchestratorNameVersionTag": "Kubernetes:1.10.1",
        "osImageName": "[parameters('osImageName')]",
        "osImageOffer": "[parameters('osImageOffer')]",
        "osImagePublisher": "[parameters('osImagePublisher')]",
        "osImageResourceGroup": "[parameters('osImageResourceGroup')]",
        "osImageSKU": "[parameters('osImageSKU')]",
        "osImageVersion": "[parameters('osImageVersion')]",
        "primaryAvailabilitySetName": "[concat('agentpri-availabilitySet-',variables('nameSuffix'))]",
        "provisionScript": "H4sIAAAAAAAA/9x87X/iNvL46/ivmDp89uG6xpDsQ5see8cS75YmgRRI7nrdHhW2AB1GciU5Cc3mf/99JPkJsAlp++L3+d6L3saaGc2MRjOj0YjDr9wJoe4EibllHcJoTgQIn5NIAo+pAEYB32C+grN4gjnFEgu4vrAOwbsjEnwWYAEcRxwLTCXIOYYpC0N2S+jsxDqEL4BTOKDxcoI5fIElRpTQGXzRAEcN+AIjssQslnCLiFRDU8YhYP4CcyBUSBSGIBlMCSVinuAdwxcYYn5DfAw+i8MAKJMwwYApmoQ4gMkKxEpIvPRlmOC8rsIREnFZjvOmgj0/ZHHgEEq0pvxloDj02TIKscQJ7tsKXARTEqZATaUAT/oBBEgiCAjXXE1ZTIMUpFlBCCs0yZQIyPexEGSS0T2uUuziGwF+GAuJeYI7xyiU89UXyxJYgnNnCRZzH4PLIumi32OOXZ9RiQjFXLgRZzdEEEbHBqyubKc/bNVe+EiCi6Xv/s3hOMRIYPgCM44j+G/3tAVfQHJwAnjePW3Zz+ELoNsFPL+POFG2w+IowvxFrfHy4flL6+rDVW90Ne4Px732hdeyzd+2NfjeO8+/qr9sq9MfeP1h/tX8bVtnVx+8zui85caCuyHzUaiNfRFPsC9D67TfOfMGZlR9NwZndPD1neWNOqfjS88bjDveYNSqvcD+nEHtfv1792O30x55wwf4An4swQme//wcnCkc5R9+0R+a+YdX+kPtxYva/UV7OPIG427v1Pv3w9fNly9fFiY+834qm/dy0L1ujzw1/FfOm6y9Rabw889Q6w+h1YLaunLhl1++U9ucWgAAmjO7M0d0powrwFMUhxISBcOEUFBql4RRWyNkK6IMK12HKbEsTEXM8SCmHbZcIhp0ko0UvHhp3RfmKtpxvu2MYzBTKIjxlPGx3mLfNhrQrLBjg19P96zGVrLDV0pLe+FAURs5l0/2F3ZOQPnLN/rPKbEeUs2catvsGl+4j3KqvGeZko7f7tCSIZTQeZqyylGfoLPdQmTqOmoU9aWo/RogiX999eucCUnREv/6yrh4E9rev9f8Lo2pa/5vEFdr63I8YUw6HP8WE46DNV4H3od+fzTwfrzqDrzTluQxtnAocNngFKkBZdlmN30Fzu9gZ9uu1z/1HuyyzYTvsB9rBSyR9tBUxc7M5QKLMNcbStiWRosF5igIwLkCW4UDO/u6ZAE4Edi1F3OMAnB8OD4CN8A3bswRDdgSvsAECfz29Uu7iBshIW4DcOLiRxKkf+XMlmh5gmeEfsJSSaBiWgdzKTJ9K8z2ZXfoDa7X3dj4sj36vmXr2LHIMg3XV9guiojA/Abz+gKvDDeSxf5c6bOa2oOB9OdKDQ1l4fuBs1sKnDF5ov7zKI5G6rT3lsVHJUKU4Jdyvwtui+1yYA2tI8kTF0GtfeUq7CJYKsleCEokNe2JznIex8pl65x3vd7oSbL5IcFUVslWQbBatscQtpbrEaxcts0M4FHJIoz5RryvErOUdrWQu8HLl68KZ8swC8nVvobpc7nDMDcJbsj1+vXeCOWLV421ZZhPkS0xzArZKghWy/YYwk7D3CnbZkr8hwyzQsxS2tVC7gYvF7EKRyMlR4I8TFeEhQc7i6ngOAHWB9/3e0WelO66364mWB0MUkoV7rKa5B5eeY32trt6hPZur7hGOz3/PEJxlwsq00NhgffTQ4UVlelhf9q7N+G2HhTgPoqoIJge7HYlbpgGO9O25SIgXKWTpak+PHuW7Njyk4De9HWOUbDKU2Yjp1iQKNon330Fck4EEAGIApphKjWsrbNsdbA89/YP+cVwn7maKiIPtrUe/XYCbrmXHdBWwS1cfTjvdp6QDGtXWZYIrxMqMG885G7IXenvFrjV/s/VwBv/MOz3KpjWllD/n2C0yOs61pZ6y8a3+doCSgs36f4p0Xv1JtqxSCUeP9PEXg5/W81Iwt//Dl7/YwK7JYs51tu6aGCf2LX7UXvwyRuNvd51d9DvXXi90YP9ygBJTBGV3cA+UbRGXq/dG427p9m4iCfm3EsYTaGGVx+GnUH3ctTt94qwCAUdvTUyQG9w3e14Si+9TveyfZ46rzKkIfY5lo8gDr3OwMu559hUET9xFkcGdeAN+1eDjjf+NOhfXWaQWSlJA533O23FfVFMimUPLXEmYq8wj8B+zIlc6XlyqJ43+ld/cKa4uhp0Rz9tzHmzRvK6Oxhdtc/HCdIa1GBbjg3wcYVcnMUSj9AkxPlMg/7VyBuP2h/OvQwu4mSJ+Kp9g0iIJiQkcjUscnc56F60Bz+N29ft7nn7Q/dciTMsqEBb06VyrQHmH5C/YNOpfQK1+855/+r0ctC/7p56g/GHdues//Hjww6sAZacYFGNPB54o0HXG+4i4t1FjGIqd1Dx/n3Z7ylb30HmNOapWVSROb0aGFvZQeYHIiXmO4j80B2NvEEpiQGSOCRLUibKoD3yzrsX3XIZFOa5wvzxcrgLefzjZbkuMwIfYn+BdzIw/nDVOfMyPmKBLxBFMxx0A0wlkSvvTmIqUlVeDb3xRbvX/uSdjrunXm+kzMn798jrDQuqjAXWVUnq4wssUYAkyrC7veGo3et44wtv1D5tj9oPmSUb5q9RHBYM+OxiOM7Yvm5fnY90zbmwAQzaGV6lSItvRMnoNeaJGLZtPVhe/2N2s2FNY+orcwFTWP1IQhwhOX/xEu7TomZtvZi3Ua7kWMacphXH7WqqKabWmhsl0lrzCYXPWnOjxPm2OJ/1UBBDYHkWT3CIZT+SArQcBwIH4BCwxeF/08DWvxwNW/W/Ha79XbtvPhza5s4mqd7r6B1iuTaJz+iUzNoqmHd63UxXnV533On3PnY/jU+7g5Ym41PiUizrwXraWFuHLRzFnEEhsJeDqeTg3Zs3paPq04duzzCgkk/FwITQkukTMFOG1CFXfR19+s94dHHZcuUyMvnK2KekLme/W8ly85W/DMYzLMcS8QkKQ3irl3iLBtTur3veSH+6PL/61O0Nx1eD8wdzokUcnLvfp2V4Tmebw06/N2p3e94gCR/d3qdtfrMcm2J5y/iC0Nm+3D9CX/mR3WI8RmBDKKi7IWPRBPkLqLsR43KJop12UNSGMQJnkNtBcXR5s/bNbTYck3kqww2J2DIst0BUbdjN4S0CGt4VE0JdPJEqWAtwJFAkwXE0wPZ+UfuSYrm2Xf6Aqf7fNoQJJ8EMQ91Vh1FH39L+BUaxvRg9o5dLFhJ/VfT2P/9czAMv++fdjkrrW2BrC9i4pdHTrnlDc5YNd1KijGpCUEopsZPCJVbGe3L11Qkx4p3sPD2IqSRLbHz9IbSDADQE5CDAccQEkYyvYIFX1oEJNu0gUDHmEeh6vW5bB37MQ3DE8BwcR5sPvEn/5QQ4RCtoNrIPS3TnKJ7guAH2XMpInLhuwG5pyFBQZ5GKtgLXGZ+52VwEC3fOlvjEV+zk5QLzt5N/cI7du6tJTGU8br6tN167A9NdoM/v8AVQJJ0FXoG+B7MqVFKQcX9tGE1o6OcBnoCS7AmCuZuSuY+KBu5zeG8iMoqkaw4Voq5cTD1wfd/hZvH1Fy1rcitcIoaBTKVN4MolTohqcZU6Z1hCHAVIYnj2DNIv6U2s41DmJH84HPtsucQ0EOCs4LN1cJBzucagnOOkvSYAkbThIBqAYCp11T0xom4daB+g12Acc9LKrImj2/qMyHk8iQXWStWFcbbc1LIbcXa3co/rjfrR8Z8y5Np9ysaDUr2mW09YrxOqbE+lWs/F4T9DMsF32A8I/+ehaTgxHw6z5UxET/5/i95fz6dW6yabSrlCIokNpzeI78GhpqTX0tPdVWbZJOJy25Q0CmRCGdvTaMryMsRSM1zDNcaY9WOZmds0GOp5U+Ysle2upcA2OPkGSw2xxfGSSazUZz7oO34spFYii2Wr+WZZhuhgGkSMUNmKKbk7cV3dJ5CBBYV/aj3Zpf47gzE+uzPQ2YaJmqfja2+gzlQtu1lv1hsO9+sNO90HBbDT/r965/32qYrB+bYQknE0w/UZY7MQo4gIsyc4yYUJ0n6szc+1+3JWHuohofGdg5bB29d1iXh99nt6250Dl2cgQQL/SN5h17Yp2etfiwLb1kGWcZSjOh1wrQO+VKetUggrtcZhrJvlpnEYrtIlwgGs6yYxPyzjKF++7zbPXsVBs7ZJU5SO7DFXZl5C1zrI8j1TM83H7S3zMHlpaxPQNdlDXbJlmAYpW8QTjlGEObRAN6HYusRYSjFDYmw5Fj7jGFrQsOH94xg/R2E8I1TUfU7qBdliKnksJA7GKtlSIXKc7KNf9qKbAI/lKlLMPCesSD2NUjdNY57Pn0QT0xmhmmrW8pcHqv1IVYmdnJ3/v5XVND/q0wuPqf8IrYetKsmmjafJboY8Hlz1Rt0Lz4ZWC+zNJKeQQx8cHMIFWmBQZOEWg48oUCwk3BAuYxSS33U1zzpQk+jeUec3uFnegYrqvutHMaFTllErC0nr+y0PRetzp7dJAaMY0FTfPWVnJ0gWGhDHuYdQJHbFs/KJjSM5qI5kGYZ1cDAl1sHGGaACLzvDZC6WTMdTREIlXFN52ONCM3OA8JJRFQYYMqWZfMx0TKclq/w7EU7aTJ2MJX+2av8whxXGgQChcN+s179tNB6+g4Blhxtd+6qlFByKobFVAtvFyPb4NkNZkWydMXMkS+4Z18tttSZIxhZQIyCwz1TWapqgy/rG7TUCyrMusi9JMU5zGGIcgeFImZNVKb45OW8XAWvNx5vYN0qCx8WSYAY05thsgqYuQzYbqab2shKVGMYCak2T4Udohjk4ocoPb5ByI7PkbrfWdAxsPWSzbbNRE+SLZDTxD3Dwb0/RQdKUvyH267JjcrFJNtsXVfst6fN+2EQ/uxjuwO3Msb+AxVLo8UNgNFwl/oZMAYHpHFUORbGfNpCm8n/1SFE51166fulMpZIm6e6jopbVcvGd5MiX368izNX4i5e73IiykLeNtBM3isMQat//dOkNzq4+eCov2zn/PJ3ESWYtkeUHFnOKwpSNKlLJ2cT5nwEPCi0EQ5MBtyLMBRHqVKjj29qRJkXTBb0irh6/QHdXArean/ZHTGowfwDzI+O3iAcjNlyJkM1alD2GW2IA34g/c2Ox+EZ8b958tMwWpSzAou1LcoOLXwYYBSlI6S1H0tC/HQ3ebkaDFBSO3useZKpMKXmG4qiQvuZqtcuwa//Q1bOGnTiN9H9bISRXbvFxCxHpy5ZXmz7f3kIvqKSxNbju+WFv758TfSwAbPCtfEjCe5KblPFu4kCjuLLGPC5ZMEzuu03Bs8SEPOkHmQ1h6QddMYgpJXSWLPju9TTFCsdHPubJq5+ybmefSwVVDbPe4wiOLuTt06cLTl4DeduA9DjcPHpXb9Qb9ebJ0fG7b92bI3eJ/DmhWHy3kZmsB6RSu1pXS6MkndAPt/Q5EEThVPmIwf2hTKLIy2PmpNlSRlR4FvaIHTWb1fFGkTtFEp2SPLwuWUxl+r5Lb2kR+M3sg84XyEQvWkDEIpdka1tX8U90XVKLe0vkPH8fh+TJ9gR2mb9bSwIN6S1EuEWi8OQOyVyaOoz4Ss0vWSIvCkMIsErrRT2fUUArebRTsnHW940Gj4OUnoPg2bOn6vK7P+srX7wACS2o3ZMH+BvU7sUDvHxZ4VG39aW5xYFZhpTZ1OJltYstrEuJ6efmXxPZx2wPTImuPhWsI7OGzeWrsg1j5Y0S895yl2ky8gdC62X/NG8mMndA44/dc2+7N26JKJliIYUbscBJ+5OcSHNQX6FlkvGnj5RqVaS3TlVZrPU5RhLvRC7b9LecSJ1jmipWtuU1WV0k0FeYc7bEbq19etHtXQ29gVtXwm0AatFra4hJ3Wrj1nMNxLgF3S9YW6dVuBvMZz7J/1lGaE/wAnndcNBolBPL7ow3UJODQUCEPsWGbKZfRRq3K3RrHLBYRrG56dvqKbccx7FQRJLulRO4aVpJSiBOLCdND04MG5hLMiU+kthBsZwzbTtqT5zAZ7vWaRebgT+nfcD8BvOTIuNJm7MFQNESa9SkIf/jj6e9z7alr1nupGHA/DthIOFmGwWS92ebQw4KloRqgKrJYs4xlU460TbEgtDgBIxZWmoSzVgZucJsmpmEaaLpF5SXqayglG3VJYgLvCpFOPN++mxbNrwvtadD4Ello8wmRGYNzp3ahX+itnYI3am+ZfPzS09zTFGxtAT1FgPFWD9FNZ5QYSs6PKbgm6e4CjV9uxnAeIKnjOOxQk1Ov/m1YnrJF+AI0wBTn2ChqJn3r+uT65BaKMZhjtPEF0EQLWYQMn9Rtw4qnwYnNc+SZnYFvMwBs0b2/D1m+rp5/Zn5mipz5m6RrsCanvOAYUGfS8gvSAMV6pXYSxIEIQY2zdIWmf+egnVQdsA+asAbeKPvV5eIL2DOwmBtPvM6ukJOr1D20KfkTNJdr4bXBitpl3RNrE9RAvDnbNdIs7MmvFdJuEqinb0U67IdHOwE3mOSrKZbRbhQ9J0StcrVLzPWK/BlC12gVklmo+yzQWZjdOez5WfPsgFTpPGoz1e6v/xfRM69O4k5ReHZUpS+ca6U8exiuM4VZAfas4vh4zpKqmJlCkqGHiGQlKLKCCRD+xE4ZRRv4Jf5r6e6r/3fkm8kcAVFpv2u66WbzTHz0xiFocIBcONrcZG+EU9wsSYyLokkM727dZSYxLPsJD+JZ6Ieopj68wgFdYqlG+tOGfdr0xXjajfpfj2JZ27z7bu3b4/f5FZ2FARNHzffOY1332LndePYdybHb44c1Pz2qInxUeMdxvAeXLES7iQW7s1S/Tfg5AZz4c5vxrEkoRvTCaHJfUnSU9s8Jp//8hk+06QLl/t10wNXWZPdDBkx3RE00qaf/JdpilUKW69V1QnnUJf8oAlLQmOJVcBOi9OUBfgVCAZyjszP/vixkGyZ/nYQTjvJtSsv/GiE6aRKauVpkfxVUjxXEVM//yI0m/W5BZD9RBE4PthiHstA9wZyaMIze2eExDTY/M2HP/eSLXuZlv8URiQAxXfT21u12DlSBulE+pYEnln/LwAA///VJYvXbkkAAA==",
        "provisionScriptParametersCommon": "[concat('TENANT_ID=',variables('tenantID'),' HYPERKUBE_URL=',variables('kubernetesHyperkubeSpec'),' APISERVER_PUBLIC_KEY=',variables('apiserverCertificate'),' SUBSCRIPTION_ID=',variables('subscriptionId'),' RESOURCE_GROUP=',variables('resourceGroup'),' LOCATION=',variables('location'),' SUBNET=',variables('subnetName'),' NETWORK_SECURITY_GROUP=',variables('nsgName'),' VIRTUAL_NETWORK=',variables('virtualNetworkName'),' VIRTUAL_NETWORK_RESOURCE_GROUP=',variables('virtualNetworkResourceGroupName'),' ROUTE_TABLE=',variables('routeTableName'),' PRIMARY_AVAILABILITY_SET=',variables('primaryAvailabilitySetName'),' SERVICE_PRINCIPAL_CLIENT_ID=',variables('servicePrincipalClientId'),' SERVICE_PRINCIPAL_CLIENT_SECRET=',variables('singleQuote'),variables('servicePrincipalClientSecret'),variables('singleQuote'),' KUBELET_PRIVATE_KEY=',variables('clientPrivateKey'),' TARGET_ENVIRONMENT=',variables('targetEnvironment'),' NETWORK_POLICY=',variables('networkPolicy'),' FQDNSuffix=',variables('fqdnEndpointSuffix'),' VNET_CNI_PLUGINS_URL=',variables('vnetCniLinuxPluginsURL'),' CNI_PLUGINS_URL=',variables('cniPluginsURL'),' CLOUDPROVIDER_BACKOFF=',variables('cloudProviderBackoff'),' CLOUDPROVIDER_BACKOFF_RETRIES=',variables('cloudProviderBackoffRetries'),' CLOUDPROVIDER_BACKOFF_EXPONENT=',variables('cloudProviderBackoffExponent'),' CLOUDPROVIDER_BACKOFF_DURATION=',variables('cloudProviderBackoffDuration'),' CLOUDPROVIDER_BACKOFF_JITTER=',variables('cloudProviderBackoffJitter'),' CLOUDPROVIDER_RATELIMIT=',variables('cloudProviderRatelimit'),' CLOUDPROVIDER_RATELIMIT_QPS=',variables('cloudProviderRatelimitQPS'),' CLOUDPROVIDER_RATELIMIT_BUCKET=',variables('cloudProviderRatelimitBucket'),' USE_MANAGED_IDENTITY_EXTENSION=',variables('useManagedIdentityExtension'),' USE_INSTANCE_METADATA=',variables('useInstanceMetadata'),' CONTAINER_RUNTIME=',variables('containerRuntime'),' KUBECONFIG_SERVER=',variables('kubeconfigServer'))]",
        "provisionScriptParametersMaster": "[concat('MASTER_NODE=true APISERVER_PRIVATE_KEY=',variables('apiServerPrivateKey'),' CA_CERTIFICATE=',variables('caCertificate'),' CA_PRIVATE_KEY=',variables('caPrivateKey'),' MASTER_FQDN=',variables('masterFqdnPrefix'),' KUBECONFIG_CERTIFICATE=',variables('kubeConfigCertificate'),' KUBECONFIG_KEY=',variables('kubeConfigPrivateKey'),' ETCD_SERVER_CERTIFICATE=',variables('etcdServerCertificate'),' ETCD_CLIENT_CERTIFICATE=',variables('etcdClientCertificate'),' ETCD_SERVER_PRIVATE_KEY=',variables('etcdServerPrivateKey'),' ETCD_CLIENT_PRIVATE_KEY=',variables('etcdClientPrivateKey'),' ETCD_PEER_CERTIFICATES=',string(variables('etcdPeerCertificates')),' ETCD_PEER_PRIVATE_KEYS=',string(variables('etcdPeerPrivateKeys')),' ADMINUSER=',variables('username'))]",
        "provisionSource": "H4sIAAAAAAAA/8xTTXPTMBC951c8gibTMmMaF05oAr30xo0DhzTjUexVrEGWXGkNLU3+O2M7yaQhuOHW29qrfR+rp7dvrpbGXcVyNArE4TGviszoTCtjm0AXl3hC+99QnIlU4pcyPBPXEmwq8g3PxAeJWBrNmEyOCgntAwyMg7iIdI8UYot1KVH4HQbEvni62UjMIb4goXtMgUWLtgykfmC9RrRENUQrogVwJEF56XH7QHnDVOBuLG7uxhCmw44Sm1OuMuezyIrj67d3oH9FnLEKS2XtgO7+QKe7CXYmPr4sUwUk/FtDbIeHJA5tc4+LFOkUeRMsEh2/fYXoSn/AcNJq+5VpHzJt7ED02m6tuOxMvmDOaMyRaIjdEBYSXJLrLbVgJ8RgM1I1dxtv6kJxL+YvqnQ67VlUzcmKGP1hXH+epFhjFahG8oDx/Pvt4tP7d+PdYh396+7T07E+wj+Md3yMTFXONgsUWQU+J9OIP3OnKjorHscp3jOiUFR5lwSyXhXdu9i3tmIgtkzPu88G//dF/AkAAP//Ky0c8bIEAAA=",
        "readerRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
        "registerWithTaints": "node-role.kubernetes.io/master=true:NoSchedule",
        "resourceGroup": "[resourceGroup().name]",
        "routeTableID": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]",
        "routeTableName": "[concat(variables('masterVMNamePrefix'),'routetable')]",
        "scope": "[resourceGroup().id]",
        "servicePrincipalClientId": "[parameters('servicePrincipalClientId')]",
        "servicePrincipalClientSecret": "[parameters('servicePrincipalClientSecret')]",
        "singleQuote": "'",
        "sshKeyPath": "[concat('/home/',variables('username'),'/.ssh/authorized_keys')]",
        "sshNatPorts": [
            22,
            2201,
            2202,
            2203,
            2204
        ],
        "sshPublicKeyData": "[parameters('sshRSAPublicKey')]",
        "storageAccountBaseName": "[uniqueString(concat(variables('masterFqdnPrefix'),variables('location')))]",
        "storageAccountPrefixes": [
            "0",
            "6",
            "c",
            "i",
            "o",
            "u",
            "1",
            "7",
            "d",
            "j",
            "p",
            "v",
            "2",
            "8",
            "e",
            "k",
            "q",
            "w",
            "3",
            "9",
            "f",
            "l",
            "r",
            "x",
            "4",
            "a",
            "g",
            "m",
            "s",
            "y",
            "5",
            "b",
            "h",
            "n",
            "t",
            "z"
        ],
        "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
        "subnetName": "[split(parameters('masterVnetSubnetID'), '/')[variables('subnetNameResourceSegmentIndex')]]",
        "subnetNameResourceSegmentIndex": 10,
        "subscriptionId": "[subscription().subscriptionId]",
        "targetEnvironment": "[parameters('targetEnvironment')]",
        "tenantId": "[subscription().tenantId]",
        "truncatedResourceGroup": "[take(replace(replace(resourceGroup().name, '(', '-'), ')', '-'), 63)]",
        "useInstanceMetadata": "true",
        "useManagedIdentityExtension": "false",
        "username": "[parameters('linuxAdminUsername')]",
        "virtualNetworkName": "[split(parameters('masterVnetSubnetID'), '/')[variables('vnetNameResourceSegmentIndex')]]",
        "virtualNetworkResourceGroupName": "[split(parameters('masterVnetSubnetID'), '/')[variables('vnetResourceGroupNameResourceSegmentIndex')]]",
        "vmSizesMap": {
            "Standard_A0": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A10": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A11": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A1_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A2_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A2m_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A4_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A4m_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A5": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A6": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A7": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A8": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A8_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A8m_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A9": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_B1ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_B1s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_B2ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_B2s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_B4ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_B8ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_D1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D11": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D11_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D11_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D12": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D12_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D12_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D13": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D13_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D13_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D14": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D14_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D14_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D15_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D16_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D16s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_D1_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_D3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D32_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D32s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_D3_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D3_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_D5_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D5_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D64_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D64s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_D8_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D8s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS1": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS11": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS11_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS11_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS12": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS12_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS12_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13-2_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13-4_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14-4_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14-8_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS15_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS1_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS2_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS2_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS3_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS3_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS4": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS4_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS4_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS5_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS5_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E16_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_E16s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E2_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_E2s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E32-16s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E32-8s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E32_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_E32s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E4_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_E4s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E64-16s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E64-32s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E64_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_E64s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E8_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_E8s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_F16": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_F16s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F16s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F1s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_F2s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F2s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F32s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_F4s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F4s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F64s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F72s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F8": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_F8s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F8s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_G1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G5": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_GS1": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS4": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS4-4": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS4-8": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS5": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS5-16": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS5-8": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_H16": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_H16m": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_H16mr": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_H16r": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_H8": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_H8m": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_L16s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_L32s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_L4s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_L8s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M128-32ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M128-64ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M128ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M128s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M64-16ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M64-32ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M64ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M64s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC12": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_NC12s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC12s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC24": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_NC24r": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_NC24rs_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC24rs_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC24s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC24s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC6": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_NC6s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC6s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_ND12s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_ND24rs": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_ND24s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_ND6s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NV12": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_NV24": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_NV6": {
                "storageAccountType": "Standard_LRS"
            }
        },
        "vmsPerStorageAccount": 20,
        "vnetCidr": "[parameters('vnetCidr')]",
        "vnetCniLinuxPluginsURL": "[parameters('vnetCniLinuxPluginsURL')]",
        "vnetCniWindowsPluginsURL": "[parameters('vnetCniWindowsPluginsURL')]",
        "vnetNameResourceSegmentIndex": 8,
        "vnetResourceGroupNameResourceSegmentIndex": 4,
        "vnetSubnetID": "[parameters('masterVnetSubnetID')]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('agentpriCount'), variables('agentpriOffset'))]",
                "name": "loop"
            },
            "dependsOn": [
                "[variables('nsgID')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('agentpriVMNamePrefix'), 'nic-', copyIndex(variables('agentpriOffset')))]",
            "properties": {
                "enableIPForwarding": true,
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "primary": true,
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('agentpriVnetSubnetID')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('nsgID')]"
                }
            },
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('apiVersionStorage')]",
            "copy": {
                "count": "[variables('agentpriStorageAccountsCount')]",
                "name": "loop"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpriStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpriStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpriAccountName'))]",
            "properties": {
                "accountType": "[variables('vmSizesMap')[variables('agentpriVMSize')].storageAccountType]"
            },
            "type": "Microsoft.Storage/storageAccounts"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[variables('location')]",
            "name": "[variables('agentpriAvailabilitySet')]",
            "properties": {},
            "type": "Microsoft.Compute/availabilitySets"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('agentpriCount'), variables('agentpriOffset'))]",
                "name": "vmLoopNode"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('agentpriOffset')),variables('maxVMsPerStorageAccount')),variables('agentpriStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('agentpriOffset')),variables('maxVMsPerStorageAccount')),variables('agentpriStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpriAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('agentpriVMNamePrefix'), 'nic-', copyIndex(variables('agentpriOffset')))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('agentpriAvailabilitySet'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')))]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentpriAvailabilitySet'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('agentpriVMSize')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentpriVMNamePrefix'), 'nic-', copyIndex(variables('agentpriOffset'))))]"
                        }
                    ]
                },
                "osProfile": {
                    "adminUsername": "[variables('username')]",
                    "computername": "[concat(variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')))]",
                    "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n- path: \"/opt/azure/containers/provision_source.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionSource'),'\n\n\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('kubernetesAPIServerIP'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: \"/etc/systemd/system/hyperkube-extract.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=kubectl and kubelet extraction\n    Requires=docker.service\n    After=docker.service\n\n    ConditionPathExists=!/usr/local/bin/kubectl\n\n\n    [Service]\n    TimeoutStartSec=0\n    Restart=on-failure\n    RestartSec=5s\n    ExecStartPre=/bin/mkdir -p /tmp/hyperkubedir\n    ExecStartPre=/usr/bin/docker pull ',variables('kubernetesHyperkubeSpec'),'\n    ExecStartPre=/usr/bin/docker run --rm -v /tmp/hyperkubedir:/opt/hyperkubedir ',variables('kubernetesHyperkubeSpec'),' /bin/bash -c \"cp /hyperkube /opt/hyperkubedir/\"\n\n    ExecStartPre=/bin/cp /tmp/hyperkubedir/hyperkube /usr/local/bin/kubelet\n    ExecStartPre=/bin/mv /tmp/hyperkubedir/hyperkube /usr/local/bin/kubectl\n    ExecStart=/bin/chmod a+x /usr/local/bin/kubelet /usr/local/bin/kubectl\n\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n\n    KUBELET_OPTS=\n\n    KUBELET_CONFIG=--address=0.0.0.0 --allow-privileged=true --anonymous-auth=false --authorization-mode=Webhook --azure-container-registry-config=/etc/kubernetes/azure.json --cadvisor-port=0 --cgroups-per-qos=true --client-ca-file=/etc/kubernetes/certs/ca.crt --cloud-config=/etc/kubernetes/azure.json --cloud-provider=azure --cluster-dns=10.0.0.10 --cluster-domain=cluster.local --enforce-node-allocatable=pods --event-qps=0 --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5% --feature-gates=Accelerators=true --image-gc-high-threshold=85 --image-gc-low-threshold=80 --keep-terminated-pod-volumes=false --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=110 --network-plugin=kubenet --node-status-update-frequency=10s --non-masquerade-cidr=10.244.0.0/16 --pod-infra-container-image=k8s-gcrio.azureedge.net/pause-amd64:3.1 --pod-manifest-path=/etc/kubernetes/manifests \n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_REGISTER_SCHEDULABLE=true\n    KUBELET_NODE_LABELS=kubernetes.io/role=agent,agentpool=agentpri,kubernetes.azure.com/cluster=',variables('labelResourceGroup'),'\n\n- path: /etc/systemd/system/kubelet.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4xTT0/jOhC/51OMWg7vHdy8luotC8qBP4GtQICaIA6lqhxnaKw6TtYzbmEXvvsqLbAtlNXmlPH8/nk0Ht1YzePgBEk5XbOubHTuMzTIwXFlc92cXEsu4gdNTFHoyYWmUtKEmbbh7AXahiF+99phHgSjBN1cKxwHQySWjiNpFvKRgtjOtatsiZZPtcEoRFZhjvfSG35TSrxSSBQ/aE5Ysqeo298N4gdUSaN17TBaOmeSCgirmkP5wzsMVWVZaouOXqU6VGzhlbNcOxA1hHPpQqOzN+e/wSqrP8siFLT0PYxg55+y8pbhCaYOa7hrvXe6a8ETLBQI8y8Ig/AfjOEAuEALK9slXYhM2/xDzI8HB3CvW9vSv8iUcoaCCunwo1rQhrTQBJpAQi0da2lgUbmZdJW3OXAF3PR9TexQltDshrPI2HDI437QBiiYa9oPw6nmwmcdVZVL/RVu/XdJobDf/dr9v70sVFU2+yB2u71+b+/LbvfdRai5CT2SYgNiARa5o+t5v8Oqnjhkp5F60d4mSaxYmLHMDBIIBiubSRhNvBWq6z9DP1l7uAvg5RMCbSMhCN0c3UbHVjkKIzM0FLV2fp7fHMUXcTq5vDqJJxeHR/FF8tzaIMyj3mZdGV+iqI2faity7VZPZ22wK8QKQGvcnVez46vL08HZ7/rqOk3WcW+phvHZIEnj4TLe87bG7SD9NkkPB5dp8hwEo4EllsaMg1tpGfOjx6j0hrXwhK7D0k2RfwUAAP//r6JgkWQEAAA=\n\n\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n\n\n    sed -i \"s|apparmor_parser|d|g\" \"/etc/systemd/system/kubelet.service\"\n\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\n\nruncmd:\n- echo `date`,`hostname`, startruncmd>>/opt/m\n# the first arg is the number of retries, the second arg is the wait duration between two retries and the rest of the args are the cmd to run\n- set -x\n- . /opt/azure/containers/provision_source.sh\n- retrycmd_if_failure 20 5 5 apt-mark hold walinuxagent\n- echo `date`,`hostname`, preaptupdate>>/opt/m\n- apt_get_update\n- echo `date`,`hostname`, postaptupdate>>/opt/m\n- retrycmd_if_failure 5 10 120 apt-get install -y apt-transport-https ca-certificates nfs-common iptables iproute2 socat util-linux mount ebtables ethtool init-system-helpers\n- echo `date`,`hostname`, aptinstall>>/opt/m\n- systemctl enable rpcbind\n- systemctl enable rpc-statd\n- retrycmd_if_failure 100 1 10 systemctl daemon-reload && systemctl restart rpcbind\n- retrycmd_if_failure 100 1 10 systemctl daemon-reload && systemctl restart rpc-statd\n- echo `date`,`hostname`, predockerinstall>>/opt/m\n- retrycmd_if_failure_no_stats 180 1 5 curl -fsSL https://aptdocker.azureedge.net/gpg > /tmp/aptdocker.gpg\n- cat /tmp/aptdocker.gpg | apt-key add -\n- echo \"deb ',variables('dockerEngineDownloadRepo'),' ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- apt_get_update\n- retrycmd_if_failure 20 10 120 apt-get install -y ebtables docker-engine\n- echo \"ExecStartPost=/sbin/iptables -P FORWARD ACCEPT\" >> /etc/systemd/system/docker.service.d/exec_start.conf\n- touch /opt/azure/containers/dockerinstall.complete\n- echo `date`,`hostname`, postdockerinstall>>/opt/m\n- mkdir -p /etc/kubernetes/manifests\n- usermod -aG docker ',variables('username'),'\n\n- echo `date`,`hostname`, PRE-APT-SYSTEMD-DAILY>>/opt/m\n- /usr/lib/apt/apt.systemd.daily\n- echo `date`,`hostname`, POST-APT-SYSTEMD-DAILY>>/opt/m\n- retrycmd_if_failure 20 5 5 apt-mark unhold walinuxagent\n- mkdir -p /opt/azure/containers && touch /opt/azure/containers/runcmd.complete\n- echo `date`,`hostname`, endruncmd>>/opt/m\n\n'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "true",
                        "ssh": {
                            "publicKeys": [
                                {
                                    "keyData": "[parameters('sshRSAPublicKey')]",
                                    "path": "[variables('sshKeyPath')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "offer": "[variables('agentpriosImageOffer')]",
                        "publisher": "[variables('agentpriosImagePublisher')]",
                        "sku": "[variables('agentpriosImageSKU')]",
                        "version": "[variables('agentpriosImageVersion')]"
                    },
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage",
                        "name": "[concat(variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')),'-osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('agentpriOffset')),variables('maxVMsPerStorageAccount')),variables('agentpriStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('agentpriOffset')),variables('maxVMsPerStorageAccount')),variables('agentpriStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpriAccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk/', variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')), '-osdisk.vhd')]"
                        }
                    }
                }
            },
            "tags": {
                "creationSource": "[concat(variables('generatorCode'), '-', variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')))]",
                "orchestrator": "[variables('orchestratorNameVersionTag')]",
                "poolName": "agentpri",
                "resourceNameSuffix": "[variables('nameSuffix')]"
            },
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('agentpriCount'), variables('agentpriOffset'))]",
                "name": "vmLoopNode"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')),'/cse', '-agent-', copyIndex(variables('agentpriOffset')))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' /usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1\"')]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {},
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('agentpri2Count'), variables('agentpri2Offset'))]",
                "name": "loop"
            },
            "dependsOn": [
                "[variables('nsgID')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('agentpri2VMNamePrefix'), 'nic-', copyIndex(variables('agentpri2Offset')))]",
            "properties": {
                "enableIPForwarding": true,
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "primary": true,
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('agentpri2VnetSubnetID')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('nsgID')]"
                }
            },
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('apiVersionStorage')]",
            "copy": {
                "count": "[variables('agentpri2StorageAccountsCount')]",
                "name": "loop"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName'))]",
            "properties": {
                "accountType": "[variables('vmSizesMap')[variables('agentpri2VMSize')].storageAccountType]"
            },
            "type": "Microsoft.Storage/storageAccounts"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[variables('location')]",
            "name": "[variables('agentpri2AvailabilitySet')]",
            "properties": {},
            "type": "Microsoft.Compute/availabilitySets"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('agentpri2Count'), variables('agentpri2Offset'))]",
                "name": "vmLoopNode"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('agentpri2Offset')),variables('maxVMsPerStorageAccount')),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('agentpri2Offset')),variables('maxVMsPerStorageAccount')),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('agentpri2VMNamePrefix'), 'nic-', copyIndex(variables('agentpri2Offset')))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('agentpri2AvailabilitySet'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')))]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentpri2AvailabilitySet'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('agentpri2VMSize')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentpri2VMNamePrefix'), 'nic-', copyIndex(variables('agentpri2Offset'))))]"
                        }
                    ]
                },
                "osProfile": {
                    "adminUsername": "[variables('username')]",
                    "computername": "[concat(variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')))]",
                    "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n- path: \"/opt/azure/containers/provision_source.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionSource'),'\n\n\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('kubernetesAPIServerIP'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: \"/etc/systemd/system/hyperkube-extract.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=kubectl and kubelet extraction\n    Requires=docker.service\n    After=docker.service\n\n    ConditionPathExists=!/usr/local/bin/kubectl\n\n\n    [Service]\n    TimeoutStartSec=0\n    Restart=on-failure\n    RestartSec=5s\n    ExecStartPre=/bin/mkdir -p /tmp/hyperkubedir\n    ExecStartPre=/usr/bin/docker pull ',variables('kubernetesHyperkubeSpec'),'\n    ExecStartPre=/usr/bin/docker run --rm -v /tmp/hyperkubedir:/opt/hyperkubedir ',variables('kubernetesHyperkubeSpec'),' /bin/bash -c \"cp /hyperkube /opt/hyperkubedir/\"\n\n    ExecStartPre=/bin/cp /tmp/hyperkubedir/hyperkube /usr/local/bin/kubelet\n    ExecStartPre=/bin/mv /tmp/hyperkubedir/hyperkube /usr/local/bin/kubectl\n    ExecStart=/bin/chmod a+x /usr/local/bin/kubelet /usr/local/bin/kubectl\n\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n\n    KUBELET_OPTS=\n\n    KUBELET_CONFIG=--address=0.0.0.0 --allow-privileged=true --anonymous-auth=false --authorization-mode=Webhook --azure-container-registry-config=/etc/kubernetes/azure.json --cadvisor-port=0 --cgroups-per-qos=true --client-ca-file=/etc/kubernetes/certs/ca.crt --cloud-config=/etc/kubernetes/azure.json --cloud-provider=azure --cluster-dns=10.0.0.10 --cluster-domain=cluster.local --enforce-node-allocatable=pods --event-qps=0 --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5% --feature-gates=Accelerators=true --image-gc-high-threshold=85 --image-gc-low-threshold=80 --keep-terminated-pod-volumes=false --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=110 --network-plugin=kubenet --node-status-update-frequency=10s --non-masquerade-cidr=10.244.0.0/16 --pod-infra-container-image=k8s-gcrio.azureedge.net/pause-amd64:3.1 --pod-manifest-path=/etc/kubernetes/manifests \n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_REGISTER_SCHEDULABLE=true\n    KUBELET_NODE_LABELS=kubernetes.io/role=agent,agentpool=agentpri2,kubernetes.azure.com/cluster=',variables('labelResourceGroup'),'\n\n- path: /etc/systemd/system/kubelet.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4xTT0/jOhC/51OMWg7vHdy8luotC8qBP4GtQICaIA6lqhxnaKw6TtYzbmEXvvsqLbAtlNXmlPH8/nk0Ht1YzePgBEk5XbOubHTuMzTIwXFlc92cXEsu4gdNTFHoyYWmUtKEmbbh7AXahiF+99phHgSjBN1cKxwHQySWjiNpFvKRgtjOtatsiZZPtcEoRFZhjvfSG35TSrxSSBQ/aE5Ysqeo298N4gdUSaN17TBaOmeSCgirmkP5wzsMVWVZaouOXqU6VGzhlbNcOxA1hHPpQqOzN+e/wSqrP8siFLT0PYxg55+y8pbhCaYOa7hrvXe6a8ETLBQI8y8Ig/AfjOEAuEALK9slXYhM2/xDzI8HB3CvW9vSv8iUcoaCCunwo1rQhrTQBJpAQi0da2lgUbmZdJW3OXAF3PR9TexQltDshrPI2HDI437QBiiYa9oPw6nmwmcdVZVL/RVu/XdJobDf/dr9v70sVFU2+yB2u71+b+/LbvfdRai5CT2SYgNiARa5o+t5v8Oqnjhkp5F60d4mSaxYmLHMDBIIBiubSRhNvBWq6z9DP1l7uAvg5RMCbSMhCN0c3UbHVjkKIzM0FLV2fp7fHMUXcTq5vDqJJxeHR/FF8tzaIMyj3mZdGV+iqI2faity7VZPZ22wK8QKQGvcnVez46vL08HZ7/rqOk3WcW+phvHZIEnj4TLe87bG7SD9NkkPB5dp8hwEo4EllsaMg1tpGfOjx6j0hrXwhK7D0k2RfwUAAP//r6JgkWQEAAA=\n\n\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n\n\n    sed -i \"s|apparmor_parser|d|g\" \"/etc/systemd/system/kubelet.service\"\n\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\n\nruncmd:\n- echo `date`,`hostname`, startruncmd>>/opt/m\n# the first arg is the number of retries, the second arg is the wait duration between two retries and the rest of the args are the cmd to run\n- set -x\n- . /opt/azure/containers/provision_source.sh\n- retrycmd_if_failure 20 5 5 apt-mark hold walinuxagent\n- echo `date`,`hostname`, preaptupdate>>/opt/m\n- apt_get_update\n- echo `date`,`hostname`, postaptupdate>>/opt/m\n- retrycmd_if_failure 5 10 120 apt-get install -y apt-transport-https ca-certificates nfs-common iptables iproute2 socat util-linux mount ebtables ethtool init-system-helpers\n- echo `date`,`hostname`, aptinstall>>/opt/m\n- systemctl enable rpcbind\n- systemctl enable rpc-statd\n- retrycmd_if_failure 100 1 10 systemctl daemon-reload && systemctl restart rpcbind\n- retrycmd_if_failure 100 1 10 systemctl daemon-reload && systemctl restart rpc-statd\n- echo `date`,`hostname`, predockerinstall>>/opt/m\n- retrycmd_if_failure_no_stats 180 1 5 curl -fsSL https://aptdocker.azureedge.net/gpg > /tmp/aptdocker.gpg\n- cat /tmp/aptdocker.gpg | apt-key add -\n- echo \"deb ',variables('dockerEngineDownloadRepo'),' ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- apt_get_update\n- retrycmd_if_failure 20 10 120 apt-get install -y ebtables docker-engine\n- echo \"ExecStartPost=/sbin/iptables -P FORWARD ACCEPT\" >> /etc/systemd/system/docker.service.d/exec_start.conf\n- touch /opt/azure/containers/dockerinstall.complete\n- echo `date`,`hostname`, postdockerinstall>>/opt/m\n- mkdir -p /etc/kubernetes/manifests\n- usermod -aG docker ',variables('username'),'\n\n- echo `date`,`hostname`, PRE-APT-SYSTEMD-DAILY>>/opt/m\n- /usr/lib/apt/apt.systemd.daily\n- echo `date`,`hostname`, POST-APT-SYSTEMD-DAILY>>/opt/m\n- retrycmd_if_failure 20 5 5 apt-mark unhold walinuxagent\n- mkdir -p /opt/azure/containers && touch /opt/azure/containers/runcmd.complete\n- echo `date`,`hostname`, endruncmd>>/opt/m\n\n'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "true",
                        "ssh": {
                            "publicKeys": [
                                {
                                    "keyData": "[parameters('sshRSAPublicKey')]",
                                    "path": "[variables('sshKeyPath')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "offer": "[variables('agentpri2osImageOffer')]",
                        "publisher": "[variables('agentpri2osImagePublisher')]",
                        "sku": "[variables('agentpri2osImageSKU')]",
                        "version": "[variables('agentpri2osImageVersion')]"
                    },
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage",
                        "name": "[concat(variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')),'-osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('agentpri2Offset')),variables('maxVMsPerStorageAccount')),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('agentpri2Offset')),variables('maxVMsPerStorageAccount')),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk/', variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')), '-osdisk.vhd')]"
                        }
                    }
                }
            },
            "tags": {
                "creationSource": "[concat(variables('generatorCode'), '-', variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')))]",
                "orchestrator": "[variables('orchestratorNameVersionTag')]",
                "poolName": "agentpri2",
                "resourceNameSuffix": "[variables('nameSuffix')]"
            },
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('agentpri2Count'), variables('agentpri2Offset'))]",
                "name": "vmLoopNode"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')),'/cse', '-agent-', copyIndex(variables('agentpri2Offset')))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' /usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1\"')]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {},
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersionStorageManagedDisks')]",
            "location": "[variables('location')]",
            "name": "[variables('masterAvailabilitySet')]",
            "properties": {
                "managed": true,
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 3
            },
            "type": "Microsoft.Compute/availabilitySets"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[variables('location')]",
            "name": "[variables('nsgName')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "allow_ssh",
                        "properties": {
                            "access": "Allow",
                            "description": "Allow SSH traffic to master",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22-22",
                            "direction": "Inbound",
                            "priority": 101,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allow_kube_tls",
                        "properties": {
                            "access": "Allow",
                            "description": "Allow kube-apiserver (tls) traffic to master",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443-443",
                            "direction": "Inbound",
                            "priority": 100,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            },
            "type": "Microsoft.Network/networkSecurityGroups"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[variables('location')]",
            "name": "[variables('routeTableName')]",
            "type": "Microsoft.Network/routeTables"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[variables('location')]",
            "name": "[variables('masterPublicIPAddressName')]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[variables('masterFqdnPrefix')]"
                },
                "publicIPAllocationMethod": "Dynamic"
            },
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ],
            "location": "[variables('location')]",
            "name": "[variables('masterLbName')]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "[variables('masterLbBackendPoolName')]"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('masterLbIPConfigName')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "LBRuleHTTPS",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                            },
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[variables('masterLbIPConfigID')]"
                            },
                            "frontendPort": 443,
                            "idleTimeoutInMinutes": 5,
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[concat(variables('masterLbID'),'/probes/tcpHTTPSProbe')]"
                            },
                            "protocol": "tcp"
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "tcpHTTPSProbe",
                        "properties": {
                            "intervalInSeconds": "5",
                            "numberOfProbes": "2",
                            "port": 443,
                            "protocol": "tcp"
                        }
                    }
                ]
            },
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
                "name": "masterLbLoopNode"
            },
            "dependsOn": [
                "[variables('masterLbID')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
            "properties": {
                "backendPort": 22,
                "enableFloatingIP": false,
                "frontendIPConfiguration": {
                    "id": "[variables('masterLbIPConfigID')]"
                },
                "frontendPort": "[variables('sshNatPorts')[copyIndex(variables('masterOffset'))]]",
                "protocol": "tcp"
            },
            "type": "Microsoft.Network/loadBalancers/inboundNatRules"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
                "name": "nicLoopNode"
            },
            "dependsOn": [
                "[variables('nsgID')]",
                "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex(variables('masterOffset')))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex(variables('masterOffset')))]",
            "properties": {
                "enableIPForwarding": true,
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex(variables('masterOffset')))]"
                                }
                            ],
                            "primary": true,
                            "privateIPAddress": "[variables('masterPrivateIpAddrs')[copyIndex(variables('masterOffset'))]]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('vnetSubnetID')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('nsgID')]"
                }
            },
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('apiVersionStorageManagedDisks')]",
            "copy": {
                "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
                "name": "vmLoopNode"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex(variables('masterOffset')))]",
                "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('masterVMSize')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'),'nic-', copyIndex(variables('masterOffset'))))]"
                        }
                    ]
                },
                "osProfile": {
                    "adminUsername": "[variables('username')]",
                    "computername": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
                    "customData": "[base64(concat('#cloud-config\n\n\npackages:\n - jq\n - traceroute\n\n\nwrite_files:\n- path: \"/opt/azure/containers/provision_source.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionSource'),'\n\n\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n\n- path: \"/etc/kubernetes/generate-proxy-certs.sh\"\n  permissions: \"0744\"\n  encoding: \"gzip\"\n  owner: \"root\"\n  content: !!binary |\n    ',variables('generateProxyCertsScript'),'\n\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: ',concat('https://', variables('masterPrivateIpAddrs')[copyIndex(variables('masterOffset'))], ':443'),'\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n\n\n\n\n- path: /etc/kubernetes/manifests/kube-scheduler.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4SRQW+jMBCF7/wKy+dFaK/WKpe9tIe0kSL1EvUwmClYsceWPRDx7yunQJomKdzwe+/z+A0E84YxGU9KyOGvLI6GGiXkzjeycMjQAIMqhCBwqIQ89jWWSXfY9BajnIQUQF/UMTG6LFmo0aacFoINRiW0J47elsEC4flcexc8IbES1+wiBdQ52/nEL8gnH49KcOxzLnPAEMaJXj6eL3/GQZvVf1mOhIzpaQwY8+8+oN7MRu2dg1zAQVbd7JB/hLwg3ycrxDYpcfiG3M+e/54+TLuZnYO3vcOt74mnca9GRtblBSIXgxAuR3bAnRKyQtbVPdvCGSCW1tRnlkV+CBogVtbU1Y1vJrlk1rIngBaJqy0QtNg8N0hseCz3yGyovXpFRGheyY7L8r76+Lm5+zXk5Z8vX4Dhlz7WunhMu1vKbSHrgPVmPgMAAP//6fKK/HMDAAA=\n\n- path: /etc/kubernetes/manifests/kube-controller-manager.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4ySsY6jMBCGe57Ccn0IXWud0qS5K3IXKdI10RaDmSVW7LFlD0S8/coJsJsNWZYO+OYb/t9AMP8xJuNJCdn/lMXZUKOE3PtGFg4ZGmBQhRAEDpWQ567GUnvi6K3FWDogaDHKkUgB9IylITG6/MpCjTZljRBsMCoxKspggfD6XHsXPCGxEk+WFCmgzpKTT/wX+eLjWQmOXRZkHAxhHNeU3/jifBkHbcZ+ZS4SMqbfQ8CYbw8B9WYCtXcOcjdHWZ0mQv4QcsH9Ms5AbJMSxw/u7QzvbuzW06tpN9NE723ncOc74jHIXRhkXb7L5AwI4fLIHvikhKyQdbWEzZ4eYmlNfXVZ5KeiHmJlTV09cJPJJbM2ewFokbi6BW7+NEhseCgPyGyovUsREZp/ZIf5WG99fD7T5Rryb3FdPgvDF32sdfHctljKYyHrgvVm3gIAAP//7hHuXJ8DAAA=\n\n- path: /etc/kubernetes/manifests/audit-policy.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/7RVwY7jNgy95ysI51Cg2HiwtyK3aQsUBabbRbrTHoo5KBJjC1FIV6ST8d8Xkhw7mWSAHqY3JabI954eSdP5PzGKZ1qD6Z3Xev+D1J4fjp+3qOYzLOFb6wW8QMR/eh/R1Yu9J7eGrxy8HRZL+JnpO4UGCaNRLGkAj0gqsOMIJoR8GUUFPMGmnDdo0R/RgahpsF7wwesf6SjrBcAKqjdx1SL2oXxcwhM30LED2xpqUMDonFY6JkEIeMSQM+XT+m3AAgAgonAfbUmbYpvIfbeGqsq/U6nNGAJVx04qcIySCB+M2nYmpgyGBpB+e84JvEsY5dOU6tR62yYtLZN4USSFk9cWtEXY/Pj4E3RZ1Hq8MaODv0v1l8VEP//xELipPo1nUaO9VEmM31CNM2puVTh/+W/0bxDcKziCKj4I3MDpWprtkAlWMojiYb3vt7jqIr8OFTABkuvYJ7NwBMF49BblEvEXpvJYvWDMQG4TveSAI8ZtDsgAxj/f5whLsBwRHr/+Wv68R3qCl1if4d1SNr22SOqtUXRXrrAY1XgCYlpN1njePEFntJX6Xaa/JESXdK9KjOSI6ezP583TRLF6MJ3/PhH8ywdnTXTFrp6aego5lsavZkulVxqhw5bdkBxsmXa+OZhu6jVPkJUvsOo7LfYRuk91ZaQ6TqI0BIApDGC6LnjMGk83E7jstQuEFZA5oHTGYj1lQsBDpwOIRk9NAmUNwRaT9C6lFAxoNb/adN3NhUqm6UuGfFnzolHvyipoI+pZ0/9LxFLlamykaczaYrwWLecy5ABfFSn5Ig/VPJhG6BnehyGdA+aKKXRcR0mjHADSch8cfPn9W3oeTzb0Lm2hzOgRbPL1Ku+Y5Azl0o4XLMdWHNlcT8b63dGY1KJmFXuiZJApTfB7LAMuWa81CrtUrCeHEXRy6MmHAMQ65pq3I10uyDvrsBjrehmOHXuzEP8NAAD//+gVlJa+BwAA\n\n- path: /etc/kubernetes/manifests/kube-apiserver.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4ySwc6bMBCE7zyF5XMR6tWqfqnqpf8hbaRIvUQ9LGZLLOy1ZS9EvH1lCqRJoQk3mJnPy6whmB8Yk/GkhBw+yqIz1Cghj76RhUOGBhhUIQSBQyVk19dYQjAJ44BRzkIKoFc1jYnRZclCjTbltBBsMCqhPXH0tgwWCKfv2rvgCYmVuGcXKaDO2YtP/A356mOnBMc+5zIHDGGc6eX+fPkxDtqsfspyJGRMX8eAMb+eAuq3xai9c5ALOMvqsjjkByFvyJ+zFWKblDj/hfx8fD9Nni+efpn2bXEO3vYOD74nnse9GxlZlzeIXA1CuBw5Al+UkBWyrrZsK2eAWFpTTyyLvAsaIFbW1NU/vpXkknmavgK0SFwdgKDF5r1BYsNjeUJmQ+3df0SE5jvZcV3fw3nJ6273QB+mEf+U+Lju7e7yjZniKzP8p8RnBe7TNptccC6ZlwGvlbnZ1z58Ku53AAAA//+XfMNr4AMAAA==\n\n- path: /etc/kubernetes/manifests/kube-addon-manager.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4yRsW7zMAyEdz8Fkd3w/w9ZhKJAxw5pAwTozkiEIySiXJFy4LcvZMdOWjRtR5LH43cSdv6NkvjIBvr/1dGzM7CNrgqk6FDRVACMgQwc855qdC5yHZCxpXQZSYd2nssgSqEC6G9cpSNbfA5R9IX0HNPRgKZMFYCNrOiZkhRF/dMtAB+wJQMPZZyYlOSpaDaTZNeRfRx1iSTmZGn0nBrvmUSXGsB22cA6LHWgENNgYP1v48dmH0850CZmntdmuJFLLpuhCLaoBwOrhtQ2V7ZmEq4WBnSvfBqW6FfHIP47ux5Tc/L75ozYEmsz5XTPjli9DvWOVD239y9MGT697A18+Y7x1GW9+y3FV9x7Bn/n/ggAAP//ovMbJ38CAAA=\n\n\n\n- path: /etc/kubernetes/addons/kube-heapster-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xWW2tjNxB+P79C+F1ep92AK+pCmk3bh2Y3JFAoLISxNOujWrfq4rX31xfpHNvnYgcTNlC9WGdGo2/mm4sMTv6FPkhrGNlcVWtpBCNP6DeS4w3nNplYaYwgIAKrCDGgkZEawYWIvhUEBxwZWacl0rALEXVFiIIlqpBtSNF4gxHDVNp3XKVsTEMDw8gk+oSTchKEsEaDgRX6ad9MW4GMPCK3hkuFFaW06rrvl8CnkGJtvfwGUVozXc+L5eZqiRH20d028I9W4YnQGv/ZPkL6VcaaGjBm93Yx3ZmQPN5tZYih8klhYBUl4OTv3iZX8CjBbUSTIw3lE5zLG4/BJs+xPSTQKbvTaGJWbtAvW8UKY/lVMjSbrxB5XXbJCYhYtq4IR9CTyRgJNy0IPZZA+2lFu3NWXObGd0jlr9IIaVb/y4xahY/4JYPsiX0hxIqQcZ1eEEtIy3+Qx1I6J9v48uYdpmM4GHokv47B/snGsT/6jl3iaXDIM7SzPrYllreMzGcFJoJfYXxoRfMfKkICKuTR+tbjeaDgXAcrB99E++HQTD02jo14qMazfIxuf8s6e2EYD/jc0+bRKckhMHI1YkbnzvyzE8zpcCJqpyBia9QhIi/Vsz9HCCFgjI2lCzqHA69RJIV+CsrVMCCAexklB0WdFawZUYTsAyu5twp9/05K1rhj5LY1vcn0hk9G7Q6Y1mUb6xk5kFru7bXSx2F15sWtiSAN+g6a1LBCRn4+er6v8SeH/JcDKrdagxHH0CmZvNvfP+lKKW2m8KJDRkhag989g5Ps8+Tz5GgwaqNm9Ub5UfhvwhB7MkK4S7lzdE+oUVu/Y+Tq/exedjRKavnqC06xVRL0iEF+u4gxZ8VzGYYDyrhLi/lMD6S4jR6Kbja9HiobDxfFwZN27YH3I3WsPYbaKrG4HmiOj/PiTG4PNXTugLNKUYdeWrH4cZbX0LkQpc4FvMCtswZNlKDOFcThFXxdWVyfyepPF1bFRfZoNt0kb0Al/M1b3b/vi0Ql2jd2JH+AWLPDaJpmDjrHGkru/35++PTh+ePN/d33Rysj+SXIp4eb2z1u/vv01JvEeeV3ZjAAbWBESZO21X8BAAD//0SxZ2rFCwAA\n\n- path: /etc/kubernetes/addons/kube-dns-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xYS2/jNhC++1cQ7ll+ZJHdQFgHCOKgG2yTGnXa+4QcS4QpkuHDjffXF5RkWZRsx14URX0T5/VxHt9IBs3/QmO5kinZTAdrLllKlmg2nOIdpcpLNyjQAQMH6YAQCQWmZO1fMWHS1gdWA92d2q11WAwIEfCKwgYbUkqMRId2xNWYCm8dmsRWYVIydMbjsNQExpQsQEKGZhSbFYphSv5AqiTlAgdJkgxOwY9wR2hubAJaR9e4BGOsWWXku3/F+fPyggxZjTTgqSM9LlLydV15qS/wuLgdEKKVcSXwpHa9AxwEKbn+VD0Y5RRVIiV/zhexcuKoPmXwch8MLAqkTpljKepmG7S24830FR3s8j5HLdS2wE7L/FwjHC7Spin21aSX62R/eCLfBrXgFGxKrnrXLsDR/LcW3mM4ekgcFlqAw9pP6/plV0upHDiuZOOXEEtzZF6gGYHQOXS6nRruOAWRaMVSMhzWZiICdxzeJak+cB1Cdukq4a9WXHK33YfVit1Jx+96gtBYuEJjkM294TJbVrfkMnvMpGqOH96R+pCQtmlC/kae5S4l08mkdV7Fq2O9oCnSSFhnZRmVsv0ry/rwrg1aG9dgH3mN23SXzZ6YEKXRQHBOHuUB8QaExwN+S8/dylQ/p7QSKtt+LwNHxcqVdaGLBztNEYK3kdd47+smuQusaX+XYjvoA35459Y1bauEL7DlpzNCVMkVzxov1eMT6PbVegy3jxlAgkhJaK5B48IBl2haQcFkrWQlZJgkTBXA5ezrPhOBUgW6+6pz56X8djTsmEmbBF6bTSeT608d4WZ21Tmp7pMwbmbjzp33mryADGs23kMJvKyR3jZqgm9QorULo16xnZ8VcOENvuQGba4ES8l1S5o7p39FF/eKBpenZDjOEYTLfyQhNJN22BmCwN83k5t4NgKPhIJ8e3lZtARhWDiIOQrYLsPSZDYln9um1lOK1rZwTltSxwtU3jWm+zvs698uf7OnduluCr8ocZcF6nVRyL9QFETEIPEuu9iho/qE02rfVT+DwPjBIp4sU2N2pEDTny7Qp8lZJTBolTc0phzBC+46JFRgocw2JdMvkyfekhh882i72lT7Mq/FQR+Ri4pInsILYlT103xCSBEsFmUeuxN4gh56kyxU5pR1DI2JBZWr+ckBD3oGrQPj5tIWYN9m8TYsuSJ+XHeZBGiOieU/MFDPpCOVKgRQYtM5D+sXzWx69WU0GU1G018O0VatNOYyAcbMCIyG8Zkm+vM56kJlyQooF9xtZ8kp5ps/L5/AvsXM10xaSN3ZBHB4WC+f++ND/+G4H2vaj5uS9Pbex02b0ILNpBVKrb1ur3iGK/DCjeyGjj5aeKSpJLkdM9yMpReiU05vxKxZHXVZuu36r0JJy6Y6E1Bvl5Uq5dIOu6xz/uY5ulMdGd4cv1Wu/7t93Esq+d/t4xrq2ePYwX1sP164Z64vWDOHt0zLA5N2oQSn2/BtWfZpLbDRHxTPh95HpWLY/yIIn6udDy1lUyK49O+DfwIAAP//KA420AwRAAA=\n\n- path: /etc/kubernetes/addons/kube-proxy-daemonset.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/5RUy27bMBC8+ysI3RklVyEuULgBemkawEDva2psE+ZDWS5d++8LSrUtOYmb8kTMLoczswSps7/AycbQKBwEoWxTvX9YQehhtrOhbdQ3go9hCZl5CLUk1MyUcrSCS2Wn1C6vwAGCdGdjbVxOAtYJvLcGjaqEM6q+00TfxYAgTX9IdxwPx74iFtyoEFvMlArkcdVRoNSROeHpmAR+ljqYIkLgO0eCQdBYaFljsbdlvJGi1OmKvhQdmKSkdIK02uE4tGuODnfTNDyVMM7csSvnIzfq6TWTO+N7cnkaVVlYr2GkUc9xabZos8PsZCAI2QAeyTDRewrtxaVWVb09duCiqBrBU7taVVqXFhPD2m7m9Z64dnZVF8xB6kutmh46TdrYluePpW0xIAvb8per5jVIMkNvSJDmT4cObD2CkFuwFWvIvcT2awhR+nzn0ySsp03J5/GS7veTtWUHM7rtncczLEaKmQ1GD6GArxlJJphSpsuNeri/92c0wWS2clzEIDjIuL1ju7cOG7SNKqovQ40ue/yIOYz5tfIFeSHZNqqqIaZOydUGLKka0Q4+UnK6L+ltTDIRTu3P4I5Xd77DfonsLT3E6Ev9v+k/81TGExlq/7qmOH2G/I68m+BDnqMnXxp7KeNp/JWWE9dpS4zaUJ+gXVtDkxBuJHyb+zO2PzB9m/ijcd0YVvl4lnAw5Vc5Hygf+NVPFFOjnA35MPsTAAD//zcsf+33BQAA\n\n- path: /etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xUT08bPxC976cY5b4J6HcB61ckChIXiqKk7X3inSZubI9rz6ZsP33lJVl2IYRQFak+WfP3zfMbYzBfKSbDXsHmtFgbXymYU9wYTZdac+2lcCRYoaAqACwuyKZ8A1ifpRJDULCuFxQ9CaWywrRaMMbqIaJzjA1PtK2TUCzTQ3kFI4k1jdpIrCr2Dj0uKY6HaY4rUjAjzV4bSwWAR0cvds3OFFBvI8rUJCFXlGVZ9IeNC9RjrGXF0fxCMezH67O23+Z0QYI7Lq4eQM/Y0kfjK+OXAz4OQvkHyIpsaUbfMgYM5iZyHQ7MXgA8m7obcocIK2d8kerFd9KSVFHCXtX8nWd6qsmXxXg0e6+9xJ/AToF0xhE4SguobK8Kzk7anoJxSTJtTecn59mYyJIWjsfJQ5pACu64olzkGU10L+TzNT2R7zUFy42jQ2v8Pkv6vkRHCtZoTApOn3HpUPTqtjfhEfSSCxaFtgV6TOVjB7WO2eUdzHw0e0HjKXYVSsC47NUroSxXhKElfsVJPqxEgppMdsZxjwK1lVQ+xuGSFPz/iON6B2MeSF8MA6e1tVO2RjcKLu1PbFLnt2ZDnlKaRl7QIzCADOSGpG8CCCgrBaPJaGjtq7tr7I0YtNdksZlndVRJwX/9CDGOuJZ9zoMCeWw6YLJje7oPTogsrNkq+Hw17eyREtdRU+qPGelHTUnScHQd6v18X02/zLYZF4MMR45jsz/pU+vbl2eNM2/pfZvj39p4kJQG3/fda9R7rmg+WLt88tfz5GfgpMAaX98XvwMAAP//QbpZm2wIAAA=\n\n- path: /etc/kubernetes/addons/azure-storage-classes.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8yQsWorMRBFe33F4F77cPdQmzaYEEPaMJbGzrCr0TIaGZKvD7veBOwYV8Gklu6dew6O/EJauUiAakXxQF3/v3Zc/h3XOzJcu54lBdieHh8GrNVlMkxoGByAYKYAifbYBnMAKFIMjYvU6Rm+auOU7KbKrm87UiGj+Q5Xv6T9/CfAyrTRygEMuKNhqTkPxaFVI/WV9MiRvjOjliNPOKThIoIfTcknrr0bUTGTkc7dEeMbyyGXRAE2Rch5791vmWmSUfBAyY9KmVv+6eg+mAsExliamL2PFODpNOn18Xl7RxHVUBJq+ksmtsummyqucN60c8XCPGrPA90Ffj50Ad+3zbzkjPgzAAD//wD1SX0IBAAA\n\n- path: /etc/kubernetes/addons/kube-tiller-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/9RUXWvbShB9169Y/C4Hc3PhslwCbmKSQJwaOy3tUxivpvY2+9WdWWP31xcpsaKvhuQhhepJu3uOzjkzo4WgP2Mk7Z0Uu0n2oF0hxQrjTiucKuWT48wiQwEMMhPCgUUpWBuD8WlJARRK8ZDWmNOBGG0mhIE1GioZojqJDhlprP2JMokYY06PIlKMOCYcVUgoCu8sONhgHLdp1hclduYoRZztNTGNsjzPs2aCuAY1hsRbH/VPYO3d+OG/ir6brJHhGPD80cPSG/ygXaHd5qWQfyZL9AaX+K2UgaAvo0/hhUCZEL0otfOjLSisdhml9XdUTDLLxWB/X9vVbrW789KqYbNoEIIUWzS2WnXE3rOmbbG8wGD84fcBKaAqHQcfubKe982WZ1Kcnk7+Oa3WDHGDvKh2axihQcU+viI+HwLWXbxe9IqMe0ZXvlJnhi+qMBY7P+jfXHdGGwwwPrpvpiqfZrJ+usGExw9X762hv+1ChVDeMWiHsdbIBbrds+BxGu6ub25my/vb6Xy2WkzPZzVAiB2Y1LsLB9lX16u7j8uv9/Pplz5/9P9zke8qj3PYX2liHw9noxqvLWxQih54FVCd1Sijd+iQaBH9GmVDbMscLpGbW0IE4K0UJ0dS+6ye/X8b+9pp1mAu0MBhhcq7gqSYNACsLfrEA2e9hh1VqFn1ujGLzr/3wkciQqHfnLpmvW/siORTVEhNExF/JCSmtjEV0kCDzxeflk/wsxbcovXxMMCYVwdDJKOtfrXqTQl+k2SL4XyBq9bdWD7lrda5VTxJYbRL++xXAAAA//9fQ5xvoQgAAA==\n\n- path: /etc/kubernetes/addons/azure-cloud-provider-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/7yQMW/jMAyFd/0KIouXUw7ZDtrubuieAl2CDLT8mqqRJYOkDDS/vrANZClQdCi6SiTf+z7vveMpPUE01RJIeo57bvZSJd3YUi376x/dp/p7PvQwPrhrKkOg/7mpQY41w40wHtg4OKLCIwLpmxrGwLcm8DHXNvhJ6pwGiCPK3CPrMk10bT2kwLBmxO2qV8icIgLtTBp2TlqGBueJp/QgtU0a6NR1Z0ck0NokYn1RRIHp+jFDeg1LBp26C6z71UUBG7qz+wbqf6kMqVx+Ar5mHPG8rHx0T3cln1B8qZq2/hXRVs1bzuNW5G+MtRW7H5kWa2oo5uea2wjfp7LBLQM68VJ+YfNbnnsPAAD//990ZYZlAgAA\n\n- path: /etc/kubernetes/addons/kube-metrics-server-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/9RWS08bSRC+z69o+cKpDWg5oNbuSiyLokgQWRhxjdo9xVBxv1RdY3B+fTQPP8aPEU6AkLm43dNVX331VVWPjngPlDB4JWan2RR9rsQYaIYGLowJpefMAetcs1aZEF47UMIBE5okE9AMqN1OURtQYlpOQKZ5YnCZEFZPwKbKUtRvyANDGmI4NrZMDFT7wMpwwFTCoD6p8zx4p70ugIZdMxdyUOLKp5Lg6hkTp0xKma3zoIk2Q13yYyD8rhmDH07Pa+Mlw8sG/DZY2EGviV5tsXwPMlRaSCqTQkf8RKGMNZ4Ug8oZQQolGWj3YshTvfAhh3a1EKL6OwOatEcL4PrXYmoWT5rN4w4YeGbwVR7TDsAcog1zB55f6P6XlPkPfY6++GgCBQu38FCBLHLXQywTYrvi+mmkcvINDNdFsLMfD+3CQ1SYAOuFFP0adNFl5U8S6Pz3z4OfVKgjzbINpI64RhE8o6nNF2Q/jFwv6pxuEKqtwFq8HCwUmsOf20gbNN5cmc0L89VuysMSuS1Sgz246YAPDlAzRTBVKAksGA7UVsJ5kjrGHaxiIF5eSsRKnJ39VZtEChxMsErcXY7qHdZUAI+WpzaTurqANur7/+Xl83pfJHsJvV3Z706tq+7L67XQ+oJjcNFqhtZ0LRnVsych1WM7AP38F3HW607ffNkPYIJnjR5oCSL74hECnS5Aib9XaWuLdlyfG0cw/3YPj0prR8GimStxYZ/0PC3fm+Cc9vmKnxTHe3ClkLL5tPlnTbFUOqdp/lVHVEdHW6WpIxIUmJh6xvDF6PP+cdAeHbZRrWbbewzcVeU1nrLeatnbQEUzqbcozFZjscmHEOgTmJJgPMV4dz2+B8KHuRIVgYWjEWEg5PkNenSlU+L05GTlbPG22f4RAAD//789LNetDAAA\n\n\n\n- path: \"/etc/systemd/system/hyperkube-extract.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=kubectl and kubelet extraction\n    Requires=docker.service\n    After=docker.service\n\n    ConditionPathExists=!/usr/local/bin/kubectl\n\n\n    [Service]\n    TimeoutStartSec=0\n    Restart=on-failure\n    RestartSec=5s\n    ExecStartPre=/bin/mkdir -p /tmp/hyperkubedir\n    ExecStartPre=/usr/bin/docker pull ',variables('kubernetesHyperkubeSpec'),'\n    ExecStartPre=/usr/bin/docker run --rm -v /tmp/hyperkubedir:/opt/hyperkubedir ',variables('kubernetesHyperkubeSpec'),' /bin/bash -c \"cp /hyperkube /opt/hyperkubedir/\"\n\n    ExecStartPre=/bin/cp /tmp/hyperkubedir/hyperkube /usr/local/bin/kubelet\n    ExecStartPre=/bin/mv /tmp/hyperkubedir/hyperkube /usr/local/bin/kubectl\n    ExecStart=/bin/chmod a+x /usr/local/bin/kubelet /usr/local/bin/kubectl\n\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n\n    KUBELET_OPTS=\n\n    KUBELET_CONFIG=--address=0.0.0.0 --allow-privileged=true --anonymous-auth=false --authorization-mode=Webhook --azure-container-registry-config=/etc/kubernetes/azure.json --cadvisor-port=0 --cgroups-per-qos=true --client-ca-file=/etc/kubernetes/certs/ca.crt --cloud-config=/etc/kubernetes/azure.json --cloud-provider=azure --cluster-dns=10.0.0.10 --cluster-domain=cluster.local --enforce-node-allocatable=pods --event-qps=0 --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5% --feature-gates= --image-gc-high-threshold=85 --image-gc-low-threshold=80 --keep-terminated-pod-volumes=false --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=110 --network-plugin=kubenet --node-status-update-frequency=10s --non-masquerade-cidr=10.244.0.0/16 --pod-infra-container-image=k8s-gcrio.azureedge.net/pause-amd64:3.1 --pod-manifest-path=/etc/kubernetes/manifests \n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_NODE_LABELS=kubernetes.io/role=master,kubernetes.azure.com/cluster=',variables('labelResourceGroup'),'\n\n  \n    KUBELET_REGISTER_NODE=--register-node=true\n    KUBELET_REGISTER_WITH_TAINTS=--register-with-taints=',variables('registerWithTaints'),'\n  \n\n\n- path: /etc/systemd/system/kubelet.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4xTT0/jOhC/51OMWg7vHdy8luotC8qBP4GtQICaIA6lqhxnaKw6TtYzbmEXvvsqLbAtlNXmlPH8/nk0Ht1YzePgBEk5XbOubHTuMzTIwXFlc92cXEsu4gdNTFHoyYWmUtKEmbbh7AXahiF+99phHgSjBN1cKxwHQySWjiNpFvKRgtjOtatsiZZPtcEoRFZhjvfSG35TSrxSSBQ/aE5Ysqeo298N4gdUSaN17TBaOmeSCgirmkP5wzsMVWVZaouOXqU6VGzhlbNcOxA1hHPpQqOzN+e/wSqrP8siFLT0PYxg55+y8pbhCaYOa7hrvXe6a8ETLBQI8y8Ig/AfjOEAuEALK9slXYhM2/xDzI8HB3CvW9vSv8iUcoaCCunwo1rQhrTQBJpAQi0da2lgUbmZdJW3OXAF3PR9TexQltDshrPI2HDI437QBiiYa9oPw6nmwmcdVZVL/RVu/XdJobDf/dr9v70sVFU2+yB2u71+b+/LbvfdRai5CT2SYgNiARa5o+t5v8Oqnjhkp5F60d4mSaxYmLHMDBIIBiubSRhNvBWq6z9DP1l7uAvg5RMCbSMhCN0c3UbHVjkKIzM0FLV2fp7fHMUXcTq5vDqJJxeHR/FF8tzaIMyj3mZdGV+iqI2faity7VZPZ22wK8QKQGvcnVez46vL08HZ7/rqOk3WcW+phvHZIEnj4TLe87bG7SD9NkkPB5dp8hwEo4EllsaMg1tpGfOjx6j0hrXwhK7D0k2RfwUAAP//r6JgkWQEAAA=\n\n- path: /etc/systemd/system/kms.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4SQsW4yMRCEez/FvYDxX/46yUWipEgLRCkIhTEDrM5nX3bXEHj66I6kOUVKY3lGn2alb/OaSbfmCRKZBqWSfbhVRteLWeKjEkP8vsQOvBDwmSLMw0HBPkMvhTtbcqKMhQY+Qo3ZrO7U1qyvA7xQPySYJUQDqw/pEq5i1tSjVF2N3QrR/zPPn4hT9K4Kux1ld7/acM3Nu2kaazPUn4rodzyXVHt4VwZtx2dWQ6Pr6g6coZB2ln+BRZKLYBUXgx0/dKAYFLKIrO3fyGzyHNgl2rlLCEdkbefFhDNpuJ1c91/spN12vbRpXBxVvmTRkNLWvIWs2D9efV+Tkq0C/hH+FQAA//884M3mwQEAAA==\n\n\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n    set -e\n\n\n\n    sed -i \"s|<kubernetesAddonManagerSpec>|',variables('kubernetesAddonManagerSpec'),'|g\" \"/etc/kubernetes/manifests/kube-addon-manager.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g; s|<kubeClusterCidr>|',variables('kubeClusterCidr'),'|g\" \"/etc/kubernetes/addons/kube-proxy-daemonset.yaml\"\n    sed -i \"s|<kubernetesKubeDNSSpec>|',variables('kubernetesKubeDNSSpec'),'|g; s|<kubernetesDNSMasqSpec>|',variables('kubernetesDNSMasqSpec'),'|g; s|<kubernetesExecHealthzSpec>|',variables('kubernetesExecHealthzSpec'),'|g; s|<kubernetesKubeletClusterDomain>|',variables('kubernetesKubeletClusterDomain'),'|g; s|<kubeDNSServiceIP>|',variables('kubeDNSServiceIP'),'|g\" \"/etc/kubernetes/addons/kube-dns-deployment.yaml\"\n    sed -i \"s|<kubernetesHeapsterSpec>|',variables('kubernetesHeapsterSpec'),'|g; s|<kubernetesAddonResizerSpec>|',variables('kubernetesAddonResizerSpec'),'|g\" \"/etc/kubernetes/addons/kube-heapster-deployment.yaml\"\n\n\n    sed -i \"s|<kubernetesDashboardSpec>|',variables('kubernetesDashboardSpec'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardCPURequests>|',variables('kubernetesDashboardCPURequests'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardMemoryRequests>|',variables('kubernetesDashboardMemoryRequests'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardCPULimit>|',variables('kubernetesDashboardCPULimit'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardMemoryLimit>|',variables('kubernetesDashboardMemoryLimit'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n\n\n\n    sed -i \"s|<kubernetesTillerSpec>|',variables('kubernetesTillerSpec'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerCPURequests>|',variables('kubernetesTillerCPURequests'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMemoryRequests>|',variables('kubernetesTillerMemoryRequests'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerCPULimit>|',variables('kubernetesTillerCPULimit'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMemoryLimit>|',variables('kubernetesTillerMemoryLimit'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMaxHistory>|',variables('kubernetesTillerMaxHistory'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n\n\n\n\n\n\n\n\n\n    sed -i \"s|<kubernetesMetricsServerSpec>|',variables('kubernetesMetricsServerSpec'),'|g\" \"/etc/kubernetes/addons/kube-metrics-server-deployment.yaml\"\n\n\n\n\n\n\n\n    sed -i \"s|<kubernetesControllerManagerConfig>|\\\"--allocate-node-cidrs=true\\\", \\\"--cloud-config=/etc/kubernetes/azure.json\\\", \\\"--cloud-provider=azure\\\", \\\"--cluster-cidr=10.244.0.0/16\\\", \\\"--cluster-name=tddevelopment\\\", \\\"--cluster-signing-cert-file=/etc/kubernetes/certs/ca.crt\\\", \\\"--cluster-signing-key-file=/etc/kubernetes/certs/ca.key\\\", \\\"--feature-gates=ServiceNodeExclusion=true\\\", \\\"--kubeconfig=/var/lib/kubelet/kubeconfig\\\", \\\"--leader-elect=true\\\", \\\"--node-monitor-grace-period=40s\\\", \\\"--pod-eviction-timeout=5m0s\\\", \\\"--profiling=false\\\", \\\"--root-ca-file=/etc/kubernetes/certs/ca.crt\\\", \\\"--route-reconciliation-period=10s\\\", \\\"--service-account-private-key-file=/etc/kubernetes/certs/apiserver.key\\\", \\\"--terminated-pod-gc-threshold=5000\\\", \\\"--use-service-account-credentials=true\\\", \\\"--v=2\\\"|g\" \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n    sed -i \"s|<kubernetesAPIServerConfig>|\\\"--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,DenyEscalatingExec,AlwaysPullImages\\\", \\\"--advertise-address=<kubernetesAPIServerIP>\\\", \\\"--allow-privileged=true\\\", \\\"--anonymous-auth=false\\\", \\\"--audit-log-maxage=30\\\", \\\"--audit-log-maxbackup=10\\\", \\\"--audit-log-maxsize=100\\\", \\\"--audit-log-path=/var/log/audit.log\\\", \\\"--audit-policy-file=/etc/kubernetes/manifests/audit-policy.yaml\\\", \\\"--authorization-mode=Node,RBAC\\\", \\\"--bind-address=0.0.0.0\\\", \\\"--client-ca-file=/etc/kubernetes/certs/ca.crt\\\", \\\"--cloud-config=/etc/kubernetes/azure.json\\\", \\\"--cloud-provider=azure\\\", \\\"--etcd-cafile=/etc/kubernetes/certs/ca.crt\\\", \\\"--etcd-certfile=/etc/kubernetes/certs/etcdclient.crt\\\", \\\"--etcd-keyfile=/etc/kubernetes/certs/etcdclient.key\\\", \\\"--etcd-servers=https://127.0.0.1:2379\\\", \\\"--insecure-port=8080\\\", \\\"--kubelet-client-certificate=/etc/kubernetes/certs/client.crt\\\", \\\"--kubelet-client-key=/etc/kubernetes/certs/client.key\\\", \\\"--profiling=false\\\", \\\"--proxy-client-cert-file=/etc/kubernetes/certs/proxy.crt\\\", \\\"--proxy-client-key-file=/etc/kubernetes/certs/proxy.key\\\", \\\"--repair-malformed-updates=false\\\", \\\"--requestheader-allowed-names=\\\", \\\"--requestheader-client-ca-file=/etc/kubernetes/certs/proxy-ca.crt\\\", \\\"--requestheader-extra-headers-prefix=X-Remote-Extra-\\\", \\\"--requestheader-group-headers=X-Remote-Group\\\", \\\"--requestheader-username-headers=X-Remote-User\\\", \\\"--secure-port=443\\\", \\\"--service-account-key-file=/etc/kubernetes/certs/apiserver.key\\\", \\\"--service-account-lookup=true\\\", \\\"--service-cluster-ip-range=10.0.0.0/16\\\", \\\"--storage-backend=etcd3\\\", \\\"--tls-cert-file=/etc/kubernetes/certs/apiserver.crt\\\", \\\"--tls-private-key-file=/etc/kubernetes/certs/apiserver.key\\\", \\\"--v=4\\\"|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"s|<kubernetesSchedulerConfig>|\\\"--kubeconfig=/var/lib/kubelet/kubeconfig\\\", \\\"--leader-elect=true\\\", \\\"--profiling=false\\\", \\\"--v=2\\\"|g\" \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n    sed -i \"s|<kubernetesAPIServerIP>|',variables('kubernetesAPIServerIP'),'|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n\n    sed -i \"s|apparmor_parser|d|g\" \"/etc/systemd/system/kubelet.service\"\n\n\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\n- path: \"/opt/azure/containers/mountetcd.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('mountetcdScript'),'\n\n- path: \"/etc/systemd/system/etcd.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=etcd - highly-available key value store\n    Documentation=https://github.com/coreos/etcd\n    Documentation=man:etcd\n    After=network.target\n    Wants=network-online.target\n    [Service]\n    Environment=DAEMON_ARGS=\n    Environment=ETCD_NAME=%H\n    Environment=ETCD_DATA_DIR=\n    EnvironmentFile=-/etc/default/%p\n    Type=notify\n    User=etcd\n    PermissionsStartOnly=true\n    ExecStart=/usr/bin/etcd $DAEMON_ARGS\n    Restart=always\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/opt/azure/containers/setup-etcd.sh\"\n  permissions: \"0744\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n    set -x\n    source /opt/azure/containers/provision_source.sh\n    ETCD_VER=v',variables('etcdVersion'),'\n    DOWNLOAD_URL=',variables('etcdDownloadURLBase'),'\n    retrycmd_get_tarball 60 1 /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz ${DOWNLOAD_URL}/etcd-${ETCD_VER}-linux-amd64.tar.gz\n    tar xzvf /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz -C /usr/bin/ --strip-components=1\n    systemctl daemon-reload\n    systemctl enable etcd.service\n    sudo sed -i \"1iETCDCTL_ENDPOINTS=https://127.0.0.1:2379\" /etc/environment\n    sudo sed -i \"1iETCDCTL_CA_FILE=',variables('etcdCaFilepath'),'\" /etc/environment\n    sudo sed -i \"1iETCDCTL_KEY_FILE=',variables('etcdClientKeyFilepath'),'\" /etc/environment\n    sudo sed -i \"1iETCDCTL_CERT_FILE=',variables('etcdClientCertFilepath'),'\" /etc/environment\n\n\nruncmd:\n# the first arg is the number of retries, the second arg is the wait duration between two retries and the rest of the args are the cmd to run\n- set -x\n- . /opt/azure/containers/provision_source.sh\n- wait_for_file 1800 1 /opt/azure/containers/certs.ready\n- /opt/azure/containers/setup-etcd.sh > /opt/azure/containers/setup-etcd.log 2>&1\n- retrycmd_if_failure 20 5 5 apt-mark hold walinuxagent \n- /bin/echo DAEMON_ARGS=--name \"',variables('masterVMNames')[copyIndex(variables('masterOffset'))],'\" --peer-client-cert-auth --peer-trusted-ca-file=',variables('etcdCaFilepath'),' --peer-cert-file=',variables('etcdPeerCertFilepath')[copyIndex(variables('masterOffset'))],' --peer-key-file=',variables('etcdPeerKeyFilepath')[copyIndex(variables('masterOffset'))],' --initial-advertise-peer-urls \"',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\" --listen-peer-urls \"',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\" --client-cert-auth --trusted-ca-file=',variables('etcdCaFilepath'),' --cert-file=',variables('etcdServerCertFilepath'),' --key-file=',variables('etcdServerKeyFilepath'),' --advertise-client-urls \"',variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))],'\" --listen-client-urls \"',concat(variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))], ',https://127.0.0.1:', variables('masterEtcdClientPort')),'\" --initial-cluster-token \"k8s-etcd-cluster\" --initial-cluster ',variables('masterEtcdClusterStates')[div(variables('masterCount'), 2)],' --data-dir \"/var/lib/etcddisk\" --initial-cluster-state \"new\" | tee -a /etc/default/etcd\n- /opt/azure/containers/mountetcd.sh\n- /bin/chown -R etcd:etcd /var/lib/etcddisk\n- systemctl stop etcd\n- systemctl daemon-reload\n- retrycmd_if_failure 100 1 10 systemctl daemon-reload && systemctl restart etcd\n- MEMBER=\"$(sudo etcdctl member list | grep -E ',variables('masterVMNames')[copyIndex(variables('masterOffset'))],' | cut -d',variables('singleQuote'),':',variables('singleQuote'),' -f 1)\"\n- sudo etcdctl member update ${MEMBER} ',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\n- retrycmd_if_failure 5 5 10 curl --cacert /etc/kubernetes/certs/ca.crt --cert /etc/kubernetes/certs/etcdclient.crt --key /etc/kubernetes/certs/etcdclient.key --retry 5 --retry-delay 10 --retry-max-time 10 --max-time 60 \"',variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))],'\"/v2/machines\n- apt_get_update\n- retrycmd_if_failure 5 10 120 apt-get install -y apt-transport-https ca-certificates iptables iproute2 socat util-linux mount ebtables ethtool init-system-helpers\n- retrycmd_if_failure_no_stats 180 1 5 curl -fsSL https://aptdocker.azureedge.net/gpg > /tmp/aptdocker.gpg\n- cat /tmp/aptdocker.gpg | apt-key add -\n- echo \"deb ',variables('dockerEngineDownloadRepo'),' ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- apt_get_update\n- retrycmd_if_failure 20 10 120 apt-get install -y ebtables docker-engine\n- echo \"ExecStartPost=/sbin/iptables -P FORWARD ACCEPT\" >> /etc/systemd/system/docker.service.d/exec_start.conf\n- touch /opt/azure/containers/dockerinstall.complete\n- mkdir -p /etc/kubernetes/manifests\n- usermod -aG docker ',variables('username'),'\n- /usr/lib/apt/apt.systemd.daily\n\n- bash /etc/kubernetes/generate-proxy-certs.sh\n\n- retrycmd_if_failure 20 5 5 apt-mark unhold walinuxagent\n- apt-mark unhold walinuxagent\n- touch /opt/azure/containers/runcmd.complete\n\n'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "keyData": "[variables('sshPublicKeyData')]",
                                    "path": "[variables('sshKeyPath')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "dataDisks": [
                        {
                            "createOption": "Empty",
                            "diskSizeGB": "[variables('etcdDiskSizeGB')]",
                            "lun": 0,
                            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')),'-etcddisk')]"
                        }
                    ],
                    "imageReference": {
                        "offer": "[variables('osImageOffer')]",
                        "publisher": "[variables('osImagePublisher')]",
                        "sku": "[variables('osImageSku')]",
                        "version": "[variables('osImageVersion')]"
                    },
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                }
            },
            "tags": {
                "creationSource": "[concat(variables('generatorCode'), '-', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
                "orchestrator": "[variables('orchestratorNameVersionTag')]",
                "poolName": "master",
                "resourceNameSuffix": "[variables('nameSuffix')]"
            },
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
                "name": "vmLoopNode"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')),'/cse', '-master-', copyIndex(variables('masterOffset')))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' ',variables('provisionScriptParametersMaster'), ' MASTER_INDEX=',copyIndex(variables('masterOffset')),' /usr/bin/nohup /bin/bash -c \"stat /opt/azure/containers/provision.complete > /dev/null 2>&1 || /bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1\"')]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {},
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "type": "Microsoft.Compute/virtualMachines/extensions"
        }
    ],
    "outputs": {
        "agentStorageAccountPrefixes": {
            "type": "array",
            "value": "[variables('storageAccountPrefixes')]"
        },
        "agentStorageAccountSuffix": {
            "type": "string",
            "value": "[variables('storageAccountBaseName')]"
        },
        "agentpri2StorageAccountCount": {
            "type": "int",
            "value": "[variables('agentpri2StorageAccountsCount')]"
        },
        "agentpri2StorageAccountOffset": {
            "type": "int",
            "value": "[variables('agentpri2StorageAccountOffset')]"
        },
        "agentpri2SubnetName": {
            "type": "string",
            "value": "[variables('agentpri2SubnetName')]"
        },
        "agentpriStorageAccountCount": {
            "type": "int",
            "value": "[variables('agentpriStorageAccountsCount')]"
        },
        "agentpriStorageAccountOffset": {
            "type": "int",
            "value": "[variables('agentpriStorageAccountOffset')]"
        },
        "agentpriSubnetName": {
            "type": "string",
            "value": "[variables('agentpriSubnetName')]"
        },
        "masterFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
        },
        "primaryAvailabilitySetName": {
            "type": "string",
            "value": "[variables('primaryAvailabilitySetName')]"
        },
        "resourceGroup": {
            "type": "string",
            "value": "[variables('resourceGroup')]"
        },
        "routeTableName": {
            "type": "string",
            "value": "[variables('routeTableName')]"
        },
        "securityGroupName": {
            "type": "string",
            "value": "[variables('nsgName')]"
        },
        "subnetName": {
            "type": "string",
            "value": "[variables('subnetName')]"
        },
        "virtualNetworkName": {
            "type": "string",
            "value": "[variables('virtualNetworkName')]"
        }
    }
}