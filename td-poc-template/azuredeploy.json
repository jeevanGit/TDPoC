{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "agentpri2Count": {
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100
            ],
            "defaultValue": 2,
            "metadata": {
                "description": "The number of agents for the cluster.  This value can be from 1 to 100"
            },
            "type": "int"
        },
        "agentpri2Offset": {
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99
            ],
            "defaultValue": 0,
            "metadata": {
                "description": "The offset into the agent pool where to start creating agents.  This value can be from 0 to 99, but must be less than agentCount"
            },
            "type": "int"
        },
        "agentpri2VMSize": {
            "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A10",
                "Standard_A11",
                "Standard_A1_v2",
                "Standard_A2",
                "Standard_A2_v2",
                "Standard_A2m_v2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A4_v2",
                "Standard_A4m_v2",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A8_v2",
                "Standard_A8m_v2",
                "Standard_A9",
                "Standard_B1ms",
                "Standard_B1s",
                "Standard_B2ms",
                "Standard_B2s",
                "Standard_B4ms",
                "Standard_B8ms",
                "Standard_D1",
                "Standard_D11",
                "Standard_D11_v2",
                "Standard_D11_v2_Promo",
                "Standard_D12",
                "Standard_D12_v2",
                "Standard_D12_v2_Promo",
                "Standard_D13",
                "Standard_D13_v2",
                "Standard_D13_v2_Promo",
                "Standard_D14",
                "Standard_D14_v2",
                "Standard_D14_v2_Promo",
                "Standard_D15_v2",
                "Standard_D16_v3",
                "Standard_D16s_v3",
                "Standard_D1_v2",
                "Standard_D2",
                "Standard_D2_v2",
                "Standard_D2_v2_Promo",
                "Standard_D2_v3",
                "Standard_D2s_v3",
                "Standard_D3",
                "Standard_D32_v3",
                "Standard_D32s_v3",
                "Standard_D3_v2",
                "Standard_D3_v2_Promo",
                "Standard_D4",
                "Standard_D4_v2",
                "Standard_D4_v2_Promo",
                "Standard_D4_v3",
                "Standard_D4s_v3",
                "Standard_D5_v2",
                "Standard_D5_v2_Promo",
                "Standard_D64_v3",
                "Standard_D64s_v3",
                "Standard_D8_v3",
                "Standard_D8s_v3",
                "Standard_DS1",
                "Standard_DS11",
                "Standard_DS11_v2",
                "Standard_DS11_v2_Promo",
                "Standard_DS12",
                "Standard_DS12_v2",
                "Standard_DS12_v2_Promo",
                "Standard_DS13",
                "Standard_DS13-2_v2",
                "Standard_DS13-4_v2",
                "Standard_DS13_v2",
                "Standard_DS13_v2_Promo",
                "Standard_DS14",
                "Standard_DS14-4_v2",
                "Standard_DS14-8_v2",
                "Standard_DS14_v2",
                "Standard_DS14_v2_Promo",
                "Standard_DS15_v2",
                "Standard_DS1_v2",
                "Standard_DS2",
                "Standard_DS2_v2",
                "Standard_DS2_v2_Promo",
                "Standard_DS3",
                "Standard_DS3_v2",
                "Standard_DS3_v2_Promo",
                "Standard_DS4",
                "Standard_DS4_v2",
                "Standard_DS4_v2_Promo",
                "Standard_DS5_v2",
                "Standard_DS5_v2_Promo",
                "Standard_E16_v3",
                "Standard_E16s_v3",
                "Standard_E2_v3",
                "Standard_E2s_v3",
                "Standard_E32-16s_v3",
                "Standard_E32-8s_v3",
                "Standard_E32_v3",
                "Standard_E32s_v3",
                "Standard_E4_v3",
                "Standard_E4s_v3",
                "Standard_E64-16s_v3",
                "Standard_E64-32s_v3",
                "Standard_E64_v3",
                "Standard_E64s_v3",
                "Standard_E8_v3",
                "Standard_E8s_v3",
                "Standard_F1",
                "Standard_F16",
                "Standard_F16s",
                "Standard_F16s_v2",
                "Standard_F1s",
                "Standard_F2",
                "Standard_F2s",
                "Standard_F2s_v2",
                "Standard_F32s_v2",
                "Standard_F4",
                "Standard_F4s",
                "Standard_F4s_v2",
                "Standard_F64s_v2",
                "Standard_F72s_v2",
                "Standard_F8",
                "Standard_F8s",
                "Standard_F8s_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS4-4",
                "Standard_GS4-8",
                "Standard_GS5",
                "Standard_GS5-16",
                "Standard_GS5-8",
                "Standard_H16",
                "Standard_H16m",
                "Standard_H16mr",
                "Standard_H16r",
                "Standard_H8",
                "Standard_H8m",
                "Standard_L16s",
                "Standard_L32s",
                "Standard_L4s",
                "Standard_L8s",
                "Standard_M128-32ms",
                "Standard_M128-64ms",
                "Standard_M128ms",
                "Standard_M128s",
                "Standard_M64-16ms",
                "Standard_M64-32ms",
                "Standard_M64ms",
                "Standard_M64s",
                "Standard_NC12",
                "Standard_NC12s_v2",
                "Standard_NC12s_v3",
                "Standard_NC24",
                "Standard_NC24r",
                "Standard_NC24rs_v2",
                "Standard_NC24rs_v3",
                "Standard_NC24s_v2",
                "Standard_NC24s_v3",
                "Standard_NC6",
                "Standard_NC6s_v2",
                "Standard_NC6s_v3",
                "Standard_ND12s",
                "Standard_ND24rs",
                "Standard_ND24s",
                "Standard_ND6s",
                "Standard_NV12",
                "Standard_NV24",
                "Standard_NV6"
            ],
            "defaultValue": "Standard_D2_v2",
            "metadata": {
                "description": "The size of the Virtual Machine."
            },
            "type": "string"
        },
        "agentpri2VnetSubnetID": {
            "metadata": {
                "description": "Sets the vnet subnet of agent pool 'agentpri2'."
            },
            "type": "string",
            "defaultValue": "/subscriptions/e39b9baa-50b5-4665-8297-2fa801ed1fa4/resourceGroups/td-poc-rsg/providers/Microsoft.Network/virtualNetworks/td-poc-vnet/subnets/agent-dev"
        },
        "agentpri2osImageName": {
            "defaultValue": "",
            "metadata": {
                "description": "Name of a Linux OS image. Needs to be used in conjuction with osImageResourceGroup."
            },
            "type": "string"
        },
        "agentpri2osImageOffer": {
            "defaultValue": "UbuntuServer",
            "metadata": {
                "description": "Linux OS image type."
            },
            "type": "string"
        },
        "agentpri2osImagePublisher": {
            "defaultValue": "Canonical",
            "metadata": {
                "description": "OS image publisher."
            },
            "type": "string"
        },
        "agentpri2osImageResourceGroup": {
            "defaultValue": "",
            "metadata": {
                "description": "Resource group of a Linux OS image. Needs to be used in conjuction with osImageName."
            },
            "type": "string"
        },
        "agentpri2osImageSKU": {
            "defaultValue": "16.04-LTS",
            "metadata": {
                "description": "OS image SKU."
            },
            "type": "string"
        },
        "agentpri2osImageVersion": {
            "defaultValue": "16.04.201804050",
            "metadata": {
                "description": "OS image version."
            },
            "type": "string"
        },
        "agentpriCount": {
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100
            ],
            "defaultValue": 2,
            "metadata": {
                "description": "The number of agents for the cluster.  This value can be from 1 to 100"
            },
            "type": "int"
        },
        "agentpriOffset": {
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99
            ],
            "defaultValue": 0,
            "metadata": {
                "description": "The offset into the agent pool where to start creating agents.  This value can be from 0 to 99, but must be less than agentCount"
            },
            "type": "int"
        },
        "agentpriVMSize": {
            "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A10",
                "Standard_A11",
                "Standard_A1_v2",
                "Standard_A2",
                "Standard_A2_v2",
                "Standard_A2m_v2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A4_v2",
                "Standard_A4m_v2",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A8_v2",
                "Standard_A8m_v2",
                "Standard_A9",
                "Standard_B1ms",
                "Standard_B1s",
                "Standard_B2ms",
                "Standard_B2s",
                "Standard_B4ms",
                "Standard_B8ms",
                "Standard_D1",
                "Standard_D11",
                "Standard_D11_v2",
                "Standard_D11_v2_Promo",
                "Standard_D12",
                "Standard_D12_v2",
                "Standard_D12_v2_Promo",
                "Standard_D13",
                "Standard_D13_v2",
                "Standard_D13_v2_Promo",
                "Standard_D14",
                "Standard_D14_v2",
                "Standard_D14_v2_Promo",
                "Standard_D15_v2",
                "Standard_D16_v3",
                "Standard_D16s_v3",
                "Standard_D1_v2",
                "Standard_D2",
                "Standard_D2_v2",
                "Standard_D2_v2_Promo",
                "Standard_D2_v3",
                "Standard_D2s_v3",
                "Standard_D3",
                "Standard_D32_v3",
                "Standard_D32s_v3",
                "Standard_D3_v2",
                "Standard_D3_v2_Promo",
                "Standard_D4",
                "Standard_D4_v2",
                "Standard_D4_v2_Promo",
                "Standard_D4_v3",
                "Standard_D4s_v3",
                "Standard_D5_v2",
                "Standard_D5_v2_Promo",
                "Standard_D64_v3",
                "Standard_D64s_v3",
                "Standard_D8_v3",
                "Standard_D8s_v3",
                "Standard_DS1",
                "Standard_DS11",
                "Standard_DS11_v2",
                "Standard_DS11_v2_Promo",
                "Standard_DS12",
                "Standard_DS12_v2",
                "Standard_DS12_v2_Promo",
                "Standard_DS13",
                "Standard_DS13-2_v2",
                "Standard_DS13-4_v2",
                "Standard_DS13_v2",
                "Standard_DS13_v2_Promo",
                "Standard_DS14",
                "Standard_DS14-4_v2",
                "Standard_DS14-8_v2",
                "Standard_DS14_v2",
                "Standard_DS14_v2_Promo",
                "Standard_DS15_v2",
                "Standard_DS1_v2",
                "Standard_DS2",
                "Standard_DS2_v2",
                "Standard_DS2_v2_Promo",
                "Standard_DS3",
                "Standard_DS3_v2",
                "Standard_DS3_v2_Promo",
                "Standard_DS4",
                "Standard_DS4_v2",
                "Standard_DS4_v2_Promo",
                "Standard_DS5_v2",
                "Standard_DS5_v2_Promo",
                "Standard_E16_v3",
                "Standard_E16s_v3",
                "Standard_E2_v3",
                "Standard_E2s_v3",
                "Standard_E32-16s_v3",
                "Standard_E32-8s_v3",
                "Standard_E32_v3",
                "Standard_E32s_v3",
                "Standard_E4_v3",
                "Standard_E4s_v3",
                "Standard_E64-16s_v3",
                "Standard_E64-32s_v3",
                "Standard_E64_v3",
                "Standard_E64s_v3",
                "Standard_E8_v3",
                "Standard_E8s_v3",
                "Standard_F1",
                "Standard_F16",
                "Standard_F16s",
                "Standard_F16s_v2",
                "Standard_F1s",
                "Standard_F2",
                "Standard_F2s",
                "Standard_F2s_v2",
                "Standard_F32s_v2",
                "Standard_F4",
                "Standard_F4s",
                "Standard_F4s_v2",
                "Standard_F64s_v2",
                "Standard_F72s_v2",
                "Standard_F8",
                "Standard_F8s",
                "Standard_F8s_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS4-4",
                "Standard_GS4-8",
                "Standard_GS5",
                "Standard_GS5-16",
                "Standard_GS5-8",
                "Standard_H16",
                "Standard_H16m",
                "Standard_H16mr",
                "Standard_H16r",
                "Standard_H8",
                "Standard_H8m",
                "Standard_L16s",
                "Standard_L32s",
                "Standard_L4s",
                "Standard_L8s",
                "Standard_M128-32ms",
                "Standard_M128-64ms",
                "Standard_M128ms",
                "Standard_M128s",
                "Standard_M64-16ms",
                "Standard_M64-32ms",
                "Standard_M64ms",
                "Standard_M64s",
                "Standard_NC12",
                "Standard_NC12s_v2",
                "Standard_NC12s_v3",
                "Standard_NC24",
                "Standard_NC24r",
                "Standard_NC24rs_v2",
                "Standard_NC24rs_v3",
                "Standard_NC24s_v2",
                "Standard_NC24s_v3",
                "Standard_NC6",
                "Standard_NC6s_v2",
                "Standard_NC6s_v3",
                "Standard_ND12s",
                "Standard_ND24rs",
                "Standard_ND24s",
                "Standard_ND6s",
                "Standard_NV12",
                "Standard_NV24",
                "Standard_NV6"
            ],
            "defaultValue": "Standard_D2_v2",
            "metadata": {
                "description": "The size of the Virtual Machine."
            },
            "type": "string"
        },
        "agentpriVnetSubnetID": {
            "metadata": {
                "description": "Sets the vnet subnet of agent pool 'agentpri'."
            },
            "type": "string",
            "defaultValue": "/subscriptions/e39b9baa-50b5-4665-8297-2fa801ed1fa4/resourceGroups/td-poc-rsg/providers/Microsoft.Network/virtualNetworks/td-poc-vnet/subnets/agent-dev"
        },
        "agentpriosImageName": {
            "defaultValue": "",
            "metadata": {
                "description": "Name of a Linux OS image. Needs to be used in conjuction with osImageResourceGroup."
            },
            "type": "string"
        },
        "agentpriosImageOffer": {
            "defaultValue": "UbuntuServer",
            "metadata": {
                "description": "Linux OS image type."
            },
            "type": "string"
        },
        "agentpriosImagePublisher": {
            "defaultValue": "Canonical",
            "metadata": {
                "description": "OS image publisher."
            },
            "type": "string"
        },
        "agentpriosImageResourceGroup": {
            "defaultValue": "",
            "metadata": {
                "description": "Resource group of a Linux OS image. Needs to be used in conjuction with osImageName."
            },
            "type": "string"
        },
        "agentpriosImageSKU": {
            "defaultValue": "16.04-LTS",
            "metadata": {
                "description": "OS image SKU."
            },
            "type": "string"
        },
        "agentpriosImageVersion": {
            "defaultValue": "16.04.201804050",
            "metadata": {
                "description": "OS image version."
            },
            "type": "string"
        },
        "apiServerCertificate": {
            "metadata": {
                "description": "The base 64 server certificate used on the master"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSU0zVENDQ3NXZ0F3SUJBZ0lRWEs5ZVFrSFlUUkN5Q1RKNVExN0pTekFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB4T0RBME1qY3hORFEzTlRaYUZ3MHlNREEwTWpZeE5EUTNOVFphTUJReApFakFRQmdOVkJBTVRDV0Z3YVhObGNuWmxjakNDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DCmdnSUJBTExUNUNpTzBjVFp2akdPMnBCNlZKWkxTNHhnK2w1YXlLZFpCQnYyVjBNZ1c2QnVObmFOUERNbnhuZFIKQ0NxWmZNWENYS1o1TjZMczc4TWc2aXlpMzVmS3lyY1RGY1dzV3RVNitEWW9QZW0ranZEdnBjMWFMcjczWk50VQpGVVkwZDRWcUFGUDl2VzFyVlZxa2gvelhvajZjaWtxTG1ZTVE5NExTNld3QVd3bWxKdUQxUUNDUGhJT0Iwc1BMCnloU2NlQTNuVW1xbWVjZXZaUXU0T2pDUm9QY2dkdVRBOGxyRy9JWlR3TU1wVkE3YWZjYldyN1dGWTBUT0lsdUUKcW45OWs3UzN2Q21Fc3ZKeHJkamp2bWxPazFzMWZpa0NlclZ3Sm9saFJrWU9hR2ZXSG1velN1bm5hYVdKenZXOQpBc3JIME5MdlFZOVlZNVBvT2ovWkV3c2RBQnpzODNUQ0wzaUlXNXExNmxJVHI5UWQwY2lwbS9Xd1I1eU9taGpyCnRKeDExWFFNcWtIand5eDZWU0pXRUpUS1pXZWFCTTZiYmRYTGxabHRMY3lXM09EU3ppTmNza0FQa3BRZVdUWUoKSi9GcFZ1K09OZmNrM3d6T0lkV2l1NnF1VklIczdmVmxqT011U2xzdFJINVdnc0V5Zks3dGVkdHRQaXR0VStUSQpHdiswa1NhQ0x2K0xobndkWlFhdDIvSHVNRnFraDlUOGNWcnpCVCtPQVdPajMraHpiSERzRFBQdHZ4U3VjUktqCmloOEdERUkxd1dDNVUxS0xFUG5zcnFURzhiMmFTUHV1dVUrNFpmY3hvbXl2Z3lpSkZwKzJmb0FrNG40UVp0dC8KZGVMMU53N3VCU1daVlZjSEMyM3J5cTlNZS8wUTc1SXpmRnJCenFBVFRJL3VuMEpiQWdNQkFBR2pnZ2d3TUlJSQpMREFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0V3REFZRFZSMFRBUUgvCkJBSXdBRENDQi9VR0ExVWRFUVNDQit3d2dnZm9naTEwWkhCeWIyUjFZM1JwYjI0dVlYVnpkSEpoYkdsaFpXRnoKZEM1amJHOTFaR0Z3Y0M1aGVuVnlaUzVqYjIyQ01uUmtjSEp2WkhWamRHbHZiaTVoZFhOMGNtRnNhV0Z6YjNWMAphR1ZoYzNRdVkyeHZkV1JoY0hBdVlYcDFjbVV1WTI5dGdpdDBaSEJ5YjJSMVkzUnBiMjR1WW5KaGVtbHNjMjkxCmRHZ3VZMnh2ZFdSaGNIQXVZWHAxY21VdVkyOXRnaTEwWkhCeWIyUjFZM1JwYjI0dVkyRnVZV1JoWTJWdWRISmgKYkM1amJHOTFaR0Z3Y0M1aGVuVnlaUzVqYjIyQ0tuUmtjSEp2WkhWamRHbHZiaTVqWVc1aFpHRmxZWE4wTG1OcwpiM1ZrWVhCd0xtRjZkWEpsTG1OdmJZSXNkR1J3Y205a2RXTjBhVzl1TG1ObGJuUnlZV3hwYm1ScFlTNWpiRzkxClpHRndjQzVoZW5WeVpTNWpiMjJDS1hSa2NISnZaSFZqZEdsdmJpNWpaVzUwY21Gc2RYTXVZMnh2ZFdSaGNIQXUKWVhwMWNtVXVZMjl0Z2kxMFpIQnliMlIxWTNScGIyNHVZMlZ1ZEhKaGJIVnpaWFZoY0M1amJHOTFaR0Z3Y0M1aAplblZ5WlM1amIyMkNNSFJrY0hKdlpIVmpkR2x2Ymk1amFHbHVZV1ZoYzNRdVkyeHZkV1JoY0hBdVkyaHBibUZqCmJHOTFaR0Z3YVM1amJvSXhkR1J3Y205a2RXTjBhVzl1TG1Ob2FXNWhibTl5ZEdndVkyeHZkV1JoY0hBdVkyaHAKYm1GamJHOTFaR0Z3YVM1amJvSW9kR1J3Y205a2RXTjBhVzl1TG1WaGMzUmhjMmxoTG1Oc2IzVmtZWEJ3TG1GNgpkWEpsTG1OdmJZSW1kR1J3Y205a2RXTjBhVzl1TG1WaGMzUjFjeTVqYkc5MVpHRndjQzVoZW5WeVpTNWpiMjJDCkozUmtjSEp2WkhWamRHbHZiaTVsWVhOMGRYTXlMbU5zYjNWa1lYQndMbUY2ZFhKbExtTnZiWUlyZEdSd2NtOWsKZFdOMGFXOXVMbVZoYzNSMWN6SmxkV0Z3TG1Oc2IzVmtZWEJ3TG1GNmRYSmxMbU52YllJcGRHUndjbTlrZFdOMAphVzl1TG1waGNHRnVaV0Z6ZEM1amJHOTFaR0Z3Y0M1aGVuVnlaUzVqYjIyQ0tYUmtjSEp2WkhWamRHbHZiaTVxCllYQmhibmRsYzNRdVkyeHZkV1JoY0hBdVlYcDFjbVV1WTI5dGdpeDBaSEJ5YjJSMVkzUnBiMjR1YTI5eVpXRmoKWlc1MGNtRnNMbU5zYjNWa1lYQndMbUY2ZFhKbExtTnZiWUlxZEdSd2NtOWtkV04wYVc5dUxtdHZjbVZoYzI5MQpkR2d1WTJ4dmRXUmhjSEF1WVhwMWNtVXVZMjl0Z2k1MFpIQnliMlIxWTNScGIyNHVibTl5ZEdoalpXNTBjbUZzCmRYTXVZMnh2ZFdSaGNIQXVZWHAxY21VdVkyOXRnaXQwWkhCeWIyUjFZM1JwYjI0dWJtOXlkR2hsZFhKdmNHVXUKWTJ4dmRXUmhjSEF1WVhwMWNtVXVZMjl0Z2k1MFpIQnliMlIxWTNScGIyNHVjMjkxZEdoalpXNTBjbUZzZFhNdQpZMnh2ZFdSaGNIQXVZWHAxY21VdVkyOXRnaTEwWkhCeWIyUjFZM1JwYjI0dWMyOTFkR2hsWVhOMFlYTnBZUzVqCmJHOTFaR0Z3Y0M1aGVuVnlaUzVqYjIyQ0tuUmtjSEp2WkhWamRHbHZiaTV6YjNWMGFHbHVaR2xoTG1Oc2IzVmsKWVhCd0xtRjZkWEpsTG1OdmJZSW5kR1J3Y205a2RXTjBhVzl1TG5WcmMyOTFkR2d1WTJ4dmRXUmhjSEF1WVhwMQpjbVV1WTI5dGdpWjBaSEJ5YjJSMVkzUnBiMjR1ZFd0M1pYTjBMbU5zYjNWa1lYQndMbUY2ZFhKbExtTnZiWUl0CmRHUndjbTlrZFdOMGFXOXVMbmRsYzNSalpXNTBjbUZzZFhNdVkyeHZkV1JoY0hBdVlYcDFjbVV1WTI5dGdpcDAKWkhCeWIyUjFZM1JwYjI0dWQyVnpkR1YxY205d1pTNWpiRzkxWkdGd2NDNWhlblZ5WlM1amIyMkNLWFJrY0hKdgpaSFZqZEdsdmJpNTNaWE4wYVc1a2FXRXVZMnh2ZFdSaGNIQXVZWHAxY21VdVkyOXRnaVowWkhCeWIyUjFZM1JwCmIyNHVkMlZ6ZEhWekxtTnNiM1ZrWVhCd0xtRjZkWEpsTG1OdmJZSW5kR1J3Y205a2RXTjBhVzl1TG5kbGMzUjEKY3pJdVkyeHZkV1JoY0hBdVlYcDFjbVV1WTI5dGdqQjBaSEJ5YjJSMVkzUnBiMjR1WTJocGJtRmxZWE4wTG1OcwpiM1ZrWVhCd0xtTm9hVzVoWTJ4dmRXUmhjR2t1WTI2Q01YUmtjSEp2WkhWamRHbHZiaTVqYUdsdVlXNXZjblJvCkxtTnNiM1ZrWVhCd0xtTm9hVzVoWTJ4dmRXUmhjR2t1WTI2Q05uUmtjSEp2WkhWamRHbHZiaTVuWlhKdFlXNTUKWTJWdWRISmhiQzVqYkc5MVpHRndjQzV0YVdOeWIzTnZablJoZW5WeVpTNWtaWUk0ZEdSd2NtOWtkV04wYVc5dQpMbWRsY20xaGJubHViM0owYUdWaGMzUXVZMnh2ZFdSaGNIQXViV2xqY205emIyWjBZWHAxY21VdVpHV0NOWFJrCmNISnZaSFZqZEdsdmJpNTFjMmR2ZG5acGNtZHBibWxoTG1Oc2IzVmtZWEJ3TG5WeloyOTJZMnh2ZFdSaGNHa3UKYm1WMGdqRjBaSEJ5YjJSMVkzUnBiMjR1ZFhObmIzWnBiM2RoTG1Oc2IzVmtZWEJ3TG5WeloyOTJZMnh2ZFdSaApjR2t1Ym1WMGdqUjBaSEJ5YjJSMVkzUnBiMjR1ZFhObmIzWmhjbWw2YjI1aExtTnNiM1ZrWVhCd0xuVnpaMjkyClkyeHZkV1JoY0drdWJtVjBnakowWkhCeWIyUjFZM1JwYjI0dWRYTm5iM1owWlhoaGN5NWpiRzkxWkdGd2NDNTEKYzJkdmRtTnNiM1ZrWVhCcExtNWxkSUl0ZEdSd2NtOWtkV04wYVc5dUxtWnlZVzVqWldObGJuUnlZV3d1WTJ4dgpkV1JoY0hBdVlYcDFjbVV1WTI5dGdncHJkV0psY201bGRHVnpnaEpyZFdKbGNtNWxkR1Z6TG1SbFptRjFiSFNDCkZtdDFZbVZ5Ym1WMFpYTXVaR1ZtWVhWc2RDNXpkbU9DSkd0MVltVnlibVYwWlhNdVpHVm1ZWFZzZEM1emRtTXUKWTJ4MWMzUmxjaTVzYjJOaGJJSVdhM1ZpWlhKdVpYUmxjeTVyZFdKbExYTjVjM1JsYllJYWEzVmlaWEp1WlhSbApjeTVyZFdKbExYTjVjM1JsYlM1emRtT0NLR3QxWW1WeWJtVjBaWE11YTNWaVpTMXplWE4wWlcwdWMzWmpMbU5zCmRYTjBaWEl1Ykc5allXeUhCQlFBQUFXSEJCUUFBQStIQkFvQUFBRXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUIKQUVLbHBwUlhpRVlIWWlwZG1TbW5DL3kyZUFOMTQraFExa1ZTMU4rZGFCdWRhbGZnN0sxNVM3UFNma1hNaFVyMQpJS0VmcXNnTW9nazdaZ2lUcUl0M1ZIaDgyUUphVDNoMk9iSVVHaVpWYmE1cWZYb2R5TWR0bWcrM1Zrbnk5U3FuClBMNFJNcUk2WXdCUXUvT3FLdE02OW1Gd2FYbTMvdmcwK0xPeWZOOEMweVA1TUtlb1AyQlpGMTR1Rk15VklJKy8KL2lGOUhrT3paaVl1MGdtd205dW9BekFyVjFFUDNXY09Dc1JTRDEvb1hSR2w4WEdINXE2V1BtS3B3SHp6ODE1eQppanJkSGdlZktJY0Q3MGo5alRlMVVpR3RBK0lKL2pUWHd1UkJqTE9aZDhrYVVvNGdGRXh5QVVIeVJDS25iR3lmCkhOdE9DSkxKWms5TFI4VmloV2I1dmxNY2RhZFNEQzV2QUtzT21Ucms3NkFqMFoxdm00SFlwbWRETDZteTd5dFAKVWgybTBPVDUzM3NnQ05jQzRBTGtRL1Izc0hiSmVkRFNjbTcvRkJ6bFRYQ2x0UGh5OFJLaEoybDhaZUxGT05rOApvUXlidlBoYWVhRXpkZXI4YUpTZFNkeVdRS1RGQU94Q08yZ1JhdFF3WktEZHBOaGZIMXA2WEs2a2V2QXI3VUYzCnIzT29NMzU1dkpKSTVJbjRVSDdsTEtlcDVDTTAzT2EzZllGODdiK1dnQzZUUi85a05oZmpxbkR6ZXI4bmhjc1kKVVl1VldEYU4rdTVRYU9ubENaMElMVnM2QjRnekhTREt4Y2xJUFJSdko3NnN1Sm9hek9ocVFYS2JDTU1Edzc1TwpKNmZ3a3VJRWlwUXNNQ3JmM2xtZSs2UjdYUnBadDJ6Ukp5Nm9JVlh5Y3dJMQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
        },
        "apiServerPrivateKey": {
            "metadata": {
                "description": "The base 64 server private key used on the master."
            },
            "type": "securestring",
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBc3RQa0tJN1J4Tm0rTVk3YWtIcFVsa3RMakdENlhscklwMWtFRy9aWFF5QmJvRzQyCmRvMDhNeWZHZDFFSUtwbDh4Y0pjcG5rM291enZ3eURxTEtMZmw4ckt0eE1WeGF4YTFUcjROaWc5NmI2TzhPK2wKelZvdXZ2ZGsyMVFWUmpSM2hXb0FVLzI5Yld0VldxU0gvTmVpUHB5S1NvdVpneEQzZ3RMcGJBQmJDYVVtNFBWQQpJSStFZzRIU3c4dktGSng0RGVkU2FxWjV4NjlsQzdnNk1KR2c5eUIyNU1EeVdzYjhobFBBd3lsVUR0cDl4dGF2CnRZVmpSTTRpVzRTcWYzMlR0TGU4S1lTeThuR3QyT08rYVU2VFd6VitLUUo2dFhBbWlXRkdSZzVvWjlZZWFqTksKNmVkcHBZbk85YjBDeXNmUTB1OUJqMWhqaytnNlA5a1RDeDBBSE96emRNSXZlSWhibXJYcVVoT3YxQjNSeUttYgo5YkJIbkk2YUdPdTBuSFhWZEF5cVFlUERMSHBWSWxZUWxNcGxaNW9FenB0dDFjdVZtVzB0ekpiYzROTE9JMXl5ClFBK1NsQjVaTmdrbjhXbFc3NDQxOXlUZkRNNGgxYUs3cXE1VWdlenQ5V1dNNHk1S1d5MUVmbGFDd1RKOHJ1MTUKMjIwK0syMVQ1TWdhLzdTUkpvSXUvNHVHZkIxbEJxM2I4ZTR3V3FTSDFQeHhXdk1GUDQ0Qlk2UGY2SE5zY093TQo4KzIvRks1eEVxT0tId1lNUWpYQllMbFRVb3NRK2V5dXBNYnh2WnBJKzY2NVQ3aGw5ekdpYksrREtJa1duN1orCmdDVGlmaEJtMjM5MTR2VTNEdTRGSlpsVlZ3Y0xiZXZLcjB4Ny9SRHZrak44V3NIT29CTk1qKzZmUWxzQ0F3RUEKQVFLQ0FnQldOWVFtY1VON0xLVmQ2c28vSUZvcTRqMlhmU0QxMzdvZnd2QVNNdDI2aEp6bmFIcGxDSTFlOCt2ZgpsWGJrWW40ZU1DYk9NbDI1ODVOYWRFR3dKd3kzZHBIblZCSUk2NkFXYjRrOVFvVW1iREVvd2I4aWtqazY0clVDCmJ6U2FWYXpRNmxzaUlvN3hjdThBOVpTQk5jc0hlQnZLK0NXWFk5U09ndkw0bCt0TGFReW5JbFE1M2pZNTE1b3QKdmM2N3hQcXphVEw0S3kxR01LMzd5bUp6QzZHWHdWVFB6cHlIV3FwZWIzM2NGODVvSXJqRDVMZHNRTk9zVmR1RwpWeHlDdlowNVgrSWIrZGJ5dmc3YklsK25FTFJGSWpLaHZvbzljY1dDTVJ6WnBSUjhDbU03TzJNQUJBbVFQakZCCmtrOElSdS9LNElDd2hDSHRLZVQ2NXNFaGVHZVd1dFNUaUQ5bHAzRkRkM0FveU5jL1hzY3YxNzJYNUFmTUU0R3EKZXg1M014ald4VUVocTZORmVaTU1qUWpZdzY3emtmeE9CSVhwaDdsMFZoREhqanRaVUpPVUFnWm85bXhiVzJwQgpVV1liMnhlRkFwcVZRYUYwWlR3Z2JDQWM3RHJpZlZ2N09PMUFQc0xBUWtmck5vb0owenhRRzJ6UHE4T0pLcHpoCmEwdnBXcUFyMVdnM1VFbitSeTdTU2c0b0IwYktWOVo1bmZib3ZncXpMdkZyTVVxMVhMZytZRXc2TDN4VUIwanAKZ3hlMEdNRzdWODNPekl0enNDOWhLQlZaendzU3pJOXRyMnV2TGZmTWN2aVFwRnM3clo4R0VvZ3F2SGNBak1aTwoza25mUHRBNXBSVWZxVmxENlNFUzZ3dW54aXR2c3diNDE1MnpzSHFJTitabHZLalFFUUtDQVFFQXdPWWpENUkrCkxEb1NIaU1pSE9tTlhsekRXQTJPeisxRGxrTEJ3VkhQbkphdC9mYmwxMm5aYzU5K3pCM1B0MWVjMU1acXpYRjcKNmpiMmJBR1oxcTRRMXMybmgreGJDNUhCVGdDd3lITnVleTVGR2VPZUUxY3BLU2FxM1l2bmNicGk2Q1g2T0RNbgo1dUk0ei9ack5UOEpCaHgvVEEyMjdqS0NWOGcwWXkzUzhOL3JhL2ZLU2d6SGgzbE9KL0N4NnZmUkpOTGVsWmpFClBWTFJmTnc2V09UekhNWHZzaVhhR08wamxLdlpVMVlrSXJSc1NhNTVCTjFPSmFxMFdZUlZvYk1vbGFIZXE5NWgKVG1qaVhYU3dnZzlHOHdkYi9FQ0d6cEQySWdCOWx3aXVkY2FUMDZXTnY5dnQ1bmNhcERrV0pOL1FtNVNGYU1peQpTZVFuWGJhMWxvWXVsd0tDQVFFQTdWTmpwWmZ5RzhWbHRuVlV2aHB1TFFqd3gwK1BPenlMYUZjWTlrc2ZCK0ozCnM5cFBjME5iVVE1K1A4T1FnKzJoUnNyWUJramJlc09VdXpoZktYN3JvYnE2NC9BbW0vUFlObENLbW5qK2lYWlcKcDNoSlVKME50V2pOQUtnbFJ5TWlQZHAvM0g4MHBJUWhGNUlnVFNmSEsxNnZLN3JZSmFFaUs5Z2RTMlJRTDM3dwo2c2pDenNMelBrRjRETk80QlF1aWF3RjFGL2dXTVFyYW9aamFIMnVoY2xsWFRFSkE1OGJIc3M3OVNhVm8zeTM5CjhBVEkvaENadi9ydVlIaFM1dWtaU3BRQlFxRWUvQ3ZsWDJCcHc3cHdyTDNtRUF5QkVmdEd5VmpPUFloTis5SmIKNmE5L09yZHpwRG5NNXRVemtDelBUZ2tSSFNydjNtNUlSR3FtMVlxRzNRS0NBUUFBbXppVS9mS3dGT2FsclpxWAoyS3dYRmRlUFdVdVBuOEZNb1owV1RIbUlsbmlwaWJNalFEUHN4eDJRNnE4U2RuWUp2UzNzdzJTT1Vlbm9ZUURvCnlkZEh0WkhIUFpqenFsdWZNU1ZkRysvRzkxaEVRcERtb3FtQWRaeW40WjZ5bnRGY3hYSEo1MjlDcklkZEwvc2EKU2I1dmhIdHA4OGtWYXBjNlMyak92d0FndmJOeHZXK25WKzd3b0JMODBTYmVCRFZtRmp1WTRNZ05JVXVEUnZYdgovWmcrQ09rOStCeDlZNUZ2RURNNHJkYWpQVW54MlZpTUNWNExoRVBZM0MrZ3VIMXlLdllXT0RhNkZsNVB5T1FkCkpJc21qR2xmbTV4UTNlZklKNVE5ZTB1QkYwU3pyNXVJZE5xRWxPOUNnT051N2owcm9BWGpWRzRyQ1VxT1l0cWoKUkh5MUFvSUJBUUMrc0F3VzE3bXUyckxaSWZsUExnbHNvZ3hrK09ZTElLQ2EyN0N3NUxjd0xLVWxtN25PMFVZawpJTk1NQk9TdlBGWWpmWVNKdUN5eHZVaGFEZmRZYmlTQ05IbEtBSUhsT001M0JjdjRSbE91dTZqd3N0T2x0Q3Q1Cm9aVm1lN1JJTGxDckJrOUtLZU53ZE1IcUlIMVh3U2hsRHBVTk8vbkVjbTMwY0pkSkpuYlBVdDNjcUNidTN2RjMKQ2orZGZ0Z1RKY0FBM3BEcEMyczVTSkZXMm13WVp2QzM0bFVrYnUrYnk3cFZUNzl3VnptbWFWdnFhTTNlWmhSRApqeW5OMWFBMjdRQm5UZmlkUXJ5VXZlaDA5QkRITlp5bkQ0WTFTdmJDTGZZNGZlUm95SVp3V2h1RDdvRDUrc0V1CktVc2NCaDZDTDU3NkFvci90cW81UEw5UVNhbDNWdkQ1QW9JQkFFM3QyUDZBNEhDZFBhQkRkZlExelFVUlFURlkKbk5STVdDRFY0bG03VFJPUXdUOWswMTJOR0FXWUN6R3c0TEx5NUNyeng4U1ZLSjN4Y0l1aXlyWVFmUzN2clVXVwpqM0RsOExVbnhSNTJHZjc4OHkwZ3hUZXJkL0ZaNytZM2FqWjMrZWxxbWZvSXh2M1VEY04wSloyTXY5MGZsU1V6CjV5VDFVbUhKaGRVUGdIdXBBOHpIWk1jaGM0ZkxHWmx2RFo4OHA5eE05c0J6aDV2VlZ4VVliWllRTnZCN0xjU2kKWHN4Rm5nVXpycTNJTlZPUlpVbHFkMTNHNStDSmhvK1ZiTThqbUtmc1d4cFRUSGx0Y0hsVzNaSTlsNnAwS3I5eAp5amtLOEg5b2p3L3FWL1pNNUcyVldUcCs2QzJyQk0rUHNHa1lCQXlwNXhFMUlSN2VieWFMR1BhaTlCMD0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
        },
        "caCertificate": {
            "metadata": {
                "description": "The base 64 certificate authority certificate"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUV4ekNDQXErZ0F3SUJBZ0lRZmlBS1NJWUdidEVZL082ME1UbkNqVEFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB4T0RBME1qY3hORFEzTlROYUZ3MHlNREEwTWpZeE5EUTNOVE5hTUEweApDekFKQmdOVkJBTVRBbU5oTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUFyTnhmCmdRbkFZKzgrdGJEQktNM0hzQjM0OGhUeXlZM0RhUHNIZHZ2K0xJQW5ocnJUc3cwdXQzdGdkV0hOVFI1eVMza3kKMVVseFB5T2NuSGdTYXllQVowMkIyc2VGK25lZzZKOWVhbW9pVTd0dzhKazJJNFlMWURFMENOdWxsY2doVndKTAp5QmRKZHg1SG5EZFFKK09CZlF0VkptMDc5ODFSYmp2Ry91K2t1TzVGUzZqaFphcm9OL1JlS0ZXa0M0WnJPK3ljClpHSG05NCtDaVExeEdSMVlleWFrWHk0NXlOazFvYWcySUlCL2pKejdyMmY5QkhtMk1SR0JxaENmdTdxUjNYUHUKMWxLdnVKNkpjOUtrRmRrVElZckxBbWg0NG1rMUloeVhpOE1HenFYRUtVVnBBVTh0YnFKR2NWb0JxamU1bnpGNgpLblQ4Q1draDA1LzhKek5pNVM1K0EvUWFjNlRCZkFsN0RaanpPYnd5eXFVYnR0SUYranYyWXJUbFhoY2VOaW5hCitmc0FVNTdlKzcvc29ZTFZMZkpiQXp1OXBFRUFNaS9qYTRnNjJMMTAxd0cxNWRVNEdWb0JMdEJ5ejVPTHlBRkgKOVBaeVJqaXJEYS9ISXJYelAwemdqWm5mV1pySzFyZElTYWY1bTR6d0o1VXozdlVNS2FGVlQ3UFV2M3hpd0hoegp5clNBMmlwL25mWXdVMDFlN3NVTFdRNkxPUllWTUxTZVQ5RmdkOG5HMkRVeCsxQ0ROSklsVWwzK3pVbnBLdmhPCktSQTFTc2RFcnc1dWZESmhEMWtpc1hMaFBKbmJIUXF5aWZGWEZOSmZiamcra0Q4bW84UDJUYnlNVWU4dzIzZnEKS0lmVnJGWXdJam9VcjludDdpNUxWWElocmRvVjR4MDQ2a0phWFUwQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFILwpCQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFBWEpybWllClhJU2ZGdXRTOFpLZkJYSmRwWEpoanZrUloyRmF2NXJGU1QrMmJFc3NoVzFxckJ1YUo1R3RXTzY0MU42VVdCMm0KRUtZd212NzVzTk1DdGYybGJsYjg3MTZZQ0R5M1BDaXJySVpnbE9OcCsyd0hEYlZsbVlqa0JBNDNRVzBGcGorRApzVjNTUkJ5bG9FWXRiTzVnVGxGekM1YkxpTFlTSHBHblkwTE1lZXFDODJma1NKaWpXbWNJLy9QZHVuMWRGNHVzCkhpek5sbEFLd2dPTEk0V2pYZHZYMDBTMVJGYjJCWWV5d0pTeVZFYkVFNHUxU09CWVIxaFZNQm0xVndvRFMydG4KL201aDFrdCtSMnM4VWdvTFM2bU9EMDY4d1l2WHNSRkxzeWxwd2Y5dGV1eVp4Tys1MUY3RFZQQlZCcVJGYUFUVApkdUxEaWVXTjlRRUxEZjB4NVVnTldmbXZrK3BDTVFtdTRHaXI0RmhJN3FkWmtYV1k0Q2k4RkJ4ZDV1eFRGK1BpCnloVDZKMFp4ZERmRjc5SytXUk81M0oxT2xEWHFGbzhUa3hEYWs3ZHB4amNrMElHV1RhUldFSEZ0M1R2d3dMcnAKZmlvKzR3VU40S3h3VGFvYXdGanh2N0paeG1wSkM0MHhzWHJaOU8xQjYzWFVBWjNlRWFCWkZmZW8vVkZGaUNpdwprcXBJOWx4c1RXUmVkVEQyaGJralVRWkM5d1MvaE45MnZPaXlBWlZSY2NWbVJkTGc1Z1ZvNVNSSm5pSzdyeXpnCnJBbThrRGNsUjI1U0RSNXd5ZGNoTXdHU2xkOEl5WE5CNU5waFpLaDJFUnZqWUNNdG9DWWNMejlGdDF4ZWhOeDgKWkFDdXF0NXZOdXZmRkkvekZwUVgxTHdOb3ZHd05mbDdqNVhyCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
        },
        "caPrivateKey": {
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBck54ZmdRbkFZKzgrdGJEQktNM0hzQjM0OGhUeXlZM0RhUHNIZHZ2K0xJQW5ocnJUCnN3MHV0M3RnZFdITlRSNXlTM2t5MVVseFB5T2NuSGdTYXllQVowMkIyc2VGK25lZzZKOWVhbW9pVTd0dzhKazIKSTRZTFlERTBDTnVsbGNnaFZ3Skx5QmRKZHg1SG5EZFFKK09CZlF0VkptMDc5ODFSYmp2Ry91K2t1TzVGUzZqaApaYXJvTi9SZUtGV2tDNFpyTyt5Y1pHSG05NCtDaVExeEdSMVlleWFrWHk0NXlOazFvYWcySUlCL2pKejdyMmY5CkJIbTJNUkdCcWhDZnU3cVIzWFB1MWxLdnVKNkpjOUtrRmRrVElZckxBbWg0NG1rMUloeVhpOE1HenFYRUtVVnAKQVU4dGJxSkdjVm9CcWplNW56RjZLblQ4Q1draDA1LzhKek5pNVM1K0EvUWFjNlRCZkFsN0RaanpPYnd5eXFVYgp0dElGK2p2MllyVGxYaGNlTmluYStmc0FVNTdlKzcvc29ZTFZMZkpiQXp1OXBFRUFNaS9qYTRnNjJMMTAxd0cxCjVkVTRHVm9CTHRCeXo1T0x5QUZIOVBaeVJqaXJEYS9ISXJYelAwemdqWm5mV1pySzFyZElTYWY1bTR6d0o1VXoKM3ZVTUthRlZUN1BVdjN4aXdIaHp5clNBMmlwL25mWXdVMDFlN3NVTFdRNkxPUllWTUxTZVQ5RmdkOG5HMkRVeAorMUNETkpJbFVsMyt6VW5wS3ZoT0tSQTFTc2RFcnc1dWZESmhEMWtpc1hMaFBKbmJIUXF5aWZGWEZOSmZiamcrCmtEOG1vOFAyVGJ5TVVlOHcyM2ZxS0lmVnJGWXdJam9VcjludDdpNUxWWElocmRvVjR4MDQ2a0phWFUwQ0F3RUEKQVFLQ0FnQTdXLzJyeVJaNCtzb1ZDRnA4VVpYV0E2VGVOSlZlNDBDTVIwKzc2ekxRUXozUGhVNTNPUHFtNVVZdAphT1ZnS3lsaWczOFNRUU1UaEg0ZU9SbFNGS0dDVjlwVXI1bHhkaTBhVk1mT1VSM3lsUFptbUtZL3NxTXJhQm9QClJLWHE5bXVFZm5SWmhLMmtxeEE2TThCaHdqMVFIRmtrTmZTVzFybTAyZkF1MFVwR2V3UHV4RktLWUJNWVMrRWQKaHJNcmhnQkM5ckNKeEJqVlFFRzZJSlNLNUVuakdGVHZubWNYY29kNU9OTkZlL3JRNVlPRUszaDJWZmxiaGtCNQpqdlhiT0drb204d1RheGVPbFZwc0hKUmVNRW5paGMvS3h1ZGtFRzYvaFFRQmFYcG44Z0tYalk5T2RNc01KOHQ2CjEwYWxGamUyMC8yNG9LMS82Y3RFNmJaa0c4QkVsSkU0LzdQbGxZdjUxN0IrR0VYajZUNjc3R2Nmd2tYbDJTQlcKR1BVQ1dRRC9MZjNkR3RZMlZqd21FYVQ3VlgwS25kNi9GTXZYUG0xM2syYmpWbTk3NFhEVjhjWTJlU0xJUHhRbgppNHVkZXFWa0hHVUtzRk9qQmprMEFOd1lBcTNwTkQvaDFFZDJGd01ueWcxZHlUWHlQcFJkNzFhTGFSV1BIWUNuClNWNDhueHM1Sy9rNzlDSWJyRGFpY1MrallFZVBqbXVrcTVKQnhFTUJiTW5GN1RlUWNnbGEyZ0RPeU9CS3A5WnoKcU53aTFZRGhjWlRidmR6dkJlSHJJTk04U2NtaXB0WHdLcDhuVEVaZGthS2tFeXc5RkxFeUJwYnUwVzdtMnRxTApSOGNjY1o0cVozMnZ0R09mcFNTYU1CZnZVRWhGZ2xSZ20rLzFHanNmNm1BaXpXWHgvUUtDQVFFQTJYU3ZoV0gzCnZkTDYxdTZKQTFCTW55bTh0YUgrUVZKOUNITzRJWk92VEt6Wi9PMHhtdHZ4dmw4QmpMeC8yNFMrMHRybXliUFgKVTNXSGJRSGl0MzNIL2NEVHN0N3JRS3M4NW83WFN0QUs5ak9zU1NMUncrdFJkSzVsRE0wSTVwdi9JeCtPNFZkbwpQTStzZm52Rk5SQzd3REJ3SVkwdE80YmkvS2RidTZ4R3ZXQ1c5ZkhKQ0RYV2VQdEUrUGRkc1hocS9iVXFtNGNkClF0TERxZUNvQi83MHMxSGk4ZDVybzZPRFh0UVN0a2R4bU43OGxMcGRGTU1HVEg4OHJxTDNlb0JUM2tpSjRrSUwKTVc4RE53M2F1cHo2bjl4UFFyNWhaOWV0cTI1c2oydWw5dFhkM245NzNKL1dYU2dIQm56dmxwOXhjS3hGaVl1UQo2ZWVGOGs3bUxScFFmd0tDQVFFQXk0QWpTdEpRWFN2SFdqalNQdnJkdm5GZEVrNVNrZnFqenZ3NFBVOUJvajBmCmNYUHVFSzZ4S0VpWll6YTN6VENEa0x5bWwzbWhUK2dnUk9JcHZNUUFML1VXR3JTSUlVSlpVWlAxeER0anRMWGQKcUl4QTBIZ0VOQkNRRm85TTBiSkcxcXNIUzhIdzZCNk9PdytRb0F5NVRNc0tYb3RyVTlac3VoY2hodWxadTdrSApDbUZ0dTlTMnl3YzJZRldKL1JwSkQxRWtKQSt2VW51YzVtVUl1Z1RMMWtURExIZE4vNGx3WWdBTDVPcmJmeURnCkhGRy9tUVVmanI4em5xOUMwamxMaDl2V2kwV1hVRnNuVG0vTjMwZ25VRkxXRVo3czluclZGbTdsNUxKcm1jWlEKMjlBZ3pFQnRBUzlWOG1DSDZ6aXNBbWlreGRudWpEeE83bmNvZEhtc013S0NBUUFPQS9kTUlZUldOOEx6RjJ5OQpTZSttVW9wWEtwbTRuQmh5OHdKcko1bWsxMzgxVGhSa1pzaXQvSEdkSUlrZEhQRXZwZXc2RTkxTkE4WTJ3R2hjCmF6NzRtL1VKRWxVWFZmSVc2aDMyTkhLQWE5UXU0bytpa1FndS9RNkdSTERPTEQvRmc4TXh3dkIwK3Uyak9WYjgKbEplRlM1bnVqNnJhcTFiMThkTjN4U0xLRWUrbzZteUttdTIzM25vVGtkMzRFa3JURDFvdnJBVzJ5TjdUbENkQQpYSzVvNEY1QU9KVzNkbEtCU2lucWxiQThxaUtkYzJXTWNRVjI2THlBaFFCdVpOY0MvS25tYTF0TlZGcGdzZ1BuCkF6Y2tGbzhGUGtBSThWM0FMdDNRWUovUnlQY0Q0RE9iaExITVQwZ2tvdWpPVEhpRFNwY3d4azRReFZ0Y3dya1QKTHg4QkFvSUJBUUNsWURYT0dVbzczVmI5aUEyOEpzekxkbjhIWUdVVHd0Y2FYN2dvZ3Q4NHhHbG9IcWxLSDExUworbVRFenZQaHFWcFI1aTJRRGNVOUZjd2JqcHdTamtvRXJ5ek9lUVhqMlhLU3JDWmUyVkMyeTlFZHB4VUpGVzk5CkREUzhVS3BDQTVvejIvdHE0bW92aUoxWGU5ZXhhWVd3MVpSUXJ3YUN0RS9aanZDdEhiZlJxWlVDSjVrd3VyWHUKR3FkaTlFRFdVbVVyTUdxcGI2R3Y2MHJmcFIzSlpocHN2NmJJM1EraTZnTk5jUEk1ajI3ZlNrMDJWbXpaSXVPNQpjc0sxWTRKdkt5YXBlc3RJbFQ1WmpDcE9RT2ZTVzJXdmpoSHZjZkxxZjNucDZDZWxpaVdOYXkvTTRyKzBuV3E0Ck9zcWkxVFcvdjJkeDhhNXVKeVFJRFA2c0ptUFcvQVluQW9JQkFRQ25oQVlzeGxNczlJS1V1eFcyTys0RzVlelAKVzVLZy9INXV4SzdNYW1ubm9MUUJRcDQ3SUJzaHE0VkwwanRpY2NjMy9BbXRiSTBtMFVWU1JndXRGRlEzMUxHagpabHhXLzMrZmppQ29kcVVGTjVyUUR3elAvclpVVEgxd0dpTFR1M0RieEZvcTJ5a2JIY3Bwc2RPQ0pyYm96cUtvCmFpTWdBV2N4SWJYT0NTMmh0eFdyK2ZvZ28waWVDK0lRZjQ3bllwOThCaUk5SFY5cGJlLzFyMWRTS0JTTzgrd0cKbXUvNjlmMFpyU0FrZW5YRzE0QklYR2VRQ3FMK3N2ZVlZODA2dUptRFNhUzFldi8zWjlha2lIMmxJZVdud0lyTQpTUTlrTE9MdlBFaDVzalMwdmowa2c1VklSeXUva2NLaGFyY0E5VERUUTQwUzJiT3IxYi9qRHBydGV0Qi8KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K",
            "metadata": {
                "description": "The base 64 CA private key used on the master."
            },
            "type": "securestring"
        },
        "clientCertificate": {
            "metadata": {
                "description": "The base 64 client certificate used to communicate with the master"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU5akNDQXQ2Z0F3SUJBZ0lRYTdia1FvK2FYcFNsdWZ5ZmN0ZGh6VEFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB4T0RBME1qY3hORFEzTlRaYUZ3MHlNREEwTWpZeE5EUTNOVFphTUNveApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1ROHdEUVlEVlFRREV3WmpiR2xsYm5Rd2dnSWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFEQXFXT2l3TEVkUjhaOGdkNmY5YktKSWNGaDdjcjcKSTBNZnJPb1Y4SEJMVzlwRXdjQ2VDQVJZa25wWjd2S1hWd040VEpTcXM4aDEzRDY5QTlkY0h4N2VPZFkxWEx6UwpoRitNSGVWME4rbElhbWtrMFpBdmk3RVBWbnhuU1dLcHZDVDR2TnRxekV3ZkVlcnNoTGtNc1ZJVGxham5ad2IrCi9RZm4yYURVdmxlOWVwOXFXSk1GQWwyMFlFQ0pDQkpYV2RQZGhGQms4VHBOWGRvNWlaVHgzZlVBOUFBUmNoZTQKcm1ZTTNObHhuRkk3UzVwY3ZSOC9ER093dC9rRmVGMSsrdkNvSE9pZVVEeEswbm94RXl2YkxtUVM0N1BENTVGUQpob3pQTUxwaVhHNEpJRXZCVWVBeDB4dDVxMU5WdlJnSEZabjlza0hwcExMK2hCeVdzaXpBNWdHM1JlM2s1c2VICktsekZ6UmtMZjFzcHQ1eVZtV01RVlVzbGZTelNPMUljVmM0Wkk0dWFqdlF2cGVua3VEdWFZamMyaFJiWFduZGcKK0FKUzhoTHdrVmNKUkc2cGtEb3R3V1NxY2hIS3ZUSFNCQXR5dFk3YjVFOGVsZWt3M0lRL0dVU3A4OHhjTTRvVAoxTmc1SnhsWXIwRFRyZjdONFBTUEVuMzRjWlhsb0JqMGZiRWpVbFk4OEJGbFZ0WVJSZjkvYm9FbE1BNWhiUVBrCjM0SG1ZTzlaUVJ1ZFhHbEtneVpvSmU5d285KzZwekY3UWljMTNrNjhLTlFxcXBpRFIwaUxXVTVRcmMxeGlIMnMKeEZkS2N0RGpsNVd6aXNtaCtmVmJIdTdrRGEyZTNEdHJjNm0weXVjODRYUFB2MzdmM1hFUkdYQ0hwVjU0czA4cAoxVUNKbFpBR1c5KzRBUUlEQVFBQm96VXdNekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJCkt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBVnVrZjQyS3YKTk5RRm9CbHRweWxYNDlyN09CSjZTK2xNZzJLS2x3MWpwR0RZUjVoL3I4cUJkTGc1ZGswK1lGWFQrN3dkVGVuNQpJK2JDWkVLR2NXV0FUTitBN0tkR0ZSSkNqTnhlVi9TdGoyU25lZXc2ZitoVHAvemZkblVMSEhia2RLV0FIb1lqCkx0b3dDNHJDNTAxc2RhaFJmeWVydFNMSXYyY1R5RTE4bFdNQUZ4ckVOQ0k1U2hzZzdxZ1IxM1JXSHBvWDdVbFQKUFduV1dHekNDSHUwUTBNTlRwNGZoT21lMTRxUkNiRW5mYmtTQjQ2SEx6RHBtUTlJSzU3SEdzVzB4Z0oxQ0pjWApRQ3JWS3FIUnZLS0lmK2J2NnFkcFgydHJTdXh1YkVWaVFCR1JWeTV1ZW44YmVsSVp5cDRUS2FkK01nVUhicmRNCjg5eGJQeXU1aXFmY0t0b3FhSXpvR2NBZXJzcjROWitDNnlmd2V3Z1J4ZS93d2U2QWxCaVNqRjE3b2tqN3hzMHEKY1FiV2V5cUpvUXZpcmRZMzBwZWowWkRtYnVHSlBsK2RxWXV4ZE12OFVsK3ZCQ2kweWQ1SFVMSitNT0JvRm1QVgpRd1JiZ3Y2OWZoTUZBUVI3aUtNK2dQdEVyR1Y1c0lBU0Y2NXEybVFoWDdhcUxLQzFhbnViUnVlc3pNMCtNOStQCjRtWi9qLzlydWhEVlZJUDUvZ3A4S1N5NnE4ZEFuT1R4S2JTVjdrYTJha213aDRXTXhwZ3gyeXNNNUxwdEFJR00KbEZyMUEyZkJILytxL1k4eFF5c3lDWDY3c2RkRTBJaXlNdHhOU0paSjNkcUhHZ1cvMlo3dEdRQ3gzd3RJYmxhYwo4V3Nqb1ltejBlbjQ3SlFrK20ybGU4R3pySjJlcGFySWJJaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
        },
        "clientPrivateKey": {
            "metadata": {
                "description": "The base 64 client private key used to communicate with the master"
            },
            "type": "securestring",
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKSndJQkFBS0NBZ0VBd0tsam9zQ3hIVWZHZklIZW4vV3lpU0hCWWUzSyt5TkRINnpxRmZCd1MxdmFSTUhBCm5nZ0VXSko2V2U3eWwxY0RlRXlVcXJQSWRkdyt2UVBYWEI4ZTNqbldOVnk4MG9SZmpCM2xkRGZwU0dwcEpOR1EKTDR1eEQxWjhaMGxpcWJ3aytMemJhc3hNSHhIcTdJUzVETEZTRTVXbzUyY0cvdjBINTltZzFMNVh2WHFmYWxpVApCUUpkdEdCQWlRZ1NWMW5UM1lSUVpQRTZUVjNhT1ltVThkMzFBUFFBRVhJWHVLNW1ETnpaY1p4U08wdWFYTDBmClB3eGpzTGY1QlhoZGZ2cndxQnpvbmxBOFN0SjZNUk1yMnk1a0V1T3p3K2VSVUlhTXp6QzZZbHh1Q1NCTHdWSGcKTWRNYmVhdFRWYjBZQnhXWi9iSkI2YVN5L29RY2xySXN3T1lCdDBYdDVPYkhoeXBjeGMwWkMzOWJLYmVjbFpsagpFRlZMSlgwczBqdFNIRlhPR1NPTG1vNzBMNlhwNUxnN21tSTNOb1VXMTFwM1lQZ0NVdklTOEpGWENVUnVxWkE2CkxjRmtxbklSeXIweDBnUUxjcldPMitSUEhwWHBNTnlFUHhsRXFmUE1YRE9LRTlUWU9TY1pXSzlBMDYzK3plRDAKanhKOStIR1Y1YUFZOUgyeEkxSldQUEFSWlZiV0VVWC9mMjZCSlRBT1lXMEQ1TitCNW1EdldVRWJuVnhwU29NbQphQ1h2Y0tQZnVxY3hlMEluTmQ1T3ZDalVLcXFZZzBkSWkxbE9VSzNOY1loOXJNUlhTbkxRNDVlVnM0ckpvZm4xCld4N3U1QTJ0bnR3N2EzT3B0TXJuUE9Geno3OSszOTF4RVJsd2g2VmVlTE5QS2RWQWlaV1FCbHZmdUFFQ0F3RUEKQVFLQ0FnQmdkN0J5K3NiMFlVOEtZc0RGR1hKRzVjYjlzT0owODBnVjRTL293bGFIOVRzS09IV282MXk1dU1aWQpwNk9Da2Nna0FUeGphTmZUNCs3cUY3Vks1QzVCbVhZZmpBcmo0Zkl4cDNxUHdic21UbG5OWEwwMGdWNnJ6bU5HCkdHRzFtWVp0b2FyQUJBR05nUncvUjRtY3lHRFBlNTF5R0kxUk9nTXVYVE1Cc3prZG4vdVlkVGRRUjhvQm1qeFcKSU51R0wyMDlPcFpDcE9MTGdGWFhmNE03eENaOFRyQ0dDN25DK0ZnUzByWnlBNUxOSytMajByS0ZrRCtPYWQvZgpsRkJFVjRRT3VVTGtta3BHTUxPTVJRd3RtRUgxajF3Z21KK1RVWHZKOXAwc3lSa3pxcDhqOGtvdXlJUzJYRW5DCjRZYlpiVUNJM2l2UXdHMzdzTXpieStWS3hTQlA5Q0xzSE5sdnU4eVJQd3REQmNqM0dGckFMazhBR2tkZzJyQUkKZHk3OGJBbXBiYnJvUUJGaDBLcFN2NGQzVzdtN1IrVTczS0xOVzNRTi9QeDlwcHc5TkUxNy91ckVVTmErdStiawptYXFodkFxWXhpQzhPTHAvM1h5QUZKaEdKdmMxd2xscnhBdjZZT2JHYnBJR1A5S2FmSDd2N3R3ZXNRMnFnNy9KCjIyamlTVlR2NFhtTkRUNTBCcEhWaURBckF2K0FZYmFLNUpjbnE2OXI2QkZvbWZlekhlMy9uWjAxT1ZWSmVDQysKWWs2S2UzSVlFcGxVMVVBWm5CK2s4VWlRZU45YmxjQ2Z3akgzbFZKNUtXM1FiUmlQNTJ4ZkVDeldGOWV6T3RjcAo1Y0p3K3lmNWRrQXJnTlZVYUlISEtEY1Z3Syt0UFhmSlowMC8wby81Mmt1S3M1TGUwUUtDQVFFQXpIVHRCZndaCnA3a1Q4S1JPZFdzbURsSi9hSGFMTkJ2TDlXbGJjV2hORkpIK1U4RU9wVXVtVUcrN3M1NjZWNXFwWU50ODVqdWoKYUJ6VTFJMDlMK1dWaVlnNWpGdGlyeFFDN3FvWmUweHhGMHNXTmxaZy9PSkhHYXhYZFBod3FEWm9lZUlsM1dvRQp1djNCNDlUUWduMDhYdVVmOXg3T0pkSWdBVmFLVktKcklMNVJpNHNJdjRhL0lRSHd4TlBPZVdORFRGTE5YZHFqCkpvUUFHOVBpWE9uUzd1eklsc2RreDhrd3prL0tiaVFHbXpPc1VzK3hsS244ZkhZMW40QU5LUTkzL0xsVGFid20KZHM3eWJjeUlIOXBrK2FYNXJvcU5DSmdXL1B2MG8vdEJZclV6UEdTd3N6Zm9Zb0VEbXc1NTRzb2VTb0F1TmdtTQpVSThuSDJlM05JbWg1UUtDQVFFQThUcytDM3luUlBXOXBPZ2VpZ3IvL2Y5S2xaRXoxbm5SNjIwWU1qYWIyQkNOCjNzSmc4M3VxQzE4WUlSdjdtQnhxTGRET0VBc3paaDRDZXRaNmNpV0orYVlGRWxYMDJjTk1SWjBnb2VHcmZBY1cKNVZQNEhJWG5HSWk2YUx5cEFsSXhGTkQ1WDVNYUFoYmlhVHV0eVVKc0hzS1ZDV0FSQ09qQzcxQVg3OHkyVkFHbgo1MWhqUzZldkFvMDhWT2lMTnFUTGwzMjVqeUFzaVJkTndpRHRpOStlYm1IeWxjY3BjeFdLWFYybHFsUURLcVlHCitBNWZGZmltcFhQN2lCVWVpbjRNa2M4dWFTTERDcWJKMzJnM0YwVEFHWHNMTy82clFjVkVXODlMM1F6NVlhTDQKUW5rMEdwRjFkeVBpOSs5eGp1OGl6SHlFcGIxelJKVlQ3dk1xcklBTDdRS0NBUUJLZElJa1hjd1I4aW82eGZyMApjNUttUUpDNVFBSXRkYm51b3ZGeitTR296Z21xQW5JTTYrR2pCUzE3bWVBT0t2cG5sVWFFcVU4MmlObFFsaWFrCkhKMDZPbXVLbTNUeWdQMFlZTVZxeTBtYnkvSkkwMmY2YjRTbzZzUG1pdHFyeHpTQXZrUS92MjM5a285YklwTFUKRWpzNzY0Q2FnNU5hM294ZE1HQ3J0WUlCcUkwVm5nb1BoVWh4QXIzbFQ2U3ZPK0MwR0t0RTlHdlppTlJwVGQzdgpMQTl1aHJmOWdKdEl6aEdCOERpdHAxem9oQWJMR1d0MzBmZHFjN25QWGRodERYOEtmNHJLeElQVlhFT1lqSlU5CjFGQlZRWVlOYzlNc1FBYVBGa25ldFk3NEhUaU5VN1d0Ymp5b01vZFhuZ3Z3OU4zWEQ1ckVmdkdrSEoySXFFSmwKVllHcEFvSUJBR2hXVVYyeWlyNmU4Mm15SkJOYzhxQXZuVmpYdHU0YlBwcHZVem5VdU05WlNhT0J1MkZVcVpYRgppYkE0WkRmRWdvQlNnZTRhaWg2dStDK2RPTlRLTzhWSTg0U2N2UXk3RmZBK0ovRWNwSWsrbjc2TTlSR1JNUVZCCmppN2krczdRTWY1bzdKTlVFcm00b0RFWDZQRFYwK0h5RTNnOG51R1ZtMHJhLzU5dWthWUFHVmxNdDVYdmJ4alIKY2JqZjQrYThuSHBubkt5MUk4NGYwRGdZK2VXMzBOUzVkSzBudVZ2WGcwTWkwQmE5dzZqY3FzTDdwRkRpZldHdQpxcXFQUitocTRKRG9aWkIvd3BDRzEyWFRzNUJTNGl1ak5wYTZiZVJDcUhCMVZzRERiZEczSlYzTEFxaERKZVZrCkZqVmEwV2tiTVpmMGU0TWNVQkRuN2FlNmNVaXZFWGtDZ2dFQVhKRmxkclZ0aGFPZlNPYkRlVVBISW16QUhvN2IKdENIbTNWTXlmTEJpUjQvM1JrSlBxRHZFZWhZVHREQXQ3ck5ZY1VneU5QWGlEY3JtTGZOWlVVc2QxMmo3ZFlmQgpVOTJkNk9UaUhZQ2ZyMHphK2VMZUQxNEVwS3FXMFBBUFNjVWo3eU1VUER5S003VTdPZis2S3hRcXlFZGxwRERICmRGQXlKcVh4MU9XSjZ3b1l3Rm9xQmZWbG4rZE9waWNJMGtscThtTFBiZit6N3piY3JNTUVmQVEzY1l6VldTMDAKRUFWYmhmR1N0VTJuTFlqYlNpMXh5M2ROU0daSkxVY2E3M1JzNUVldzBoUHRrT3dkMllROWxMT05IUXVBVzZMSQo1dFFCOXRPZ3p0OE5QRXZyU3VFaXlwZkQzUzFyS2NtRDRESExreEkza1VsRC90T2FFODRkcmM4YUNnPT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
        },
        "cloudProviderBackoff": {
            "defaultValue": "false",
            "metadata": {
                "description": "Enable cloudprovider backoff?"
            },
            "type": "string"
        },
        "cloudProviderBackoffDuration": {
            "defaultValue": "0",
            "metadata": {
                "description": "If backoff enabled, how long until timeout"
            },
            "type": "string"
        },
        "cloudProviderBackoffExponent": {
            "defaultValue": "0",
            "metadata": {
                "description": "If backoff enabled, retry exponent"
            },
            "type": "string"
        },
        "cloudProviderBackoffJitter": {
            "defaultValue": "0",
            "metadata": {
                "description": "If backoff enabled, jitter factor between retries"
            },
            "type": "string"
        },
        "cloudProviderBackoffRetries": {
            "defaultValue": "0",
            "metadata": {
                "description": "If backoff enabled, how many times to retry"
            },
            "type": "string"
        },
        "cloudProviderRatelimit": {
            "defaultValue": "false",
            "metadata": {
                "description": "Enable cloudprovider rate limiting?"
            },
            "type": "string"
        },
        "cloudProviderRatelimitBucket": {
            "defaultValue": "0",
            "metadata": {
                "description": "If rate limiting enabled, bucket size"
            },
            "type": "string"
        },
        "cloudProviderRatelimitQPS": {
            "defaultValue": "0",
            "metadata": {
                "description": "If rate limiting enabled, target maximum QPS"
            },
            "type": "string"
        },
        "cniPluginsURL": {
            "defaultValue": "https://acs-mirror.azureedge.net/cni/cni-plugins-amd64-v0.7.0.tgz",
            "type": "string"
        },
        "containerRuntime": {
            "allowedValues": [
                "docker",
                "clear-containers"
            ],
            "defaultValue": "docker",
            "metadata": {
                "description": "The container runtime to use (docker|clear-containers)"
            },
            "type": "string"
        },
        "dockerBridgeCidr": {
            "defaultValue": "172.17.0.1/16",
            "metadata": {
                "description": "Docker bridge network IP address and subnet"
            },
            "type": "string"
        },
        "dockerEngineDownloadRepo": {
            "defaultValue": "https://aptdocker.azureedge.net/repo",
            "metadata": {
                "description": "The docker engine download url for kubernetes."
            },
            "type": "string"
        },
        "dockerEngineVersion": {
            "allowedValues": [
                "17.05.*",
                "17.04.*",
                "17.03.*",
                "1.13.*",
                "1.12.*",
                "1.11.*"
            ],
            "defaultValue": "17.05.*",
            "metadata": {
                "description": "The docker engine version to install."
            },
            "type": "string"
        },
        "etcdClientCertificate": {
            "metadata": {
                "description": "The base 64 server certificate used on the master"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZEekNDQXZlZ0F3SUJBZ0lSQU0yenVYeGVtVW05N2twamVXSENMZTR3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTVRnd05ESTNNVFEwTnpVMldoY05NakF3TkRJMk1UUTBOelUyV2pBVgpNUk13RVFZRFZRUURFd3BsZEdOa1kyeHBaVzUwTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDCkNnS0NBZ0VBNTQ0MWdFd3JDakpPemtrNXFUMjJxNzk2K1pkTEpHVmlFcDl1M3RoL1JuaExuVEw3WDNWRGk0a2gKTDFoMnVIeitaVVdraGJKZ24waGQ5R05rSC9nZ2NHR21uV2xtMVkwbStTbHZmYTVmNlMwWUJUaHU0UzE3V2tmVQpmelFuU3V3UCswb1d6Z1R5T3ZvOVliQlJrY0lNZ2JiNFg0R2k2aG02SGlqK1NmVnJJaVlpc2dYdnpJNFpYaW9mCmlmNTRlL0FUQVlHRUtPUDdUTS9HU3BCcnJmdWlyUkFYVC9acDNoaGRDTENLYSsvNGN0WHdCZDUvNDZGQTdkNm4KOVhFNUxFRVplY1BTWjZMeDFxMk93UUNpbHhGVzVxcUtPT2RYcXFlOXkwTGJpRTY1b3FmT3BoYWMxazZGN1JNOQp2SUQ3N1AzV29OY05lTis1ZllKUzZOY25meVM0MUphYTduaUREQzNhME1IN2RkbmpPWk04RktYWlhMYVhQaVVoCkxoZXlkOFNBTlRSZkZMMVQ0UWVNZlV2M0gxd3JXd0VaN0lwVlBxN3YyaHJyUnJnYkFDeTZ4Qzl2anNBUGFrczIKUzJEV0dULy9UZERSc2xwVVJNNWFwQUJzVWJ0aWxMa3k5cTd5dGM2TXpQNU1JaXA1VmkyL0RzZG9LcUdiRndnVApnRnFYSjIvVTAxdWdMRnI3SFQvK3dpWUNrbWt6dlA3MUd1bmEwakdKc3k1dXl1alpOWmJVL3lKbUxWUlZZSjhlCkpHZHZhQktHMU1zVlRCc055b0xYbzFyVDF4b1B3NWxucjI0ZzVzYXpFV3pwSkNwZ21rMjVRQzQxbWE5aUZEL0cKbEhickFrNm92eVZRcy9SRWtnMWIzc21Gc1JGOEh4ZnV0NE1iTjltdm55YVpoRnJWQ24wQ0F3RUFBYU5pTUdBdwpEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNCkJnTlZIUk1CQWY4RUFqQUFNQ0VHQTFVZEVRUWFNQmlIQkJRQUFBV0hCQlFBQUErSEJBb0FBQUdIQkg4QUFBRXcKRFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUVScytvQmlVcEdIbUxDN0tMRnE1RVNNV2NLdlRlWTVMTjh6cnJXVwpZbjU4ZFplZDQxL1FodWJSZ1ZGUDl0cWpGUWw2NWxrWXI1TnpmdExYYWlUOTIzRE5nMHdnRlN2TmV4SzIydGQ4Ck9uY1JVZ0tDTVhmTkUrNDZ0OGJpSmVtQkxQSGlqeUFHYUdwbFNJVW1lSHZzdVVieVYwQ0tKTTZHTGVzOEVqdkEKcS91c3ZPSnVkTlJKVVUyaUFuWFpZZWFCMGYxK3lQOXQ1Rk0zcnFFQUhzME05dzFGczJRZFlvSDg4TkhxUTRMZwpicmV2WnRKdFVyZVpUTXhEQWxRVGNpMXltQzNWTDNoT0FiNEpoNUxsUXk3VzNhS3p3M08xL3F6LzJ2ZGVxSllrCkUxSWpuekJjcU9sdmhmdFZva2dzK0ZRK0tiVVVqZXcwMEFXQWkvRURuZ0ZSQllPaE43Nmo3bGtHUCtxdzNrRU4KN0FHRFkwQlNab29SVWRVWEFDMzMzWTV3dHp1QzFMY0NtekJqVTNteUM4L3FCTXZ1WUVjYTFWQ3hGMUxhTU5Ndwo0WWE4ZW9QYnR5eDJpci9BbVJySjhyQ3AxdTZYd0V6anNXVUphbTQ0TTNhUW1RODgvK3MxNW1jOUZEdmZGT3VEClZ0TWtCNVZqMm5PVXNyekthRlJQQ3BLOFhLeVJncURkYnpCZDNqb1U0NWhwVTlLZkgzemhZUUNsazZGYm9oYk8KMTNYUUR2V2wxSGJrQTVqL1p5MkIwR2tlaUg2VDJGNlp2QTBSeUFYaEFWTzVtNVVhbTZ2MDNvcm9vcGFFcmt2WApSVk1pQ3h0WDRRUnN4YTdWV2ZPMklFSm82bVE0RFNCSmtJK2lYaEh0aEJ5bTJDRWhsSHhKdGpiS1g4WUhqejd4Ck9iT2MKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
        },
        "etcdClientPrivateKey": {
            "metadata": {
                "description": "The base 64 server private key used on the master."
            },
            "type": "securestring",
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS2dJQkFBS0NBZ0VBNTQ0MWdFd3JDakpPemtrNXFUMjJxNzk2K1pkTEpHVmlFcDl1M3RoL1JuaExuVEw3ClgzVkRpNGtoTDFoMnVIeitaVVdraGJKZ24waGQ5R05rSC9nZ2NHR21uV2xtMVkwbStTbHZmYTVmNlMwWUJUaHUKNFMxN1drZlVmelFuU3V3UCswb1d6Z1R5T3ZvOVliQlJrY0lNZ2JiNFg0R2k2aG02SGlqK1NmVnJJaVlpc2dYdgp6STRaWGlvZmlmNTRlL0FUQVlHRUtPUDdUTS9HU3BCcnJmdWlyUkFYVC9acDNoaGRDTENLYSsvNGN0WHdCZDUvCjQ2RkE3ZDZuOVhFNUxFRVplY1BTWjZMeDFxMk93UUNpbHhGVzVxcUtPT2RYcXFlOXkwTGJpRTY1b3FmT3BoYWMKMWs2RjdSTTl2SUQ3N1AzV29OY05lTis1ZllKUzZOY25meVM0MUphYTduaUREQzNhME1IN2RkbmpPWk04RktYWgpYTGFYUGlVaExoZXlkOFNBTlRSZkZMMVQ0UWVNZlV2M0gxd3JXd0VaN0lwVlBxN3YyaHJyUnJnYkFDeTZ4Qzl2CmpzQVBha3MyUzJEV0dULy9UZERSc2xwVVJNNWFwQUJzVWJ0aWxMa3k5cTd5dGM2TXpQNU1JaXA1VmkyL0RzZG8KS3FHYkZ3Z1RnRnFYSjIvVTAxdWdMRnI3SFQvK3dpWUNrbWt6dlA3MUd1bmEwakdKc3k1dXl1alpOWmJVL3lKbQpMVlJWWUo4ZUpHZHZhQktHMU1zVlRCc055b0xYbzFyVDF4b1B3NWxucjI0ZzVzYXpFV3pwSkNwZ21rMjVRQzQxCm1hOWlGRC9HbEhickFrNm92eVZRcy9SRWtnMWIzc21Gc1JGOEh4ZnV0NE1iTjltdm55YVpoRnJWQ24wQ0F3RUEKQVFLQ0FnRUFpbGlZOXBLTGxJZ0NOWlhpY1krQnVKT3E4YnpIRkhQT2FMb0JEL3ZoNzBTb1NML1JHSE9EYTdiKwpzTDcyRDd2K2NwdHRkTVBpbnNncCtuMzNzSEliVDRuSWRud25DS2hSQk1VUTY5Sm5VM1d4eUV5elVxNU42TjdKCncwWnh3MzNPL3FDQmg0M0UvQi9PMUxMM3lWSmJEcFUzU0RpNEVZNVZlUGVkRnFzZTIwUlZybStGbW4yOEFsckEKaFQ0WTFsUFZ4eXlPdmErWTBZZkNQWUtVRTFzcEVxVnVpRVA5ZE1peHJTTnRVSmdMcFBEVmUydzRsTlFmYXYrQQo4bEEzakkxSW4wdTBSbDlBaHJjamQ0VGRuOHlvVXlESmZMNGJ6c1p4eXlPaTdvbTZ0OGZ5MjZEZkM5dldnSkxpCmErSFVvdi8yWUJxYzNmOHRZQ09oVGFSZTRNUWIrU1RUYU1VWWlGUEFIak0rc21jTytVcm1YYUhBZk05TURYT3QKVm5tanNrMWZIYWMwcU9kRXhXUElIcVkxVHpwaWJqNG5OL1h1QXIxcXdZQ1gxK1dEeGxNTzRLdWhqTnRHL3lzSApwSzlDQ1ZJbEUrK1FvMWxjK2s4SUMvTURGRlo2UUZPV0hUSmxKaVd3cHJzVjVkcFl0ajhDa05yK2U3QmlkeThvCmlUQWVwYnZSMVl0VUFlVEFhMnNPUTFoU3k1ak1MUTFUL2EybTF5V0ZwYktOQjNaSzU0NHNpb1JzWEU5NkNCS1kKOVRTMEtqMkgxMnJDRS9OaGxBSlIvNjNXMXd6aGpVbFBQbEY4ZFVnQU5WY1E2cDhETDRWN3ZXZjlINTh3eHY0cAp1Y3kvbDJmOWtSNDcrVzJEb0ladkprYTVURldtZUdEV1B0NkI0d1drZjUyQ3l5WU83REVDZ2dFQkFQNytQNUFqCno2OG50RjV4anRYSU4yY05pdlg3RnF2NmlxSFZIclBPNGRIVUNsb2VsbCtEdlpOWE9obnU0N1Q3VDd3VExwak8KNjhMMHBJeXJNTCtJeHRPVUVEQ3hDT0E5TkRja3QyZ1JleVEzaVJ6dUpITnI3Sk9mM0l4bkFqOWZncWRYenFSMwpJOGFXN0xuYksyWS9xRkNGckdHR0Q4TFNLeFRxaUVDckZjTTQ1ZWxjRk5uV3VaekpJMEd6MnFSMWl5UmJYQ0x1CmwyUEc2QlNZUHJ5NXljejFWK2l4UDJQT05iNHNIMXNGMFJSeDBHWm9vQzNEdkFkZWQyWEhWb2lGbVpCQUxTRTUKUVpSQy9VYTF6SVArYlduQkZsb2puaENuMTY4S3N5ZlhmR250U0ZSMGpjR09kaG0rTWZtbGVNWjQxZ21qN2cvLwptVlR1WWxveWovTll6a01DZ2dFQkFPaDRSUDFXVmR3OTRzRWhUNEhWbVd3Z0M5Zi9Wc0Q5T1A1U3R2cEdHWmJSCmNLbWxrZExvN1JTcWFCdEh4Y05EakpZandiT3ByVUQ5czJCUnFCa3ZSRUxjcTB2WjgvZk5wUlJkTmYxR1JrTnYKMjhwZ0xMd2xzdXgrZ1lEWGF4Y3VDN3FmdFU5RjB5N053YVV5NWtvTnNCMXltdnJ6N0VadnZ6R0lycmNMRXEyVQpYRms2Z3lQc0IrMDFROWNxVUtlVnplUlNmUEUwOCtDd2kyVFMyTlBsc1NMWGFTL2hpaVUxWk0wQ3ozcU9EV1dUCnkzNy81U00wVFdESkRXbTR3aUlHUkRpZHk4ZytxUkNDV1p6M29IVC9RSzdjSXN1YlR2MXJxWXYrNkUwb2VEZ0UKK0RkZUxaMlBqRS84ZUg4RWE0NnpsbXJhTkpBQUxReUp3dVJLQnNpTUdEOENnZ0VCQVBvUFFTeE1RaVlGck5jVgpTN3FRYnV4cmxvT2xLVldjREFtcUkwSzN0ako4VzI2SEluWW1qbW1JbDl6SXJadFUvSnQyd0RKd2NUbXRpaFM4CjZNQmNGSWQyWXU0dEhvUXc0UnpXcjltcGt2WXdWQkQvNU5VZjJFL283SEx2clgrU1hXRllOYmlKY1pjVmVLN0cKcE9mUHMzTEx0QUdyWTVkdFhYeFVoeXZMMnpxb2VLY0JleDBwZXJxcmNSekVrTHpJM0p2WjBDQWRsRzd2cDdaUwptdXVlMHF4aFNVVlRWTk8rYkd2RGZ6aFhHdk9PclkxUU93ekdMNFdXZVVaaFZwWHBWbS9rejUwT05pWjhEejhoCmw1ODFpZnkwc3dQUWUvamZjQjhqUWcvblBRWHdBUWQ1aVc1d0U1Y3BNbjhjYTdWTzJLOTVpRU0rS0JMbTk2SjIKaFQ1aUwxc0NnZ0VBQ3h3VVQvY2NTMVk1eS9rSGo3RGhrQ1ZINjU2c1NyVFBVSGdyZm5KekxwMzd3Ri9GUkVzVgphWE5yWGtKajFSMFpUdU9Pa2tOOW9DbC90UTZ4OWVJb1pQbWV4aFU0YjVOSVhGeklBNzZrQlAwSGgvaG9xdVV5ClU5TUg1VnhtSmNseGpnMnI0SW41dWJiamxqMkVlKzJEaVNTOCsxbEU1V2padmtoRjhVRjZOd2xzRUdlWGROUUcKM1BNNnRzR3k4UTliczVtdGx1bHM3a1FCcFdQZU1PSTlRT2tDZ2VOSmN0WEdaM1hHN0poMVUzRm92RDBHZWxRNQpqbktOVFl3aTJ2VnB0VHIxVGpDUWE5V082czE2d1p5aFByb09mNlNBZGVQN1NsRjRVSmVxaHlMVnFlKzZSbGxoCjMwQzFrWHhvbDMxRnB2MmVuWE1rdEFDeGE2K04rMitXaVFLQ0FRRUErT2lEZjd2WDAwSEpZam5DblpUanRCRWgKeEluSWpsM0RlbEZ2R1JvNjRVN1pOanU4cW50ZlJWMlB4RHBsUnptRGJNYUowcU1tWWlNSkdNVEhLYVpFRHlxMgpWVjRicTZvVmtoTFg1ejlOeGkxUW5LVVhXUFlZV29PS0JzMUE2dlZYNU1DZFUvZzJkQk1tMHBWV0tCMzVpZE1vCkNJRHFOV1RxR3pDN0d3SE94bGpxSnpzY0ZidnJod1NBVHhmYlBpVGRtWlNuZS9kVnRobjVLb1QyczI2RWhYNUQKU28rNDR1VFVhZnVmeUtoM2pCV2F4SXRDTzdNbmZuem9SSC81YUlWM28zaXo4Z24zRXhjeGxQNDBLakR5OUFmeApuZDRpOGNnRDE1TmJ1YmF3QTgxOW1JZlRLRVd5elpyVHpYZWlLYVJNR2J5RmNQNkR3ODFsakwzYlV0L0lqQT09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
        },
        "etcdDiskSizeGB": {
            "defaultValue": "512",
            "metadata": {
                "description": "Size in GB to allocate for etcd volume"
            },
            "type": "string"
        },
        "etcdDownloadURLBase": {
            "defaultValue": "https://acs-mirror.azureedge.net/github-coreos",
            "metadata": {
                "description": "etcd image base URL"
            },
            "type": "string"
        },
        "etcdPeerCertificate0": {
            "metadata": {
                "description": "The base 64 server certificates used on the master"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZEVENDQXZXZ0F3SUJBZ0lSQUp2R0JoVnhaVHN4c25EQTVKMHFVb1V3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTVRnd05ESTNNVFEwTnpVMldoY05NakF3TkRJMk1UUTBOelUyV2pBVApNUkV3RHdZRFZRUURFd2hsZEdOa2NHVmxjakNDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DCmdnSUJBTUVhTy9kaHJIb1hQVWhzNkpZOGJ4VXBsaFJZSkhwRWdQTFRpNDl3OXhjWVlyalRvYW1jWGRHOUhXS3EKcGpxeTZMMWF0ZUxPUC9uK0lLMHpLa3pjdXdhZW5VSU5kU096WjV4QUFxWnc5aGFpYXJJUVRhb1ZIMXJ3ODg5Ygp2dXh5MHRMK0tkaDdQVzZtbVBWRnQ4VW1tRmw0ZmEyZXltUHErdzAzWC9GdjJNc3ZMcG83TThIMnB4UFlUSXZkCm5aQU9PVjN0cjZEamZmcEcrVVlxMjZQdldTcjVXOWh5R0RzbUJoNnpHTVJMUlNNcmtvOU81TVFMdW5kcjkxNjUKVDdXTTVFUWJUNFQra3gzVmRvSEJCMUY2TUFmcEpGRUpsM3NSOC9KVDRsQ3VtUWZzQVZGa0dzYmtFWUtKS01XWApySmpjT2pxT1Y2OUlMR2dFWmZqT0Y4M013Vjd4VEMrUmFBQkQ1THp0OXBpU2tWaVdpRG9XMVFlSjNYYUNSS2QwCm9MZGFnaVJzU0ViNnovS2UrdXVLSExuRUxYYVEyeDFCdVVuQlpheExqVTg1bElYNmk1RHE5N2s4RFoxcUpRbk8Kb3A2THoybjB1WkVoRnRWck5wclh0MkxWa3lyNzh2S3lRd08yd09lY3MxQjlQTkNDVTNpc2JpVGx5eXdBNkxpbwpGeFYrZFZFTU5DWHVwdUdYNUx6VWIwWnFXdS94eGtxS3ZQeWtWUnp1V1BiRm1OckNhZ094cm8zK0MybHNwSkxyCm5lUzBaTjdxRms2cE8vcEdTS3o2NEQzRXE0M2h3UEJXVVRZbzdMQVlOcXZyRHErQXdwbGdkZ1BBY1lCRVdJbVkKTjEzYmZoV3JEOVBSclhuUnNtK01DRjFtRStiTlN6M011bUlGRUYwTEsrT05XTUF0QWdNQkFBR2pZakJnTUE0RwpBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEClZSMFRBUUgvQkFJd0FEQWhCZ05WSFJFRUdqQVlod1FVQUFBRmh3UVVBQUFQaHdRS0FBQUJod1IvQUFBQk1BMEcKQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUExRnVOUC9ZMzdZMUxOcnEvUEZJQTdxTWRqY0NMT3VKNkJBZGxvS2FOWQp3UFgzSHVoeThPNnZNSmZva1ZBd0JPeStycFBTa2s2OGhxbVhqazFCVndoSzdaQWdEYVdrNmxDZFRDYS93cXFRCmdtZUhYRDNRenI0WFpkQ0VlSGJNblRUY3V5MHF5N0tIdVRPeC84T3ZkVGVGMEYyOXEvZ1hWSHg1UkYrVnZiVXoKYkVhOVdnZ09uRGdyYnB1V3NmckVTR1FHYkpCV3J5RzdRWUQvdk52TlAxbkhoZ0NWOEpaOUFzbytPZG8zdDZkRAozamVuRURrcGZNMmI1VVBPbDVRZTc3dEJwYTFack1rUHVFODFVZzZYZnkza3R5bDB6QTdlV2xZejg2RlBXeHFoCk5jYXlyYlBaZjJrOWQrWm5WUWptMlZUc2pYaE5vZnVaYllXUldYL3BtT3ozSHpuWjdIZzJLRlJISDh2MDdBNlYKcndXRlpkU3JvZXBtcU1vVXBmeFJHOFhyOVhjTnJqWEJDRkZqYTRSSzhBYnZLdFJPWklJS1l1ZjJXT2FsazdXNApCSUJJYVBZSDQxcDZuZDdPWnFGY2ZMZ1AwM1preEx2akFzMVdoQUxzSTBSa3NLeERobTgySVF5bjk4Tzc4QVI1CkFZUUp2UDB3c21aTjVDWXpOUGtmOVpxUG9qOGFSTkIrODZWbmY5OUZ0MDd6WWp4aGQ3UEszRVJudURvRVlOWmgKanU3SUhCOW9DQzVEL2FYR0puRUFxcFk5MVJOTCsxdysydnpkVUUvMkdtQWRYTEVpbm4zcUFRTll1YUdpblVUTAp4S0x5YTBnSUZvdHRuM1o1R0lEd2ZxWlE2ZTJMeS9oUU1OY0kzYW03RlR2SytlbFZKUzIvTzlFYUxXbTY0NlQyCmNRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
        },
        "etcdPeerPrivateKey0": {
            "metadata": {
                "description": "The base 64 server private keys used on the master."
            },
            "type": "securestring",
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS2dJQkFBS0NBZ0VBd1JvNzkyR3NlaGM5U0d6b2xqeHZGU21XRkZna2VrU0E4dE9MajNEM0Z4aGl1Tk9oCnFaeGQwYjBkWXFxbU9yTG92VnExNHM0LytmNGdyVE1xVE55N0JwNmRRZzExSTdObm5FQUNwbkQyRnFKcXNoQk4KcWhVZld2RHp6MXUrN0hMUzB2NHAySHM5YnFhWTlVVzN4U2FZV1hoOXJaN0tZK3I3RFRkZjhXL1l5eTh1bWpzegp3ZmFuRTloTWk5MmRrQTQ1WGUydm9PTjkra2I1UmlyYm8rOVpLdmxiMkhJWU95WUdIck1ZeEV0Rkl5dVNqMDdrCnhBdTZkMnYzWHJsUHRZemtSQnRQaFA2VEhkVjJnY0VIVVhvd0Ira2tVUW1YZXhIejhsUGlVSzZaQit3QlVXUWEKeHVRUmdva294WmVzbU53Nk9vNVhyMGdzYUFSbCtNNFh6Y3pCWHZGTUw1Rm9BRVBrdk8zMm1KS1JXSmFJT2hiVgpCNG5kZG9KRXAzU2d0MXFDSkd4SVJ2clA4cDc2NjRvY3VjUXRkcERiSFVHNVNjRmxyRXVOVHptVWhmcUxrT3IzCnVUd05uV29sQ2M2aW5vdlBhZlM1a1NFVzFXczJtdGUzWXRXVEt2dnk4ckpEQTdiQTU1eXpVSDA4MElKVGVLeHUKSk9YTExBRG91S2dYRlg1MVVRdzBKZTZtNFpma3ZOUnZSbXBhNy9IR1NvcTgvS1JWSE81WTlzV1kyc0pxQTdHdQpqZjRMYVd5a2t1dWQ1TFJrM3VvV1Rxazcra1pJclByZ1BjU3JqZUhBOEZaUk5panNzQmcycStzT3I0RENtV0IyCkE4QnhnRVJZaVpnM1hkdCtGYXNQMDlHdGVkR3liNHdJWFdZVDVzMUxQY3k2WWdVUVhRc3I0NDFZd0MwQ0F3RUEKQVFLQ0FnRUF0MGFwQjhEaXJQYUZxY29FYnlObzR4TVhhTFBIMjJ4Tlh5dTlXQ1dGdjV2YmgwVUdPUzg2Tktsagp6SlBmTmZNOHh3dmplaUw3d2RDYlB3aEM2N1RNcGhuQmRFSEZubDdXeGd4Uzk1cGJWMXhNSERreEhXN3kxYVBBCkpGMFZ0dUc4aTVuRUtiMitydGpjY0Y3OWJ0ZVUzY1pvc25MMThTUERwK1dZNEZTaDFTY3craDJhb0V2MGcvZFYKbjZKMXU1WmtpR3ZodDdoemh5bjV5Y2svc2phbjBRdmZTbTN2NWFQUFJ6QUJINzI1SHdwcURpNTVIa0ZyZDVFMwp0ZVg0YTM0UDRUeHltdTNzdi9Jc2lqYWxOWVhkTklUcGZTaTNaNDNBbFkxY1RldUpQMldXVXFQS2JsOWs1eG83CllsNzA2QmlPQTZtNk81a3EzSWJnS2VlaDNDaXNsa1B6NEQ5aG0yOHorUUMxMDhmMnJQQ2F6OFlPU2x3YjBrSzEKbURTcnR1Ukh5dUVpWDhqSjBPekV2Wk9jcWRHVENBQXVSVlY4cTJTSnQ5Nng5MmNzNi9hc2RoOEoyaGl3Qko2MApjcDJHQzFHZ0J4ZkVTV01yKzhIOWdpanJZbWtZVTl2TkExYk03Y2c0cU15VEpGQWc0R1R2R0FuZW1BQS9ES2YxCjU0K24ycldNM1BucEpITEpZQlhKZWsvU1dMdEtVYmhaOUg3RFlNQXZlOXBuWFBnT2tZWGNKdzliWGttdkpLcFkKd3RQREExaTdOSjJPRWJRUEdqWko4eGVlSVl0amVGOVovejEybXhlRUowZlRQbmNnY2Z4d2crQXRCL2xiKzBHZwpiWHp0SDQ4SFdGUXNMc2FwUUYzZ083WUdsN1BTVU91OTRueHpPNytndllDbWhMdkhUSmtDZ2dFQkFPVzRFV2Q4CjNoNnN0dHZ3b2p6MDdlcXRReVM0M0U3V0MxR1pYeG5FNTZUSHVEUUx4RGk5MUFNaGJ2Q1FuMXFKQTg5VlZHeG8KUjFnQitHTHBTSGZRbUtXM2IvS3ZZem94YmpCclVPQ2NQRTgzd3dnUGNLZEZIM0M1b21iQkMvaDVJRU9UUEVIawo1eEJLOUdFekJCMXZIUDhXMnlsQjBZYkp6NXVoUXJwdUViUFFKY2VJVTY2bnFJQmNxWldzTm52WGxscjNmUVhDCmxudEV5K0VNNHZPb21wcUdZbTFiRllteHI2eUdEREdQSmprSlJaTEtjcmlHWHlkeEZiaFY2VXEvOUpLVms2ZUEKbVFKRUYrUDRuRlhyWVlsMjRXUWhuUzk0SjdxbHJzWVZURVhMbWVuUEdCRnZoWnNxTW1tUzBDbG1RZ1ppZWZGVwpLcXJrN29FYjVHcFlOYmNDZ2dFQkFOY3h3T3haYjl5S0ZJV0xvSitSSHFScVVZYnNKNEFNRjdDdW1KZU9ZYitwCkYxZnVBNG9WWDBFczd3VloxbGoyWGd5anpERlBFQytSa01ya3gvMHJQYkhYQi9rKzZCR0tSemR6QXJMR0VjMWsKRkpER0FuTlR5eXlOdW9wZnZrRWY4cTgzbHIvWThjVFpRNTgyK0lKU0NvSnNpclZRdDI5WEMyTkV0cUMxYlJBOQovUGozeVRaZC9GdGtTUW9MM1lab2Z0ZEkxZlkxS2ZlVGxwOTJjQ0N1Tkc3SlJ5YzZFZ01tQS9VT2h6TzViREgxCkgyWnlmYzZsS3NJYnR4ZUpDR3ZvRTY0SWNWSWh0c3lQL1BKR2FoVm0xRUZSTzNvYmpoZFZORHRCbEhxd3Bmb2YKZDcrT0hJZk0zRkpBcDBKTi9EZWJsdWczd0V5NmlWY1NuQ1NXYkhSbW1Uc0NnZ0VBRTFCRWRsVHpQOVQ1a3NoSwplNkdFRjBUMTdqSjBvMVF2bzI2bnBqejkxTWJOMytKVlh3Zm11VlNvUlNXRG9GTUF0UC9SbDBPMUs5c09qUkpiCisyYllUcVo3alFYZDY5aVlFUTRVd0syaURHNzl3TUc3a1BTb3pndHRjZ0l0QlhqNWszVGZqaEsyc3BINnRlbGEKSVRka1VyWVRPd2JEblBkK3N2RDk4VHFyMWxoYnRNanJjRFc4WHY1cmE2QU0vS0NGamFSZEtJelJwZytFcktrdQpzNW1yVmU2U2UrczZobGNnRS9zNUx6bC8xeS9HWDY4UnNoM3FCaURsMkpld2c0NWIrNjhEdVFPQTJjWHIxRWprCnEveWNPTGg3L3JVc3gvN3NLQzhoNEptTnpoaHVHbEJGRDhJMmszTWF4ZkdIK3RNVUhnRk5pMUxaUjREejVIcjUKMjA4TFJRS0NBUUVBcjQ0bVhtcWtTRjNaV2cxTHo0RmJaelJaS0dJVjQyOTZFQ2lQMGV4Vk1EK3BESkhmRDFKYQpNRmlROG1PVTYyU3AyMVB4YkRTYzlzR2hSdlNYZHFGRkpvVlBPdlluNnM5TlJCNHVrRnZvQUJCcWVxVWZNS2ltCmNzVjQ3aFFucVFlQU81TjFCelBjSVFSQ0YyeUlGZ0VLRTlhcTNqcG9PNHZlZlhCOE1PVnhnVE9nNGhkN2JrQUUKZFNaK001VDBkd2RlbXhFUGhGbGcwRm4ySWtkRU9GVUY3MitDL2F4eEwySmZEaGQ1RXloczdPQ1Zha1Z5L3hkZApwNWRtcWV1Z0ZDL3poaUhiR083cUt6NDRWQW8vMXcvWmp5UFBDdEhaL0kwRkhHWm0xQ1N5Y3pnaXdBSVdvbTd0Ck9xa0dDcUNHWjNNbURISVhEa0dMYzU1NkJaczJCVXdDS3dLQ0FRRUFxSWtUODRaUzhNZ25ERFdrdXdtZFEydE8KcS9ndkVxN0VsNzYvR3QwcWduR1dPenRLMW4wOStpRjg1RURsVzNCd0JMa2pzZ1QwUmdGRVpZckgwcHBiMlUvbApJdGYxSXJxYmxQTnk5U1pnYlQvVVczYlJHSk5hMjkxS1lpbXdFNFRCTy84WEdwT0E1N0U0Q1JIb2ZuTUlWYXhoClB2TG5MNFBGdWwzMjZ4RTQ1MVNMdVltbHgxc1F4TkQrZk9HNGhHRTZtZTViZnJFRnBYczRVVVFGZ3Y5QzV1aEIKK2JMM3krdmlSNlc0dnNGOVpVWTRXc0pHOXFRbDN0clE4OXY4NTZybnRVakFqWDRoNDA2TDNRNEdPaGtzWStKeQo5RSt1Z21TbE9SRGNzOHRUMml1UFM2UnltSGw0eXpoa1JsUEtqeGVlQlc0M2J2ZUFPSndvVld5NiszL1Jldz09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
        },
        "etcdServerCertificate": {
            "metadata": {
                "description": "The base 64 server certificate used on the master"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZEekNDQXZlZ0F3SUJBZ0lSQU40TjJrRDJJbmRsS0dhWlV4NXlpT293RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTVRnd05ESTNNVFEwTnpVMldoY05NakF3TkRJMk1UUTBOelUyV2pBVgpNUk13RVFZRFZRUURFd3BsZEdOa2MyVnlkbVZ5TUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDCkNnS0NBZ0VBdzRrTXExeXR0Z2VKRUFzd2NSb2hpMGpxSUtJL2llMS9FL0xhS3g3SmJNVU1IVmlVbFBmVTUzNVkKOWljOG1vZkJybm91Z3RVdWdnTWJjMTZLdFBLaC9CZlE0bmdoSXR3cXdla0p6YjAxcXIyRWJHOWNzelB3UHlDRQoxQXBCVnlMWXMweWt1akRwV0VpNHlCWGloc2RYTHNNM3lpSmwvT2F3Rkd6UmR0UEN6eHJDbGpMamhhdjN5ZXdFCmNmN2toNUlxeUNIWVhpbjNDdUtqVzBmN09mR3ZTb3BhNDZ1TlV4dkdUbjEyYi9RM1cydEVaT0Z1cksrTkQxOEMKa2N6Z05yVkYyQkFFemkxREVSSkc0Tzd6ZGljLzVDMnhCcjRIcEltb2xEekJCU3lQT09lbzBrcjBJaUU5S2psdApOdDRiSzBIaEVOb3QvYUE1dlJSbkVxa3UzcXFhUTQxT01LSlQvN2lSNDBzNkd1WEZwbjdjemY4MWp4M1NBUDBSClhzWXIvdnk2a2tvZzlVWHgwTWMvWmo5S1VERjNaaGJKcTQxcmZXaU82ME5aSFRwQ1hpbjNRVVV3Z2NPMENGd1AKNHNXaWQ2YzY4NUpJTlNXTlQ1RXQ5VUdBdTI3bXIycnhPMWRyQ0hNZ2szMDltcitNazBWZzNvN0F1bnhuajM1UApnRHgzVm5XY1cvTjB1YWJXYlc5N2xpbWxheGdWMHdXcGRMbEJWZmMxK3E4TmNBUlQ5NTFyUDNoTmFrbjU4bTlzCjlrZjdjS3BMZGMyTE14QzY1SFRJNnBXM2NKUmh5R2hUaXAwSmk2T2p3Tlo0ZFNFZkFzZmxyOFRyVWk3clc3QVIKT3ZkcTIya1kyZEhrbi9rK2pTSGQ1ek5JYzh1Skh0bnM5Z0c2TWlDajFUTkcyRzJiNVpzQ0F3RUFBYU5pTUdBdwpEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNCkJnTlZIUk1CQWY4RUFqQUFNQ0VHQTFVZEVRUWFNQmlIQkJRQUFBV0hCQlFBQUErSEJBb0FBQUdIQkg4QUFBRXcKRFFZSktvWklodmNOQVFFTEJRQURnZ0lCQURFcmxpTE9MOHkrcEFjc00zNTJsS2gyYjV6cU8za1JlWVpNTXVJRwpGUHVZS1pEMERiZ1ZvK21oc0UyMWhOODBFL1RDVm51ZmJ0bmRkL0NocExQZ0R3U3krclV2YlVhOW9jZkkvVTdWCnkvaGJIWGYzK0ZNcWhiYmROTlpuQURDOXE5bm15eDVBYW1uMFo2MWYyUWtkUnFWazRudGdrcW93Q3czTzFFTVEKRGppUGNwS3RKcCtKWU1NSmZWN2NmcVFJWTcxUjkxVHM2N00reTNDMDJSQU9iSllQOWNQd1RwRzNIWHVwSW1KegpLMjNlYmZ3eExjWG9DaHRUZ1pnZUxybVQzN1BlLzRUbjRULzcvUnBRTXdZdkZZdm1raGIyZXNwcVVhbEpweE14CldObndJZENSS2FHQTkwTVlNRmwxQi9sV1pGWHh4alhISDZUbThpYTFGOS9LYTEwZWRQUGY0Mm9DUndwNDVlbUQKei9ncjJuUHBJR0NwMWVNUUg5UU85MElQMlRzWVdoSmE1K29iL2lEUkZGTjA0Y0gzMThWWktpcXVUSDdIU2w4eQp6QW93OTdSaUNSUUFGaklabWowNmk2d1pvUnJINFBibjRyYWNpZTJTUkErTmZYUXVtb2pTbENTbnp4cXMyaDhHClZpMEdyRmx6TGs5WjZsTFMrQ0Zqb1RPeVJjMHFhOXh6WkpodkNzM0JmYmtnZWh0S2RZZ0tQV0JuZmpZc21QcGUKaFFpUjQra1NDRC9STkRwaEhCRzBrcitCZzVsOFQzQVB6WlptSzNHSVl5aC81cFQrVHdBK0cySGpia2ZKamNudgpGSU9iZTFVVFA4NHZvNE96L0hRYU1lRU5NTFV3eVNmWGFpUnRLR3VMN29aZ0ZrdTZORExtUnBVenFvdzM2OW9GCjhSZGgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
        },
        "etcdServerPrivateKey": {
            "metadata": {
                "description": "The base 64 server private key used on the master."
            },
            "type": "securestring",
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBdzRrTXExeXR0Z2VKRUFzd2NSb2hpMGpxSUtJL2llMS9FL0xhS3g3SmJNVU1IVmlVCmxQZlU1MzVZOWljOG1vZkJybm91Z3RVdWdnTWJjMTZLdFBLaC9CZlE0bmdoSXR3cXdla0p6YjAxcXIyRWJHOWMKc3pQd1B5Q0UxQXBCVnlMWXMweWt1akRwV0VpNHlCWGloc2RYTHNNM3lpSmwvT2F3Rkd6UmR0UEN6eHJDbGpMagpoYXYzeWV3RWNmN2toNUlxeUNIWVhpbjNDdUtqVzBmN09mR3ZTb3BhNDZ1TlV4dkdUbjEyYi9RM1cydEVaT0Z1CnJLK05EMThDa2N6Z05yVkYyQkFFemkxREVSSkc0Tzd6ZGljLzVDMnhCcjRIcEltb2xEekJCU3lQT09lbzBrcjAKSWlFOUtqbHROdDRiSzBIaEVOb3QvYUE1dlJSbkVxa3UzcXFhUTQxT01LSlQvN2lSNDBzNkd1WEZwbjdjemY4MQpqeDNTQVAwUlhzWXIvdnk2a2tvZzlVWHgwTWMvWmo5S1VERjNaaGJKcTQxcmZXaU82ME5aSFRwQ1hpbjNRVVV3CmdjTzBDRndQNHNXaWQ2YzY4NUpJTlNXTlQ1RXQ5VUdBdTI3bXIycnhPMWRyQ0hNZ2szMDltcitNazBWZzNvN0EKdW54bmozNVBnRHgzVm5XY1cvTjB1YWJXYlc5N2xpbWxheGdWMHdXcGRMbEJWZmMxK3E4TmNBUlQ5NTFyUDNoTgpha241OG05czlrZjdjS3BMZGMyTE14QzY1SFRJNnBXM2NKUmh5R2hUaXAwSmk2T2p3Tlo0ZFNFZkFzZmxyOFRyClVpN3JXN0FST3ZkcTIya1kyZEhrbi9rK2pTSGQ1ek5JYzh1Skh0bnM5Z0c2TWlDajFUTkcyRzJiNVpzQ0F3RUEKQVFLQ0FnQVp0eTEyWC9Mc2pLTW0vQUc3N2k3WkxaYTFBZ0dQTnkvT1JOTVNkck1RM2YxUTRyUnZ2d1ErQ2F6VAplcWVLdnkzbXIyVHNpZkxhNEdPODBZTTJkdTU4dy9rUnY3REQ3K2FqcCsxRkpJd3BUMUZhSFc4NGxpMFRjRWhuCnhvMS9VekxpcWNMRVJlaDZWdDRPV21wM1JVSWZBVWVXQ3Q0VTI1WHVxYjBHZnFVUkxiakhuaHUwR2NDMXlwZHYKRXBHbGpzQ1huM1BnTm02cC9OSjFEOHRuZkhTTVBoUGorMHpUMEVSTlVFekNQb0VGUWQ4MTBUd0g4L0orUWdXSgpmVU5EanFXSDI5dDE3aGZ5NTg5d2g1eDNQb1Exa3hqRUJUdm1GTUNaOWorQVdiTGdUZjh5NE82b2lteUw0QStQCjlyZm1BWDBEQlY2bEMyeHNoSUZsditCTklteTFHTExvTWNqbnJELzFoenFlR3V6Ulk5RGx3Y2hPejQ5RmxGV1cKQlMyRmlqQWE1YXlMT3VxckhqWTI4ZDhGM3JIUEZWd09BLzdWbU5tOWtkN1pJY2JSM3ZnNm5Hb1BEb2xGbG9lWQpOdW9LN0o2V0N3K3lsN05kQnBTRVo0YW5yWGgvUExtKzRYLzFCd0NhNHg5dlZaT1E3WVJlTG4ybDRQM3kzV0RWClpCZngrdWxBdXF3SWUyZDJwL3FiRDlxWFcwY2c0cC9kdHd6WllRWFlHZUNlVmhwUXlXcTVSb3VDMHY5aUFNMjMKUkhCWmlIN1krZGFpaUtaOWhOM1VNMnB6YnVmSWZiOFZvTGwvNlVUVVdQR0kwQWk1ajBtbDZ0N0lwcWl4ZXFrVApFQkFVaS8yUWQ2cE5wdUoyTWxaVkhkYWdUQWtScGhKRmRjMmpFcUVUanVpbW5WL0hNUUtDQVFFQTYrVFZhT3k3ClNhaFkwL1pROVdyTEV6aGpjQ3lmYUJVb0toSGN0c2tPSmxtbUFnNHd1a20xNVk4d3d2eS91N0RDcnN3MnJ6ejMKT1FQcjQ4TWpWK3JFYXJzZXlSUk5NK2NMMGt5akw2L05SSk51NkJONS95REwrSTJ1RDIveS9oUnlqaW9USWY3agpaOUxKMnhlTm5EcnVUVkZ1L1ByeUp5MHRhRjlEUHFLV1NRaFlkbVY4WHUrVVF4TzdydXRhTDd6eVhiT3A0eWhJClgxUG1LdzNKNWVEZE9aeHZVRi9SZlhDLzdHOU5ibmpISmgzUEt5MWczcFllS2E1djB3R1hlRDRuYlhLZFVMbFQKTWFPWnhjaHVyTmtuNWZhRGpzQzFZekI4aXZOZWZycDR6SUJpK040Nkk4elFqeGdzZ3AreFlNeUtVNStubC85bQpscGk1dGRkZklhVE9Rd0tDQVFFQTFET1paamh4azA3VXA4c1NHU05Ha05tZitOeE9mZ3RZUWJpMzA5RjRPaGtoCmtyc0lDMG5VbExpVWgySDZKY1ROcXJuWUVndXFsRzRWejAvS1p1Njc0WExNYTJYYUVvSTVLbHJpUDF3RjBVN2wKNDYvTHhYTGczSkZXcXo5S08rTXRMRm1DZHhrVkwwRUU1WWhTTWNISWxEbEQwcVY4Vmk4QytJTk1mMy9OSU41bAp6Y1ExUDVZOFhVbC9PTVQxMm1jUjkrekF2WHp0ZGJDUVF2MWJBdVdNSitKV0dtdU5KQWdHS1V5NVJTbENzWFpZCjB5WUFFNk9nUTdLRmFwRFFmRjNjd1FnMkdsbmlaL0I3UHpSRDFMcDU5eE5uSCtZaVlhZVB0amtxV0hWUjR6R0kKcVhxcnhxWS9QTlJNbzhhNWZKczBaOFZZWS82TWNkVDhMMGlqVXZhUnlRS0NBUUVBdm13emVrZmZ5RTRGcHRXbgo5UFVJaWJOelVoSXpmQ25ZQ2wzdzlmekhWMTMzREtHMzVDbXNsR3RLeVp5T2lremVXNHl1ZURlV3VvZlgzRHlpClEwNVkwRy9OSWpVcFBVUzkzajNQWGFkazVINi9nTWg0S3VPbXhEWmExRXRpdEloOUVSWVY2OU4rYjBsUmVYTkIKOVdQOUNwMDZJeTNRWEoremtCV1dpdkZrci8vMHFWNnpUMC9ITjM2dWV6Mnh4K2VYSHR6eHYxVzlWbmE3enZXSwpqZTgvcGtvSjhhL254SU5INnV6T2JPZENuQnBrS2s2dmEvOXl5ZUx1a2o4dXJ2bzlpYlNFR2E0QTRvbFdrTHFECjNUUlBhT3ZldDFZSkZ0RUZPSVhOT2kvOVk5Z2dEUllYaU43RlhUMytjRlBKTklMcEJ5aFNlZmpLTDdlSjhxaXgKT3M5M1VRS0NBUUE0WkIzMzFEZ2FkWEI5eHJGZ2pNZEw1d2xrRU9lckIwakU3bG1ycUpiU21hc2FXeW1nRmxhdgp6djFwbk5mbEFZL0dOdXo4bnEwT0ZOTW03SVZWSlV3NGRWRnRtUHVDdjZpQllQV084TjE2NmdTZHBUSDVucld5CjU4eW9aWUZNdU9wZ1Jza3M3VFY4QVVOVDNBNDd1c3VhMkR6MTFaUmRNdEVQU1pVaXJNdk9XRXVsaXVhN3B5a1QKZ1Z5VnNZSEVNRy9OK3RTZGhuMTBNUitsTGI3cDNpYUkwdFVlNEVYNXRVZ3Q0WDI2cTJSVjFLVjJOenI5L1JXeAo1OWNjb3E5RTNZeTBuNElCTHJIRC9WeERSNWhmQjg4eG9hNWVBOEpQUVVBbnBMbGtHSWxTWHU5NldtY2J1MEpDCjRBZ2QzY21kRzRHcHNmL3pVc252MWpIT1B2ZG9MSzVCQW9JQkFFaXYwZWJFcTJvcGRRTFhVU2poaGU1MXVzVlUKY3NRSW51NVdzUXppNUhJczFEYjROeFd3VEtGMTF1YUV5N2ppSzZ0MTNjeHlVbU5nbVZKQ01QOG5yRllBbm1uKwpra3NJVWp6NTRBS3hoVTJIVEhnK3o3UXBZcnBNTXZUcmdVZmcyU2lSRStraTllMGVaRzNvb253VnhJYW1HT05WCnp6NHhuOGNwTURiTnhkbVhqQWcyYnF4ODQ0SlVteG9ONlVlbU1oNExxQi9GQldWU0ZKdEdVYXZIaHQycFNCaGYKZCtNK2dZZWNhRTJBS2I5MDlLYWJISVlqOElwSGNMZGl5QXNtUHRIZXNDTnB1VWtOVVd2STJHZ0NLRFJXek4xdAp0L1RiUzBlamJzVWwvUXFxdnE5ZWdqZW5uNThVL0d6eUZPNDRkL1NyZEkvc09sUlJ3dGNiVGorNTl1Yz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
        },
        "etcdVersion": {
            "defaultValue": "3.2.16",
            "metadata": {
                "description": "etcd version"
            },
            "type": "string"
        },
        "firstConsecutiveStaticIP": {
            "defaultValue": "20.0.0.5",
            "metadata": {
                "description": "Sets the static IP of the first master"
            },
            "type": "string"
        },
        "fqdnEndpointSuffix": {
            "defaultValue": "cloudapp.azure.com",
            "metadata": {
                "description": "Endpoint of FQDN."
            },
            "type": "string"
        },
        "gcHighThreshold": {
            "defaultValue": 85,
            "metadata": {
                "description": "High Threshold for Image Garbage collection on each node"
            },
            "type": "int"
        },
        "gcLowThreshold": {
            "defaultValue": 80,
            "metadata": {
                "description": "Low Threshold for Image Garbage collection on each node."
            },
            "type": "int"
        },
        "generatorCode": {
            "defaultValue": "acsengine",
            "metadata": {
                "description": "The generator code used to identify the generator"
            },
            "type": "string"
        },
        "kubeClusterCidr": {
            "defaultValue": "10.244.0.0/16",
            "metadata": {
                "description": "Kubernetes cluster subnet"
            },
            "type": "string"
        },
        "kubeConfigCertificate": {
            "metadata": {
                "description": "The base 64 certificate used by cli to communicate with the master"
            },
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU5ekNDQXQrZ0F3SUJBZ0lSQVBXbWtPZ2h5S1BObFlJWUxTRjlNakl3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTVRnd05ESTNNVFEwTnpVMldoY05NakF3TkRJMk1UUTBOelUyV2pBcQpNUmN3RlFZRFZRUUtFdzV6ZVhOMFpXMDZiV0Z6ZEdWeWN6RVBNQTBHQTFVRUF4TUdZMnhwWlc1ME1JSUNJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXpBRkpLTnAyWUxCSHBEdnRSYUkvM0VvNU5weGQKYXlkb25oVWpORjNnK0grcndCeVcyNVBkNHFNRUhVSEY4dUs5Q2dqVHBlZGZXeTNTY3FpdnhDbXh2ZEErSWlWWgpJNVpFc1prS1dHUnpQTzZUWVdRQWFOZnRsUEFUOGlpY0RySXZzcUZxR0tSRjNjd1lQWFBoMVRrcTFybm5keUE0CkhYV0ZDZjJDRnp2L0FmUjBSY3lCbld4Y1lmODVlVWhUMjRHVWUyY29mdW1nalZqbmw2UE1RZ0hqVzZlYmJUVWwKNkJtZ0pNTHVobnRidlI3cHlleVBINDluOG5nOElaOE8vaTIxTno4dXN0Q1V3NzhkK1p5Ykx4ZDdCbDBLNmJtdQpQS0hiYVU4aHg3RGpyVkFtS1BSV3hBS3Y0eE1rUG9QN3Zxc2hXcHA5R2hwNlFWQThENWlOS0l2dW5iaUsyQktCCkRmK280SXdObVhBTXNuWUwwZGxnWEorb0NPUDR6ek1kVTBTQm1nUXp5bXFDTWNqWHk1SlJUMHQ3bnZ1dE4vSWgKS3Rka2t4REdGK0ozMzVxekNEdDhZZzZPMysxVmhYWVowazAvcUZWUkp5eGJKdm9zUXRtUlQxUzNpTUdUNFdZdQpuOS94YnZZalhVQWsrUHd1cS9Ud0VTQ3pNSGRFTG1pTXVRKy9EOExhZnF6ZEZKV1AyYUlZR3h6b3ZyYkdyYkpqCnpLU0V6Ynd6MXlQbDZrNXR1Q3prWnhyYkY0cE54anR1cnpFa0tmclhneXpwR2Q4bTdLV1k1ZytuOFlFa2g1cDYKdjJwWWJoekl5Sm9ETXVYOXg0aTRGYytKMVNXVUFxRkJ2eUwzTDBhZ3VvMWRReE1XOXB4U3d3UmdSREFXWjJpKwpFN01IR3gwYUYwbm9vblVDQXdFQUFhTTFNRE13RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU1NQW9HCkNDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUl2bE1DMHYKdmxmM1RzaHNUNG9Ic1JzdkJ3cjloajVFT2NvQTZVbEpIdjFQdFE1QStDM1JEU09Pbk01ZWRMQmV4R3kvVWNtdgo1emEza002RkxwZCs3aTVaWE5UdTA0Q21QaDFTcUFsVTBlTGVIZGFOY05HZkVKRlh5anBkTTQzQ2w0c3ZITGlzCmNqN09JTkZweG9mMlVHcnFhWEFOTksyRU1kYkpUelNZVFBHMkwyZElTVzR0YSt3bDhEQXlQUk13SkVERXRuYlAKY2ZaOWdsRzNCMU5jdjlZWjA0K1pCdXVHNEVKQUhpM1Myc096ekxXUjR3SjhobWdSS3M4aDZuM2ozdzFtMzdyOQorSnlFb1k4ODYzTEdlbjVTMFNxTzZodXZxRXV0cUdNTmtzQmhsM2tZYVhZRk1VN2k1QjNxTWFrM2VyZ0N1SlVICm9nV0JSUG1EZW56U2phMDdqOU1uWVZPSUVnK0FKSGNvdXczRDM0YmRoeU1pYTR4ZmxTVm96eUFMQmhzV1BrdW4KK3FOTk82U0ZDN1o0K2hMUnhVYWQ2eXJyOFBFRHovNERGMVdINFdHU1ZHemEvLzRBN2lWOERqa0ZUZTlLTG5Gbwp2OCtqRGI2akZlbGNpRzVnQmdmdkpickhRdXFHalNoVFVodmpyWHdEMjdhUkUydTNyM1Z4TkdLdVYzTjR1SDNsClNyWlBFd3lwdFAzRDJJZ3oxdnduN29mMHlDR09LT3d1Yk02R1R5VWYwdUR2aE1VY3U1TWphOGFDVWZmejRUU2UKdkJyS2VuZk9SaXB0NkhLVlB1UVJVS00xS1I4QVBtUHlWNUozZTNyTFVZT1o4TXQ2ZGZSTGZWTy9XZjUvWE9SOApKOGN4RFJTWEJ1YzFJeVp4RU1wUFU4WWh3dXBhZnRyeVZDWUMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
        },
        "kubeConfigPrivateKey": {
            "metadata": {
                "description": "The base 64 private key used by cli to communicate with the master"
            },
            "type": "securestring",
            "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS2dJQkFBS0NBZ0VBekFGSktOcDJZTEJIcER2dFJhSS8zRW81TnB4ZGF5ZG9uaFVqTkYzZytIK3J3QnlXCjI1UGQ0cU1FSFVIRjh1SzlDZ2pUcGVkZld5M1NjcWl2eENteHZkQStJaVZaSTVaRXNaa0tXR1J6UE82VFlXUUEKYU5mdGxQQVQ4aWljRHJJdnNxRnFHS1JGM2N3WVBYUGgxVGtxMXJubmR5QTRIWFdGQ2YyQ0Z6di9BZlIwUmN5QgpuV3hjWWY4NWVVaFQyNEdVZTJjb2Z1bWdqVmpubDZQTVFnSGpXNmViYlRVbDZCbWdKTUx1aG50YnZSN3B5ZXlQCkg0OW44bmc4SVo4Ty9pMjFOejh1c3RDVXc3OGQrWnliTHhkN0JsMEs2Ym11UEtIYmFVOGh4N0RqclZBbUtQUlcKeEFLdjR4TWtQb1A3dnFzaFdwcDlHaHA2UVZBOEQ1aU5LSXZ1bmJpSzJCS0JEZitvNEl3Tm1YQU1zbllMMGRsZwpYSitvQ09QNHp6TWRVMFNCbWdRenltcUNNY2pYeTVKUlQwdDdudnV0Ti9JaEt0ZGtreERHRitKMzM1cXpDRHQ4CllnNk8zKzFWaFhZWjBrMC9xRlZSSnl4Ykp2b3NRdG1SVDFTM2lNR1Q0V1l1bjkveGJ2WWpYVUFrK1B3dXEvVHcKRVNDek1IZEVMbWlNdVErL0Q4TGFmcXpkRkpXUDJhSVlHeHpvdnJiR3JiSmp6S1NFemJ3ejF5UGw2azV0dUN6awpaeHJiRjRwTnhqdHVyekVrS2ZyWGd5enBHZDhtN0tXWTVnK244WUVraDVwNnYycFliaHpJeUpvRE11WDl4NGk0CkZjK0oxU1dVQXFGQnZ5TDNMMGFndW8xZFF4TVc5cHhTd3dSZ1JEQVdaMmkrRTdNSEd4MGFGMG5vb25VQ0F3RUEKQVFLQ0FnRUF2OHZwcTJZUTY0QndLb0ZJNXpIT2xsNldBYmpxdjJaeW5rVkRMdVdnTUNGZ0tTTDMxZ0xrRmtLcgpDSktnOTJTaTAvOU9kT2pkcHN5aTBiZTBZRm5PeUtVeTlVbGx6K1prT1JDb1FFaFlhNDNsdENlZmx2S0RaSVorClNpcFI1aU15WXVBTTdwUHJOOGE5ZDNFdWZoZmNKYnJzV2Z4SnBiQ3FYcVVmbkphRWZxTUVlZWIyYVRuS2RUdk8KSGkrWTM0T3BSSWZNODl6VVhHK2NkTjNEbUw5THNRMFlQSWsrVlVOYVk1VjlTYVJLc0xpU2xvdzRWelN0UnJJeAozbTQ3VzA4LzAyd3NqR003cWZsUnhpNnRXNDNZMVRlK25kVTdjYmUrbi9pTXlzQ01uWkgvL25zUjVBQ2V1bjl4CmtQRG5TdkI3VUVKMG9Za0pMY1N3WXYxS29UZEdJd1pQaUwxaTJkN1JjTDg0MlVSZDhJT0ozenVpYnVuNXF1NFMKQkNRQ1A5M0pTaWU1YVAwclZLSE9MRGZObjZHMHBtMWRvMEJMUloxcTB0REc1aVhhdzBYTEduSU1VcktXRUgrZQpERTdrbklCSGNIRmc1NXFoSWhxbjhKVnlxdHc2L1hVM21uWEJ3Umx3c3N2QmxnWERpUzFQaUZTTC9XM1hoQXpLCkZ3SUEwQ0FVWFRKWUpvWlRzRjVlWGRpV2dVdnZXMHprQUFrTkpwMEhGSk9xMzhIUXN5cXlzWnp5T0FjaW1wTXYKT2MzU2lEek5QUjFWRDNPMGNaaWdha0VkNWFLa205Q2N1RndVTHdZUStkcjBpQUhScGZnRHVOL25hVTZmWUNuZAoyd1ZFdVdSUmhrdG54MlRod0lBS1d2RGRxd1RhS245dDNGa1BISnRzSkdlQVo2UStIbFVDZ2dFQkFOZ21WT2dQCllBcDk3TUQ3OWtEdnpMa2oyVUV2alFESlJSYUE2TmtBM3BtbG1lek0vUG1nTTZkcjY4b1B5SG9HVWhRYnEzL2EKc2MxbTkrQjh4TDhOWU8yeDJKYmFucG5VUlJSRnBzVDVyWjZLRW93elhQU0FLOWNEZ3pDZWpZaHdDMUtMNUpONgpOM0d2SVJNYm8xcFp4SzhDYTlxTkNBcGxWNTcrYXMzZFZwcDhlbnVHK1cyTkZ0Tmh6RU8vVDU3TGxLdXp1NGRnCnBuVTJvR0dUejZBTnZxR2lRRzYwUXhQbVVNUnVod3RhSy9ZY2dOSUZNRlhHZW5Xbk8wcnFLQ3luRkN0NnVVaFEKM0RlNDRxUDkrOUZOVzkzbmgzUVQwVGJ6TEo3V3pqZm9PNTBuRk50RkNMWElRYndXc0F5bEdUbGR3THJDSHAxUAorbGlZMVFrVENpdGZDOHNDZ2dFQkFQR2R3ZWR5OTJtUFdmdVZHQ1JFbGJud0g3R0thbitpeVR6NytoWmNYOHNiCnlSeEc2VVNDQWpLVDF1SDRpNUhvcTlhWWhhTUw4ODZybDg3cEttYTNZalZ2Y0JBcUFHTVFSZVFtSXMxa0p2QmgKZnlGTURkWDdLVXBEcDRUTjZTTG5hMGpZQ0tyQVB1SytwaXExTCtzWTMvOFRYMjBRQW5QYXdqWlJDb2Z2WVlZTwpXUEJ2VHYzVTErRHdjSGMwS1lieHd3b3ZBZzA5L2NVZUVOdG9DNTM4RnRZN1JOS2lla2kvM0psaUNGNW1wU1VrCitrV1o4NlJFbitYZW1BUU96NUZFdkd4YjR1YVNiVU1FcURwTU9SNnMyNnlITlV6bXJIdThDVHV5MWJGN2xzV1oKSmhwaFZGanF6eXE5Z042R3VISG5qalZqbDNpTUxXQ1g2Z2lYRDdGTndyOENnZ0VCQUxZcGwrVDdFRFhIYW9BNQoySTloaVdkK2p0b2crUFJ3cTRrTG16RkhTbEt5L2NaVCs5OWs1Q04xRUlKNlNycU1HU0JaTVcvUEg0bTcvYXR6CmUxeUlLZWdvdWlCb25zR0Y0N0h5QVZxQUVaSkxTdFpkY3ptYnkxYXAzeVphZVcxREFFZlJIaElzTGczaFNqNlEKVEZzWXpHbXg0TE9QcC9jYThYMU5iVFdTRkNxZVBadGRaVml1VDA1V1hZKzY2NThvYzJOQlZnb0Jxa2VlZ2d1NgpSb0RkRkl1ajhpbGFRaTNETE01ZlYvQjVUaE5jY2pTTnF1NmZGeFdRbXFmSUw1TnlPODFvNEQzUjU4WU9Tdk5xCldZOUxZdURnLzRjVUxIM2k4dmZxa0dFTmx6QWFmN2xMdE10K3VlZUtOMVJ3ejVGSk1lUXpOUm5mRFYwZGNHejEKWHR5dWZZRUNnZ0VCQUx3UUlmU0gvT0hTTGFUd0dObHA5T3pFWmJib1dScTkxMHM3aWg1TGlsaHFhVEEwVmE3NApUc09WWlNXQU13ckFBcmpIQVFXMjhPK0ZpbVVJQWZQdmUyYkNOWVN2WEp1Kzk5ZXNnMXhCUHpuTmVZbXVTL3FwClF5dEYyNmM0S3VYN0lQdVRBN1A4YlRaS1ZNWmJQMUFMalpaYU91V0dGNUtiekoxQW1TVFRnNkkzbXF5U3h2WTEKN0U1dWQrdWcwMDN3OGZJRVF1R1J4ZXZmQ2hudE0xV2wrUlNKRDNtdjgrU2FTaGV0UVh4UkF1d1ZpeVFQdjUrMQp0b3ZTcFpwSytPOUdoQzhIbW1ZRHhUM3I2eEZ0Y094YWVhWWhtN0Fld0ZTVE9OQ1owMUVSTkhyYlNOZ3h0OWg1CjlBUjlla2c2cm1naVp3TlJZSDM1QmZ6d1liNkw3akFBcWJzQ2dnRUFBWHdDRHVneG1QRGJpbU13U3k3dXhFbm0KUFoyMUt5RVZNZGF3Y2VLWkRGN2J1dU4wUFE5STE4cmsxcDhmcXRnVGs1NitiM1MwZnh2Q1RLa054WE1VUFVxYwpIZm1nYUsrMjJtM3ZKV3k2SGhpS2lBNVNsM2k2U3hRRGdKU2IzYzBLTUpSM0hLVEFaQVM3TjU0OEp0YWlrSHNpCndyc1pmUFlIU1I3cENXa3hqMGlKNmoycFRvOHp2YWVjNytIUzdaTUhGbE9jSFE3ZkNWTGt3b3FsQXgweTNCK0gKUzVxWUNxaDVqL0xSaHhLN2hsQjlwSm1BazR5RjJiaGlrWlMraVFsTzlEWVpTMVhzMnBsMVh2MFNjakhDUHIxbAo5UlBtMlRxNm5ybVpDZ1ZrQSszMGcyTEZJY0pQQnVxa2JveTNEaXNqaEJFSDFFMnRDM1hBbmVrZHJnbXZzdz09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
        },
        "kubeDNSServiceIP": {
            "defaultValue": "10.0.0.10",
            "metadata": {
                "description": "Kubernetes DNS IP"
            },
            "type": "string"
        },
        "kubeServiceCidr": {
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "Kubernetes service address space"
            },
            "type": "string"
        },
        "kubernetesACIConnectorCPULimit": {
            "defaultValue": "50m",
            "metadata": {
                "description": "ACI Connector CPU Limit"
            },
            "type": "string"
        },
        "kubernetesACIConnectorCPURequests": {
            "defaultValue": "50m",
            "metadata": {
                "description": "ACI Connector CPU Requests"
            },
            "type": "string"
        },
        "kubernetesACIConnectorClientId": {
            "defaultValue": "",
            "metadata": {
                "description": "Client id for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorClientKey": {
            "defaultValue": "",
            "metadata": {
                "description": "Client key for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorMemoryLimit": {
            "defaultValue": "150Mi",
            "metadata": {
                "description": "ACI Connector Memory Limit"
            },
            "type": "string"
        },
        "kubernetesACIConnectorMemoryRequests": {
            "defaultValue": "150Mi",
            "metadata": {
                "description": "ACI Connector Memory Requests"
            },
            "type": "string"
        },
        "kubernetesACIConnectorNodeName": {
            "defaultValue": "aci-connector",
            "metadata": {
                "description": "Node name for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorOS": {
            "defaultValue": "Linux",
            "metadata": {
                "description": "OS for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorRegion": {
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Region for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorResourceGroup": {
            "defaultValue": "",
            "metadata": {
                "description": "Resource group for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorSpec": {
            "defaultValue": "microsoft/virtual-kubelet:latest",
            "metadata": {
                "description": "The container spec for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorSubscriptionId": {
            "defaultValue": "",
            "metadata": {
                "description": "Subscription id for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorTaint": {
            "defaultValue": "azure.com/aci",
            "metadata": {
                "description": "Taint for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesACIConnectorTenantId": {
            "defaultValue": "",
            "metadata": {
                "description": "Tenant id for ACI Connector."
            },
            "type": "string"
        },
        "kubernetesAddonManagerSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/kube-addon-manager-amd64:v8.6",
            "metadata": {
                "description": "The container spec for hyperkube."
            },
            "type": "string"
        },
        "kubernetesAddonResizerSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/addon-resizer:1.7",
            "metadata": {
                "description": "The container spec for addon-resizer."
            },
            "type": "string"
        },
        "kubernetesCcmImageSpec": {
            "defaultValue": "",
            "metadata": {
                "description": "The container spec for cloud-controller-manager."
            },
            "type": "string"
        },
        "kubernetesDNSMasqSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/k8s-dns-dnsmasq-nanny-amd64:1.14.8",
            "metadata": {
                "description": "The container spec for kube-dnsmasq-amd64."
            },
            "type": "string"
        },
        "kubernetesDashboardCPULimit": {
            "defaultValue": "300m",
            "metadata": {
                "description": "Dashboard CPU Limit."
            },
            "type": "string"
        },
        "kubernetesDashboardCPURequests": {
            "defaultValue": "300m",
            "metadata": {
                "description": "Dashboard CPU Requests."
            },
            "type": "string"
        },
        "kubernetesDashboardMemoryLimit": {
            "defaultValue": "150Mi",
            "metadata": {
                "description": "Dashboard Memory Limit."
            },
            "type": "string"
        },
        "kubernetesDashboardMemoryRequests": {
            "defaultValue": "150Mi",
            "metadata": {
                "description": "Dashboard Memory Requests."
            },
            "type": "string"
        },
        "kubernetesDashboardSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/kubernetes-dashboard-amd64:v1.8.3",
            "metadata": {
                "description": "The container spec for kubernetes-dashboard-amd64."
            },
            "type": "string"
        },
        "kubernetesExecHealthzSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/exechealthz-amd64:1.2",
            "metadata": {
                "description": "The container spec for exechealthz-amd64."
            },
            "type": "string"
        },
        "kubernetesHeapsterSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/heapster-amd64:v1.5.1",
            "metadata": {
                "description": "The container spec for heapster."
            },
            "type": "string"
        },
        "kubernetesHyperkubeSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/hyperkube-amd64:v1.10.1",
            "metadata": {
                "description": "The container spec for hyperkube."
            },
            "type": "string"
        },
        "kubernetesKubeDNSSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/k8s-dns-kube-dns-amd64:1.14.8",
            "metadata": {
                "description": "The container spec for kubedns-amd64."
            },
            "type": "string"
        },
        "kubernetesKubeletClusterDomain": {
            "metadata": {
                "description": "--cluster-domain Kubelet config"
            },
            "type": "string",
            "defaultValue": "cluster.local"
        },
        "kubernetesMetricsServerSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/metrics-server-amd64:v0.2.1",
            "metadata": {
                "description": "The container spec for Metrics Server."
            },
            "type": "string"
        },
        "kubernetesNonMasqueradeCidr": {
            "metadata": {
                "description": "kubernetesNonMasqueradeCidr cluster subnet"
            },
            "type": "string",
            "defaultValue": "10.244.0.0/16"
        },
        "kubernetesPodInfraContainerSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/pause-amd64:3.1",
            "metadata": {
                "description": "The container spec for pod infra."
            },
            "type": "string"
        },
        "kubernetesReschedulerCPULimit": {
            "defaultValue": "10m",
            "metadata": {
                "description": "Rescheduler CPU Limit."
            },
            "type": "string"
        },
        "kubernetesReschedulerCPURequests": {
            "defaultValue": "10m",
            "metadata": {
                "description": "Rescheduler CPU Requests."
            },
            "type": "string"
        },
        "kubernetesReschedulerMemoryLimit": {
            "defaultValue": "100Mi",
            "metadata": {
                "description": "Rescheduler Memory Limit."
            },
            "type": "string"
        },
        "kubernetesReschedulerMemoryRequests": {
            "defaultValue": "100Mi",
            "metadata": {
                "description": "Rescheduler Memory Requests."
            },
            "type": "string"
        },
        "kubernetesReschedulerSpec": {
            "defaultValue": "k8s-gcrio.azureedge.net/rescheduler:v0.3.1",
            "metadata": {
                "description": "The container spec for rescheduler."
            },
            "type": "string"
        },
        "kubernetesTillerCPULimit": {
            "defaultValue": "50m",
            "metadata": {
                "description": "Helm Tiller CPU Limit."
            },
            "type": "string"
        },
        "kubernetesTillerCPURequests": {
            "defaultValue": "50m",
            "metadata": {
                "description": "Helm Tiller CPU Requests."
            },
            "type": "string"
        },
        "kubernetesTillerMaxHistory": {
            "defaultValue": "0",
            "metadata": {
                "description": "Helm Tiller Max History to Store. '0' for no limit."
            },
            "type": "string"
        },
        "kubernetesTillerMemoryLimit": {
            "defaultValue": "150Mi",
            "metadata": {
                "description": "Helm Tiller Memory Limit."
            },
            "type": "string"
        },
        "kubernetesTillerMemoryRequests": {
            "defaultValue": "150Mi",
            "metadata": {
                "description": "Helm Tiller Memory Requests."
            },
            "type": "string"
        },
        "kubernetesTillerSpec": {
            "defaultValue": "gcrio.azureedge.net/kubernetes-helm/tiller:v2.8.1",
            "metadata": {
                "description": "The container spec for Helm Tiller."
            },
            "type": "string"
        },
        "linuxAdminUsername": {
            "metadata": {
                "description": "User name for the Linux Virtual Machines (SSH or Password)."
            },
            "type": "string",
            "defaultValue": "azureuser"
        },
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Sets the location for all resources in the cluster"
            },
            "type": "string"
        },
        "masterEndpointDNSNamePrefix": {
            "metadata": {
                "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
            },
            "type": "string",
            "defaultValue": "tdproduction"
        },
        "masterOffset": {
            "allowedValues": [
                0,
                1,
                2,
                3,
                4
            ],
            "defaultValue": 0,
            "metadata": {
                "description": "The offset into the master pool where to start creating master VMs.  This value can be from 0 to 4, but must be less than masterCount."
            },
            "type": "int"
        },
        "masterVMSize": {
            "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A10",
                "Standard_A11",
                "Standard_A1_v2",
                "Standard_A2",
                "Standard_A2_v2",
                "Standard_A2m_v2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A4_v2",
                "Standard_A4m_v2",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A8_v2",
                "Standard_A8m_v2",
                "Standard_A9",
                "Standard_B1ms",
                "Standard_B1s",
                "Standard_B2ms",
                "Standard_B2s",
                "Standard_B4ms",
                "Standard_B8ms",
                "Standard_D1",
                "Standard_D11",
                "Standard_D11_v2",
                "Standard_D11_v2_Promo",
                "Standard_D12",
                "Standard_D12_v2",
                "Standard_D12_v2_Promo",
                "Standard_D13",
                "Standard_D13_v2",
                "Standard_D13_v2_Promo",
                "Standard_D14",
                "Standard_D14_v2",
                "Standard_D14_v2_Promo",
                "Standard_D15_v2",
                "Standard_D16_v3",
                "Standard_D16s_v3",
                "Standard_D1_v2",
                "Standard_D2",
                "Standard_D2_v2",
                "Standard_D2_v2_Promo",
                "Standard_D2_v3",
                "Standard_D2s_v3",
                "Standard_D3",
                "Standard_D32_v3",
                "Standard_D32s_v3",
                "Standard_D3_v2",
                "Standard_D3_v2_Promo",
                "Standard_D4",
                "Standard_D4_v2",
                "Standard_D4_v2_Promo",
                "Standard_D4_v3",
                "Standard_D4s_v3",
                "Standard_D5_v2",
                "Standard_D5_v2_Promo",
                "Standard_D64_v3",
                "Standard_D64s_v3",
                "Standard_D8_v3",
                "Standard_D8s_v3",
                "Standard_DS1",
                "Standard_DS11",
                "Standard_DS11_v2",
                "Standard_DS11_v2_Promo",
                "Standard_DS12",
                "Standard_DS12_v2",
                "Standard_DS12_v2_Promo",
                "Standard_DS13",
                "Standard_DS13-2_v2",
                "Standard_DS13-4_v2",
                "Standard_DS13_v2",
                "Standard_DS13_v2_Promo",
                "Standard_DS14",
                "Standard_DS14-4_v2",
                "Standard_DS14-8_v2",
                "Standard_DS14_v2",
                "Standard_DS14_v2_Promo",
                "Standard_DS15_v2",
                "Standard_DS1_v2",
                "Standard_DS2",
                "Standard_DS2_v2",
                "Standard_DS2_v2_Promo",
                "Standard_DS3",
                "Standard_DS3_v2",
                "Standard_DS3_v2_Promo",
                "Standard_DS4",
                "Standard_DS4_v2",
                "Standard_DS4_v2_Promo",
                "Standard_DS5_v2",
                "Standard_DS5_v2_Promo",
                "Standard_E16_v3",
                "Standard_E16s_v3",
                "Standard_E2_v3",
                "Standard_E2s_v3",
                "Standard_E32-16s_v3",
                "Standard_E32-8s_v3",
                "Standard_E32_v3",
                "Standard_E32s_v3",
                "Standard_E4_v3",
                "Standard_E4s_v3",
                "Standard_E64-16s_v3",
                "Standard_E64-32s_v3",
                "Standard_E64_v3",
                "Standard_E64s_v3",
                "Standard_E8_v3",
                "Standard_E8s_v3",
                "Standard_F1",
                "Standard_F16",
                "Standard_F16s",
                "Standard_F16s_v2",
                "Standard_F1s",
                "Standard_F2",
                "Standard_F2s",
                "Standard_F2s_v2",
                "Standard_F32s_v2",
                "Standard_F4",
                "Standard_F4s",
                "Standard_F4s_v2",
                "Standard_F64s_v2",
                "Standard_F72s_v2",
                "Standard_F8",
                "Standard_F8s",
                "Standard_F8s_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS4-4",
                "Standard_GS4-8",
                "Standard_GS5",
                "Standard_GS5-16",
                "Standard_GS5-8",
                "Standard_H16",
                "Standard_H16m",
                "Standard_H16mr",
                "Standard_H16r",
                "Standard_H8",
                "Standard_H8m",
                "Standard_L16s",
                "Standard_L32s",
                "Standard_L4s",
                "Standard_L8s",
                "Standard_M128-32ms",
                "Standard_M128-64ms",
                "Standard_M128ms",
                "Standard_M128s",
                "Standard_M64-16ms",
                "Standard_M64-32ms",
                "Standard_M64ms",
                "Standard_M64s",
                "Standard_NC12",
                "Standard_NC12s_v2",
                "Standard_NC12s_v3",
                "Standard_NC24",
                "Standard_NC24r",
                "Standard_NC24rs_v2",
                "Standard_NC24rs_v3",
                "Standard_NC24s_v2",
                "Standard_NC24s_v3",
                "Standard_NC6",
                "Standard_NC6s_v2",
                "Standard_NC6s_v3",
                "Standard_ND12s",
                "Standard_ND24rs",
                "Standard_ND24s",
                "Standard_ND6s",
                "Standard_NV12",
                "Standard_NV24",
                "Standard_NV6"
            ],
            "metadata": {
                "description": "The size of the Virtual Machine."
            },
            "type": "string",
            "defaultValue": "Standard_D2_v2"
        },
        "masterVnetSubnetID": {
            "metadata": {
                "description": "Sets the vnet subnet of the master."
            },
            "type": "string",
            "defaultValue": "/subscriptions/e39b9baa-50b5-4665-8297-2fa801ed1fa4/resourceGroups/td-poc-rsg/providers/Microsoft.Network/virtualNetworks/td-poc-vnet/subnets/master"
        },
        "maxPods": {
            "defaultValue": 30,
            "metadata": {
                "description": "This param has been deprecated."
            },
            "type": "int"
        },
        "nameSuffix": {
            "defaultValue": "6b876ca",
            "metadata": {
                "description": "A string hash of the master DNS name to uniquely identify the cluster."
            },
            "type": "string"
        },
        "networkPolicy": {
            "allowedValues": [
                "none",
                "azure",
                "calico",
                "cilium"
            ],
            "defaultValue": "none",
            "metadata": {
                "description": "The network policy enforcement to use (none|azure|calico|cilium)"
            },
            "type": "string"
        },
        "orchestratorName": {
            "defaultValue": "k8s",
            "maxLength": 3,
            "metadata": {
                "description": "The orchestrator name used to identify the orchestrator.  This must be no more than 3 digits in length, otherwise it will exceed Windows Naming"
            },
            "minLength": 3,
            "type": "string"
        },
        "osImageName": {
            "defaultValue": "",
            "metadata": {
                "description": "Name of a Linux OS image. Needs to be used in conjuction with osImageResourceGroup."
            },
            "type": "string"
        },
        "osImageOffer": {
            "defaultValue": "UbuntuServer",
            "metadata": {
                "description": "Linux OS image type."
            },
            "type": "string"
        },
        "osImagePublisher": {
            "defaultValue": "Canonical",
            "metadata": {
                "description": "OS image publisher."
            },
            "type": "string"
        },
        "osImageResourceGroup": {
            "defaultValue": "",
            "metadata": {
                "description": "Resource group of a Linux OS image. Needs to be used in conjuction with osImageName."
            },
            "type": "string"
        },
        "osImageSKU": {
            "defaultValue": "16.04-LTS",
            "metadata": {
                "description": "OS image SKU."
            },
            "type": "string"
        },
        "osImageVersion": {
            "defaultValue": "16.04.201804050",
            "metadata": {
                "description": "OS image version."
            },
            "type": "string"
        },
        "servicePrincipalClientId": {
            "metadata": {
                "description": "Client ID (used by cloudprovider)"
            },
            "type": "securestring",
            "defaultValue": "2ddba07b-95b9-4d45-b224-f03afd5eefbd"
        },
        "servicePrincipalClientSecret": {
            "metadata": {
                "description": "The Service Principal Client Secret."
            },
            "type": "securestring",
            "defaultValue": "tdadmin2018"
        },
        "sshRSAPublicKey": {
            "metadata": {
                "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
            },
            "type": "string",
            "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8ujxcfRR4df4clP8up2LSQIB0w8CaQVLEFsiSnhgfXtLTR+QbrXhVpMvayhXpCCTJfqOSF0pGGEd+aEO1febNhq9eC0U/uL6VcD1h6AFRrnAeVe/T95AuFqbRJ8PVqegzLdan0kY/IbCbSt1tilBFFNKqxSADFufhrOj1Tt5qP/me/X6QFyypQeQXeNPIuDdCiQPppaKC7ZbmBUQDqbCsm2zINt1L1PE0LhoDLJuAE6EDwDLxnhEXBijumQzVSWpXvy2nqGrOjtaPZW6A1WH6dGEBjtj3HgWMQwuihwbq7nBILDAeOlJkUWD6SVyEz314K4KIHLu0otBlM4H1W8vR jvarughese@architech.ca"
        },
        "targetEnvironment": {
            "defaultValue": "AzurePublicCloud",
            "metadata": {
                "description": "The azure deploy environment. Currently support: AzurePublicCloud, AzureChinaCloud"
            },
            "type": "string"
        },
        "vnetCidr": {
            "defaultValue": "",
            "metadata": {
                "description": "Cluster vnet cidr"
            },
            "type": "string"
        },
        "vnetCniLinuxPluginsURL": {
            "defaultValue": "https://acs-mirror.azureedge.net/cni/azure-vnet-cni-linux-amd64-v1.0.2.tgz",
            "type": "string"
        },
        "vnetCniWindowsPluginsURL": {
            "defaultValue": "https://acs-mirror.azureedge.net/cni/azure-vnet-cni-windows-amd64-v1.0.2.zip",
            "type": "string"
        }
    },
    "variables": {
        "agentpri2AccountName": "[concat(variables('storageAccountBaseName'), 'agnt1')]",
        "agentpri2AvailabilitySet": "[concat('agentpri2-availabilitySet-', variables('nameSuffix'))]",
        "agentpri2Count": "[parameters('agentpri2Count')]",
        "agentpri2Index": 1,
        "agentpri2Offset": "[parameters('agentpri2Offset')]",
        "agentpri2StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),variables('agentpri2Index'))]",
        "agentpri2StorageAccountsCount": "[add(div(variables('agentpri2Count'), variables('maxVMsPerStorageAccount')), mod(add(mod(variables('agentpri2Count'), variables('maxVMsPerStorageAccount')),2), add(mod(variables('agentpri2Count'), variables('maxVMsPerStorageAccount')),1)))]",
        "agentpri2SubnetName": "[parameters('agentpri2VnetSubnetID')]",
        "agentpri2VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri2-', variables('nameSuffix'), '-')]",
        "agentpri2VMSize": "[parameters('agentpri2VMSize')]",
        "agentpri2VnetParts": "[split(parameters('agentpri2VnetSubnetID'),'/subnets/')]",
        "agentpri2VnetSubnetID": "[parameters('agentpri2VnetSubnetID')]",
        "agentpri2osImageName": "[parameters('agentpri2osImageName')]",
        "agentpri2osImageOffer": "[parameters('agentpri2osImageOffer')]",
        "agentpri2osImagePublisher": "[parameters('agentpri2osImagePublisher')]",
        "agentpri2osImageResourceGroup": "[parameters('agentpri2osImageResourceGroup')]",
        "agentpri2osImageSKU": "[parameters('agentpri2osImageSKU')]",
        "agentpri2osImageVersion": "[parameters('agentpri2osImageVersion')]",
        "agentpriAccountName": "[concat(variables('storageAccountBaseName'), 'agnt0')]",
        "agentpriAvailabilitySet": "[concat('agentpri-availabilitySet-', variables('nameSuffix'))]",
        "agentpriCount": "[parameters('agentpriCount')]",
        "agentpriIndex": 0,
        "agentpriOffset": "[parameters('agentpriOffset')]",
        "agentpriStorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),variables('agentpriIndex'))]",
        "agentpriStorageAccountsCount": "[add(div(variables('agentpriCount'), variables('maxVMsPerStorageAccount')), mod(add(mod(variables('agentpriCount'), variables('maxVMsPerStorageAccount')),2), add(mod(variables('agentpriCount'), variables('maxVMsPerStorageAccount')),1)))]",
        "agentpriSubnetName": "[parameters('agentpriVnetSubnetID')]",
        "agentpriVMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri-', variables('nameSuffix'), '-')]",
        "agentpriVMSize": "[parameters('agentpriVMSize')]",
        "agentpriVnetParts": "[split(parameters('agentpriVnetSubnetID'),'/subnets/')]",
        "agentpriVnetSubnetID": "[parameters('agentpriVnetSubnetID')]",
        "agentpriosImageName": "[parameters('agentpriosImageName')]",
        "agentpriosImageOffer": "[parameters('agentpriosImageOffer')]",
        "agentpriosImagePublisher": "[parameters('agentpriosImagePublisher')]",
        "agentpriosImageResourceGroup": "[parameters('agentpriosImageResourceGroup')]",
        "agentpriosImageSKU": "[parameters('agentpriosImageSKU')]",
        "agentpriosImageVersion": "[parameters('agentpriosImageVersion')]",
        "allocateNodeCidrs": true,
        "apiServerCertificate": "[parameters('apiServerCertificate')]",
        "apiServerPrivateKey": "[parameters('apiServerPrivateKey')]",
        "apiVersionDefault": "2016-03-30",
        "apiVersionLinkDefault": "2015-01-01",
        "apiVersionStorage": "2015-06-15",
        "apiVersionStorageManagedDisks": "2016-04-30-preview",
        "caCertificate": "[parameters('caCertificate')]",
        "caPrivateKey": "[parameters('caPrivateKey')]",
        "clientCertificate": "[parameters('clientCertificate')]",
        "clientPrivateKey": "[parameters('clientPrivateKey')]",
        "cloudProviderBackoff": "[parameters('cloudProviderBackoff')]",
        "cloudProviderBackoffDuration": "[parameters('cloudProviderBackoffDuration')]",
        "cloudProviderBackoffExponent": "[parameters('cloudProviderBackoffExponent')]",
        "cloudProviderBackoffJitter": "[parameters('cloudProviderBackoffJitter')]",
        "cloudProviderBackoffRetries": "[parameters('cloudProviderBackoffRetries')]",
        "cloudProviderRatelimit": "[parameters('cloudProviderRatelimit')]",
        "cloudProviderRatelimitBucket": "[parameters('cloudProviderRatelimitBucket')]",
        "cloudProviderRatelimitQPS": "[parameters('cloudProviderRatelimitQPS')]",
        "cniPluginsURL": "[parameters('cniPluginsURL')]",
        "containerRuntime": "[parameters('containerRuntime')]",
        "contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "dataStorageAccountPrefixSeed": 97,
        "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]",
        "dockerEngineDownloadRepo": "[parameters('dockerEngineDownloadRepo')]",
        "dockerEngineVersion": "[parameters('dockerEngineVersion')]",
        "etcdCaFilepath": "/etc/kubernetes/certs/ca.crt",
        "etcdClientCertFilepath": "/etc/kubernetes/certs/etcdclient.crt",
        "etcdClientCertificate": "[parameters('etcdClientCertificate')]",
        "etcdClientKeyFilepath": "/etc/kubernetes/certs/etcdclient.key",
        "etcdClientPrivateKey": "[parameters('etcdClientPrivateKey')]",
        "etcdDiskSizeGB": "[parameters('etcdDiskSizeGB')]",
        "etcdDownloadURLBase": "[parameters('etcdDownloadURLBase')]",
        "etcdPeerCertFilepath": [
            "/etc/kubernetes/certs/etcdpeer0.crt",
            "/etc/kubernetes/certs/etcdpeer1.crt",
            "/etc/kubernetes/certs/etcdpeer2.crt",
            "/etc/kubernetes/certs/etcdpeer3.crt",
            "/etc/kubernetes/certs/etcdpeer4.crt"
        ],
        "etcdPeerCertificates": [
            "[parameters('etcdPeerCertificate0')]"
        ],
        "etcdPeerKeyFilepath": [
            "/etc/kubernetes/certs/etcdpeer0.key",
            "/etc/kubernetes/certs/etcdpeer1.key",
            "/etc/kubernetes/certs/etcdpeer2.key",
            "/etc/kubernetes/certs/etcdpeer3.key",
            "/etc/kubernetes/certs/etcdpeer4.key"
        ],
        "etcdPeerPrivateKeys": [
            "[parameters('etcdPeerPrivateKey0')]"
        ],
        "etcdServerCertFilepath": "/etc/kubernetes/certs/etcdserver.crt",
        "etcdServerCertificate": "[parameters('etcdServerCertificate')]",
        "etcdServerKeyFilepath": "/etc/kubernetes/certs/etcdserver.key",
        "etcdServerPrivateKey": "[parameters('etcdServerPrivateKey')]",
        "etcdVersion": "[parameters('etcdVersion')]",
        "fqdnEndpointSuffix": "[parameters('fqdnEndpointSuffix')]",
        "gcHighThreshold": "[parameters('gcHighThreshold')]",
        "gcLowThreshold": "[parameters('gcLowThreshold')]",
        "generateProxyCertsScript": "H4sIAAAAAAAA/5RW/2+jxhP9nb9izrbOiXQEcC7ffPLnI4tQXZQ0STGVGrUVWsPYbA27ZHedxL3L/14tNgQc4179k5md9+btm2FE94M1pcyaEpkYhuRLESFYPFcW+Xsp0Io4U4QyFNLKBX+iknIWrtOONOLev/vtIXTH4bX3MOr0vtWfhyNLZbnGvazMKKXIlBmRowWuXjsl0A9qKD9ogURCvUFurrzbYKteFdtB0Cy4znQn/ju0O/F3oSMp3qEbqqvYTnSh3Avcy9D3fvnVmwRfvfGl51ewsWbadz4crRkjFEpaAh+XKFWCJEbx5pA5oymWhTa6vLXKrVCTrmk0CrWDaON0M7KHZoGrkuX6fBJWE+H6QfjT1Y13Pw6+asLWw+HIQhVZi+UUBUOF0mpUKcfhDX/tPbQw10/20m6GpKapXe2PSt3oNPAl50KBNtANbkLv9vL+7uo2mJSuNoLDUaJULoeW5QzOjuwj+8gZDo7PLl472zzuuJBRZ9mE2lRV1m0xlS7VqcpYGxeqKG68X9vqvI1NDX1l8AdYG0r98e1lQdY7yBYKs/zQMLowR4aCKATBuQJ3bPAcmZSpPhCSgMmXCnr1lQQD+/N5lSbwEUyGz2C+nNgXYMZkJcE5H5yCHuItZIPMD8CUy+lf0Lfc21HRbbeQ7Y77dWGaXN9sr7JqebWpq4t5S97B4U78ui4ynwucE8WFdTeSK6kwG2ZEKhSyX5VZX70oVtz/7NgGk7JdzO64YYA73uGSRBVKFJSkYA92avQDw3gWVGFY9DxUPIypXBwcwjcDAKCYAaWtUtDbtxnhf9BrXSItVNVaaILre2IvUk/wVt3tol3wMeNPCM8JVShzEiHkJI4pmwNRMMU5ZUw/8Bk4UkFKGRZAiTGYFPqOtP6QltXfc7s2AXvvFCUZj+HUtluzXnd2JnymKgkFKrGqmjTjAihQBg4M4Bg+wwmcwhmcwwU4NjgOOIMvEPMiV/920FZnv0Pv/2DiI9gAf8LHjzAVSBbw/TvIFDGHkyIz5gy1wC5MUx4tYMkUTYGkadEroBIEknhlFDqjLA7pLJwRmi4FgmPbcKKFlW2N0qV+DcwESaoSows/kwWuiRa4kp+g7BekSIp/tWZOMSJLuUl/5qyvgEQR5goIPJEUVFK2WYK2Dgj0zT4cJKs8QXb4waCzSki2+JcZ70DvICIKah9Jr4edL6ASZI1JrZjeRvwdtloer4edfeBiylvQawHrga21Z//cGF24mmnNRcV1wYhnGWEx6CZh/GltW4aEySJR7xaSFj0FfKFSSQNTif+18Iwa/wQAAP//gHPm/+MKAAA=",
        "generatorCode": "[parameters('generatorCode')]",
        "kubeClusterCidr": "[parameters('kubeClusterCidr')]",
        "kubeConfigCertificate": "[parameters('kubeConfigCertificate')]",
        "kubeConfigPrivateKey": "[parameters('kubeConfigPrivateKey')]",
        "kubeDNSServiceIP": "[parameters('kubeDNSServiceIP')]",
        "kubeServiceCidr": "[parameters('kubeServiceCidr')]",
        "kubeconfigServer": "[concat('https://', variables('masterFqdnPrefix'), '.', variables('location'), '.', variables('fqdnEndpointSuffix'))]",
        "kubernetesACIConnectorCPULimit": "[parameters('kubernetesACIConnectorCPULimit')]",
        "kubernetesACIConnectorCPURequests": "[parameters('kubernetesACIConnectorCPURequests')]",
        "kubernetesACIConnectorClientId": "[parameters('kubernetesACIConnectorClientId')]",
        "kubernetesACIConnectorClientKey": "[parameters('kubernetesACIConnectorClientKey')]",
        "kubernetesACIConnectorMemoryLimit": "[parameters('kubernetesACIConnectorMemoryLimit')]",
        "kubernetesACIConnectorMemoryRequests": "[parameters('kubernetesACIConnectorMemoryRequests')]",
        "kubernetesACIConnectorNodeName": "[parameters('kubernetesACIConnectorNodeName')]",
        "kubernetesACIConnectorOS": "[parameters('kubernetesACIConnectorOS')]",
        "kubernetesACIConnectorRegion": "[parameters('kubernetesACIConnectorRegion')]",
        "kubernetesACIConnectorResourceGroup": "[parameters('kubernetesACIConnectorResourceGroup')]",
        "kubernetesACIConnectorSpec": "[parameters('kubernetesACIConnectorSpec')]",
        "kubernetesACIConnectorSubscriptionId": "[parameters('kubernetesACIConnectorSubscriptionId')]",
        "kubernetesACIConnectorTaint": "[parameters('kubernetesACIConnectorTaint')]",
        "kubernetesACIConnectorTenantId": "[parameters('kubernetesACIConnectorTenantId')]",
        "kubernetesAPIServerIP": "[parameters('firstConsecutiveStaticIP')]",
        "kubernetesAddonManagerSpec": "[parameters('kubernetesAddonManagerSpec')]",
        "kubernetesAddonResizerSpec": "[parameters('kubernetesAddonResizerSpec')]",
        "kubernetesCcmImageSpec": "[parameters('kubernetesCcmImageSpec')]",
        "kubernetesDNSMasqSpec": "[parameters('kubernetesDNSMasqSpec')]",
        "kubernetesDashboardCPULimit": "[parameters('kubernetesDashboardCPULimit')]",
        "kubernetesDashboardCPURequests": "[parameters('kubernetesDashboardCPURequests')]",
        "kubernetesDashboardMemoryLimit": "[parameters('kubernetesDashboardMemoryLimit')]",
        "kubernetesDashboardMemoryRequests": "[parameters('kubernetesDashboardMemoryRequests')]",
        "kubernetesDashboardSpec": "[parameters('kubernetesDashboardSpec')]",
        "kubernetesExecHealthzSpec": "[parameters('kubernetesExecHealthzSpec')]",
        "kubernetesHeapsterSpec": "[parameters('kubernetesHeapsterSpec')]",
        "kubernetesHyperkubeSpec": "[parameters('kubernetesHyperkubeSpec')]",
        "kubernetesKubeDNSSpec": "[parameters('kubernetesKubeDNSSpec')]",
        "kubernetesKubeletClusterDomain": "[parameters('kubernetesKubeletClusterDomain')]",
        "kubernetesMetricsServerSpec": "[parameters('kubernetesMetricsServerSpec')]",
        "kubernetesNonMasqueradeCidr": "[parameters('kubernetesNonMasqueradeCidr')]",
        "kubernetesPodInfraContainerSpec": "[parameters('kubernetesPodInfraContainerSpec')]",
        "kubernetesReschedulerCPULimit": "[parameters('kubernetesReschedulerCPULimit')]",
        "kubernetesReschedulerCPURequests": "[parameters('kubernetesReschedulerCPURequests')]",
        "kubernetesReschedulerMemoryLimit": "[parameters('kubernetesReschedulerMemoryLimit')]",
        "kubernetesReschedulerMemoryRequests": "[parameters('kubernetesReschedulerMemoryRequests')]",
        "kubernetesReschedulerSpec": "[parameters('kubernetesReschedulerSpec')]",
        "kubernetesTillerCPULimit": "[parameters('kubernetesTillerCPULimit')]",
        "kubernetesTillerCPURequests": "[parameters('kubernetesTillerCPURequests')]",
        "kubernetesTillerMaxHistory": "[parameters('kubernetesTillerMaxHistory')]",
        "kubernetesTillerMemoryLimit": "[parameters('kubernetesTillerMemoryLimit')]",
        "kubernetesTillerMemoryRequests": "[parameters('kubernetesTillerMemoryRequests')]",
        "kubernetesTillerSpec": "[parameters('kubernetesTillerSpec')]",
        "labelResourceGroup": "[if(or(or(endsWith(variables('truncatedResourceGroup'), '-'), endsWith(variables('truncatedResourceGroup'), '_')), endsWith(variables('truncatedResourceGroup'), '.')), concat(take(variables('truncatedResourceGroup'), 62), 'z'), variables('truncatedResourceGroup'))]",
        "location": "[variables('locations')[mod(add(2,length(parameters('location'))),add(1,length(parameters('location'))))]]",
        "locations": [
            "[resourceGroup().location]",
            "[parameters('location')]"
        ],
        "masterAvailabilitySet": "[concat('master-availabilityset-', variables('nameSuffix'))]",
        "masterCount": 1,
        "masterEtcdClientPort": 2379,
        "masterEtcdClientURLs": [
            "[concat('https://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdClientPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdClientPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdClientPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdClientPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdClientPort'))]"
        ],
        "masterEtcdClusterStates": [
            "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0])]",
            "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2])]",
            "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2], ',', variables('masterVMNames')[3], '=', variables('masterEtcdPeerURLs')[3], ',', variables('masterVMNames')[4], '=', variables('masterEtcdPeerURLs')[4])]"
        ],
        "masterEtcdPeerURLs": [
            "[concat('https://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdServerPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdServerPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdServerPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdServerPort'))]",
            "[concat('https://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdServerPort'))]"
        ],
        "masterEtcdServerPort": 2380,
        "masterFirstAddrComment": "these MasterFirstAddrComment are used to place multiple masters consecutively in the address space",
        "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
        "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
        "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
        "masterFqdnPrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
        "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
        "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
        "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
        "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
        "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
        "masterOffset": "[parameters('masterOffset')]",
        "masterPrivateIp": "[parameters('firstConsecutiveStaticIP')]",
        "masterPrivateIpAddrs": [
            "[concat(variables('masterFirstAddrPrefix'), add(0, int(variables('masterFirstAddrOctet4'))))]",
            "[concat(variables('masterFirstAddrPrefix'), add(1, int(variables('masterFirstAddrOctet4'))))]",
            "[concat(variables('masterFirstAddrPrefix'), add(2, int(variables('masterFirstAddrOctet4'))))]",
            "[concat(variables('masterFirstAddrPrefix'), add(3, int(variables('masterFirstAddrOctet4'))))]",
            "[concat(variables('masterFirstAddrPrefix'), add(4, int(variables('masterFirstAddrOctet4'))))]"
        ],
        "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterFqdnPrefix'), '-', variables('nameSuffix'))]",
        "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
        "masterVMNames": [
            "[concat(variables('masterVMNamePrefix'), '0')]",
            "[concat(variables('masterVMNamePrefix'), '1')]",
            "[concat(variables('masterVMNamePrefix'), '2')]",
            "[concat(variables('masterVMNamePrefix'), '3')]",
            "[concat(variables('masterVMNamePrefix'), '4')]"
        ],
        "masterVMSize": "[parameters('masterVMSize')]",
        "maxPods": "[parameters('maxPods')]",
        "maxStorageAccountsPerAgent": "[div(variables('maxVMsPerPool'),variables('maxVMsPerStorageAccount'))]",
        "maxVMsPerPool": 100,
        "maxVMsPerStorageAccount": 20,
        "mountetcdScript": "H4sIAAAAAAAA/3RSUW8TPRB896+YL8nb14uTgioVKUWVACmCNhWEJ4Qqn713Z+LYx3ndpgX+O/IlTQ8J7uXkHe/M7HjH/8nSelmq2IgxrkLybH0NG2GCJzTUEayPTMogVCDWBiVplSLlc5lqNMxtfCVlmeo4dSp53bTKTD2x1C4kU1hvWf5fplrOz85PZ+cvxBgrrwncUM9gIyq7I3OCjlqnnhBy4R73lpv+2HMhc0E3ytcUn27n6tFFbblJ5VSHrbx8TB1JpWNBvraeZJuck2dn86mIxCh24s3y0/uFNHQno9Hi5vLjerlerq4Xkx8Z+TUXV6vP1+ub1fJ6vZB3qpPOljJnYGzciGToTpktIjE7EtuNsR2KFpPnLrHNieIn6o7+BGyFL5i8RkHfMcNXwQ15AQCkm4BRFsi5KNeRMg/oeciM9ld2ljETlRVjVNY5ZE+yiqxK0QuNnmaaj4bYUdPT3zQnxwCw/wZ+DxWVOOS/oUolx/HEh0pZd0Bnh//pCBcXQ+HeqW5Ib2ArtKpjyzb4PEjkKFzEs/a/XY4HnSZQhA+8p+hhGfMmx7qPrig83WOOSX7IAbzdVHFKO345UETxoV/s233nOxRv4dTjw61lVTq6zTu3mJ/0pW8hdV65Qy0Ptn/hQVS/AwAA//8o5bmvUwMAAA==",
        "nameSuffix": "[parameters('nameSuffix')]",
        "networkPolicy": "[parameters('networkPolicy')]",
        "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
        "nsgName": "[concat(variables('masterVMNamePrefix'), 'nsg')]",
        "orchestratorName": "[parameters('orchestratorName')]",
        "orchestratorNameVersionTag": "Kubernetes:1.10.1",
        "osImageName": "[parameters('osImageName')]",
        "osImageOffer": "[parameters('osImageOffer')]",
        "osImagePublisher": "[parameters('osImagePublisher')]",
        "osImageResourceGroup": "[parameters('osImageResourceGroup')]",
        "osImageSKU": "[parameters('osImageSKU')]",
        "osImageVersion": "[parameters('osImageVersion')]",
        "primaryAvailabilitySetName": "[concat('agentpri-availabilitySet-',variables('nameSuffix'))]",
        "provisionScript": "H4sIAAAAAAAA/9x87X/iNvL46/ivmDp89uG6xpDsQ5see8cS75YmgRRI7nrdHhW2AB1GciU5Cc3mf/99JPkJsAlp++L3+d6L3saaGc2MRjOj0YjDr9wJoe4EibllHcJoTgQIn5NIAo+pAEYB32C+grN4gjnFEgu4vrAOwbsjEnwWYAEcRxwLTCXIOYYpC0N2S+jsxDqEL4BTOKDxcoI5fIElRpTQGXzRAEcN+AIjssQslnCLiFRDU8YhYP4CcyBUSBSGIBlMCSVinuAdwxcYYn5DfAw+i8MAKJMwwYApmoQ4gMkKxEpIvPRlmOC8rsIREnFZjvOmgj0/ZHHgEEq0pvxloDj02TIKscQJ7tsKXARTEqZATaUAT/oBBEgiCAjXXE1ZTIMUpFlBCCs0yZQIyPexEGSS0T2uUuziGwF+GAuJeYI7xyiU89UXyxJYgnNnCRZzH4PLIumi32OOXZ9RiQjFXLgRZzdEEEbHBqyubKc/bNVe+EiCi6Xv/s3hOMRIYPgCM44j+G/3tAVfQHJwAnjePW3Zz+ELoNsFPL+POFG2w+IowvxFrfHy4flL6+rDVW90Ne4Px732hdeyzd+2NfjeO8+/qr9sq9MfeP1h/tX8bVtnVx+8zui85caCuyHzUaiNfRFPsC9D67TfOfMGZlR9NwZndPD1neWNOqfjS88bjDveYNSqvcD+nEHtfv1792O30x55wwf4An4swQme//wcnCkc5R9+0R+a+YdX+kPtxYva/UV7OPIG427v1Pv3w9fNly9fFiY+834qm/dy0L1ujzw1/FfOm6y9Rabw889Q6w+h1YLaunLhl1++U9ucWgAAmjO7M0d0powrwFMUhxISBcOEUFBql4RRWyNkK6IMK12HKbEsTEXM8SCmHbZcIhp0ko0UvHhp3RfmKtpxvu2MYzBTKIjxlPGx3mLfNhrQrLBjg19P96zGVrLDV0pLe+FAURs5l0/2F3ZOQPnLN/rPKbEeUs2catvsGl+4j3KqvGeZko7f7tCSIZTQeZqyylGfoLPdQmTqOmoU9aWo/RogiX999eucCUnREv/6yrh4E9rev9f8Lo2pa/5vEFdr63I8YUw6HP8WE46DNV4H3od+fzTwfrzqDrzTluQxtnAocNngFKkBZdlmN30Fzu9gZ9uu1z/1HuyyzYTvsB9rBSyR9tBUxc7M5QKLMNcbStiWRosF5igIwLkCW4UDO/u6ZAE4Edi1F3OMAnB8OD4CN8A3bswRDdgSvsAECfz29Uu7iBshIW4DcOLiRxKkf+XMlmh5gmeEfsJSSaBiWgdzKTJ9K8z2ZXfoDa7X3dj4sj36vmXr2LHIMg3XV9guiojA/Abz+gKvDDeSxf5c6bOa2oOB9OdKDQ1l4fuBs1sKnDF5ov7zKI5G6rT3lsVHJUKU4Jdyvwtui+1yYA2tI8kTF0GtfeUq7CJYKsleCEokNe2JznIex8pl65x3vd7oSbL5IcFUVslWQbBatscQtpbrEaxcts0M4FHJIoz5RryvErOUdrWQu8HLl68KZ8swC8nVvobpc7nDMDcJbsj1+vXeCOWLV421ZZhPkS0xzArZKghWy/YYwk7D3CnbZkr8hwyzQsxS2tVC7gYvF7EKRyMlR4I8TFeEhQc7i6ngOAHWB9/3e0WelO66364mWB0MUkoV7rKa5B5eeY32trt6hPZur7hGOz3/PEJxlwsq00NhgffTQ4UVlelhf9q7N+G2HhTgPoqoIJge7HYlbpgGO9O25SIgXKWTpak+PHuW7Njyk4De9HWOUbDKU2Yjp1iQKNon330Fck4EEAGIApphKjWsrbNsdbA89/YP+cVwn7maKiIPtrUe/XYCbrmXHdBWwS1cfTjvdp6QDGtXWZYIrxMqMG885G7IXenvFrjV/s/VwBv/MOz3KpjWllD/n2C0yOs61pZ6y8a3+doCSgs36f4p0Xv1JtqxSCUeP9PEXg5/W81Iwt//Dl7/YwK7JYs51tu6aGCf2LX7UXvwyRuNvd51d9DvXXi90YP9ygBJTBGV3cA+UbRGXq/dG427p9m4iCfm3EsYTaGGVx+GnUH3ctTt94qwCAUdvTUyQG9w3e14Si+9TveyfZ46rzKkIfY5lo8gDr3OwMu559hUET9xFkcGdeAN+1eDjjf+NOhfXWaQWSlJA533O23FfVFMimUPLXEmYq8wj8B+zIlc6XlyqJ43+ld/cKa4uhp0Rz9tzHmzRvK6Oxhdtc/HCdIa1GBbjg3wcYVcnMUSj9AkxPlMg/7VyBuP2h/OvQwu4mSJ+Kp9g0iIJiQkcjUscnc56F60Bz+N29ft7nn7Q/dciTMsqEBb06VyrQHmH5C/YNOpfQK1+855/+r0ctC/7p56g/GHdues//Hjww6sAZacYFGNPB54o0HXG+4i4t1FjGIqd1Dx/n3Z7ylb30HmNOapWVSROb0aGFvZQeYHIiXmO4j80B2NvEEpiQGSOCRLUibKoD3yzrsX3XIZFOa5wvzxcrgLefzjZbkuMwIfYn+BdzIw/nDVOfMyPmKBLxBFMxx0A0wlkSvvTmIqUlVeDb3xRbvX/uSdjrunXm+kzMn798jrDQuqjAXWVUnq4wssUYAkyrC7veGo3et44wtv1D5tj9oPmSUb5q9RHBYM+OxiOM7Yvm5fnY90zbmwAQzaGV6lSItvRMnoNeaJGLZtPVhe/2N2s2FNY+orcwFTWP1IQhwhOX/xEu7TomZtvZi3Ua7kWMacphXH7WqqKabWmhsl0lrzCYXPWnOjxPm2OJ/1UBBDYHkWT3CIZT+SArQcBwIH4BCwxeF/08DWvxwNW/W/Ha79XbtvPhza5s4mqd7r6B1iuTaJz+iUzNoqmHd63UxXnV533On3PnY/jU+7g5Ym41PiUizrwXraWFuHLRzFnEEhsJeDqeTg3Zs3paPq04duzzCgkk/FwITQkukTMFOG1CFXfR19+s94dHHZcuUyMvnK2KekLme/W8ly85W/DMYzLMcS8QkKQ3irl3iLBtTur3veSH+6PL/61O0Nx1eD8wdzokUcnLvfp2V4Tmebw06/N2p3e94gCR/d3qdtfrMcm2J5y/iC0Nm+3D9CX/mR3WI8RmBDKKi7IWPRBPkLqLsR43KJop12UNSGMQJnkNtBcXR5s/bNbTYck3kqww2J2DIst0BUbdjN4S0CGt4VE0JdPJEqWAtwJFAkwXE0wPZ+UfuSYrm2Xf6Aqf7fNoQJJ8EMQ91Vh1FH39L+BUaxvRg9o5dLFhJ/VfT2P/9czAMv++fdjkrrW2BrC9i4pdHTrnlDc5YNd1KijGpCUEopsZPCJVbGe3L11Qkx4p3sPD2IqSRLbHz9IbSDADQE5CDAccQEkYyvYIFX1oEJNu0gUDHmEeh6vW5bB37MQ3DE8BwcR5sPvEn/5QQ4RCtoNrIPS3TnKJ7guAH2XMpInLhuwG5pyFBQZ5GKtgLXGZ+52VwEC3fOlvjEV+zk5QLzt5N/cI7du6tJTGU8br6tN167A9NdoM/v8AVQJJ0FXoG+B7MqVFKQcX9tGE1o6OcBnoCS7AmCuZuSuY+KBu5zeG8iMoqkaw4Voq5cTD1wfd/hZvH1Fy1rcitcIoaBTKVN4MolTohqcZU6Z1hCHAVIYnj2DNIv6U2s41DmJH84HPtsucQ0EOCs4LN1cJBzucagnOOkvSYAkbThIBqAYCp11T0xom4daB+g12Acc9LKrImj2/qMyHk8iQXWStWFcbbc1LIbcXa3co/rjfrR8Z8y5Np9ysaDUr2mW09YrxOqbE+lWs/F4T9DMsF32A8I/+ehaTgxHw6z5UxET/5/i95fz6dW6yabSrlCIokNpzeI78GhpqTX0tPdVWbZJOJy25Q0CmRCGdvTaMryMsRSM1zDNcaY9WOZmds0GOp5U+Ysle2upcA2OPkGSw2xxfGSSazUZz7oO34spFYii2Wr+WZZhuhgGkSMUNmKKbk7cV3dJ5CBBYV/aj3Zpf47gzE+uzPQ2YaJmqfja2+gzlQtu1lv1hsO9+sNO90HBbDT/r965/32qYrB+bYQknE0w/UZY7MQo4gIsyc4yYUJ0n6szc+1+3JWHuohofGdg5bB29d1iXh99nt6250Dl2cgQQL/SN5h17Yp2etfiwLb1kGWcZSjOh1wrQO+VKetUggrtcZhrJvlpnEYrtIlwgGs6yYxPyzjKF++7zbPXsVBs7ZJU5SO7DFXZl5C1zrI8j1TM83H7S3zMHlpaxPQNdlDXbJlmAYpW8QTjlGEObRAN6HYusRYSjFDYmw5Fj7jGFrQsOH94xg/R2E8I1TUfU7qBdliKnksJA7GKtlSIXKc7KNf9qKbAI/lKlLMPCesSD2NUjdNY57Pn0QT0xmhmmrW8pcHqv1IVYmdnJ3/v5XVND/q0wuPqf8IrYetKsmmjafJboY8Hlz1Rt0Lz4ZWC+zNJKeQQx8cHMIFWmBQZOEWg48oUCwk3BAuYxSS33U1zzpQk+jeUec3uFnegYrqvutHMaFTllErC0nr+y0PRetzp7dJAaMY0FTfPWVnJ0gWGhDHuYdQJHbFs/KJjSM5qI5kGYZ1cDAl1sHGGaACLzvDZC6WTMdTREIlXFN52ONCM3OA8JJRFQYYMqWZfMx0TKclq/w7EU7aTJ2MJX+2av8whxXGgQChcN+s179tNB6+g4Blhxtd+6qlFByKobFVAtvFyPb4NkNZkWydMXMkS+4Z18tttSZIxhZQIyCwz1TWapqgy/rG7TUCyrMusi9JMU5zGGIcgeFImZNVKb45OW8XAWvNx5vYN0qCx8WSYAY05thsgqYuQzYbqab2shKVGMYCak2T4Udohjk4ocoPb5ByI7PkbrfWdAxsPWSzbbNRE+SLZDTxD3Dwb0/RQdKUvyH267JjcrFJNtsXVfst6fN+2EQ/uxjuwO3Msb+AxVLo8UNgNFwl/oZMAYHpHFUORbGfNpCm8n/1SFE51166fulMpZIm6e6jopbVcvGd5MiX368izNX4i5e73IiykLeNtBM3isMQat//dOkNzq4+eCov2zn/PJ3ESWYtkeUHFnOKwpSNKlLJ2cT5nwEPCi0EQ5MBtyLMBRHqVKjj29qRJkXTBb0irh6/QHdXArean/ZHTGowfwDzI+O3iAcjNlyJkM1alD2GW2IA34g/c2Ox+EZ8b958tMwWpSzAou1LcoOLXwYYBSlI6S1H0tC/HQ3ebkaDFBSO3useZKpMKXmG4qiQvuZqtcuwa//Q1bOGnTiN9H9bISRXbvFxCxHpy5ZXmz7f3kIvqKSxNbju+WFv758TfSwAbPCtfEjCe5KblPFu4kCjuLLGPC5ZMEzuu03Bs8SEPOkHmQ1h6QddMYgpJXSWLPju9TTFCsdHPubJq5+ybmefSwVVDbPe4wiOLuTt06cLTl4DeduA9DjcPHpXb9Qb9ebJ0fG7b92bI3eJ/DmhWHy3kZmsB6RSu1pXS6MkndAPt/Q5EEThVPmIwf2hTKLIy2PmpNlSRlR4FvaIHTWb1fFGkTtFEp2SPLwuWUxl+r5Lb2kR+M3sg84XyEQvWkDEIpdka1tX8U90XVKLe0vkPH8fh+TJ9gR2mb9bSwIN6S1EuEWi8OQOyVyaOoz4Ss0vWSIvCkMIsErrRT2fUUArebRTsnHW940Gj4OUnoPg2bOn6vK7P+srX7wACS2o3ZMH+BvU7sUDvHxZ4VG39aW5xYFZhpTZ1OJltYstrEuJ6efmXxPZx2wPTImuPhWsI7OGzeWrsg1j5Y0S895yl2ky8gdC62X/NG8mMndA44/dc2+7N26JKJliIYUbscBJ+5OcSHNQX6FlkvGnj5RqVaS3TlVZrPU5RhLvRC7b9LecSJ1jmipWtuU1WV0k0FeYc7bEbq19etHtXQ29gVtXwm0AatFra4hJ3Wrj1nMNxLgF3S9YW6dVuBvMZz7J/1lGaE/wAnndcNBolBPL7ow3UJODQUCEPsWGbKZfRRq3K3RrHLBYRrG56dvqKbccx7FQRJLulRO4aVpJSiBOLCdND04MG5hLMiU+kthBsZwzbTtqT5zAZ7vWaRebgT+nfcD8BvOTIuNJm7MFQNESa9SkIf/jj6e9z7alr1nupGHA/DthIOFmGwWS92ebQw4KloRqgKrJYs4xlU460TbEgtDgBIxZWmoSzVgZucJsmpmEaaLpF5SXqayglG3VJYgLvCpFOPN++mxbNrwvtadD4Ello8wmRGYNzp3ahX+itnYI3am+ZfPzS09zTFGxtAT1FgPFWD9FNZ5QYSs6PKbgm6e4CjV9uxnAeIKnjOOxQk1Ov/m1YnrJF+AI0wBTn2ChqJn3r+uT65BaKMZhjtPEF0EQLWYQMn9Rtw4qnwYnNc+SZnYFvMwBs0b2/D1m+rp5/Zn5mipz5m6RrsCanvOAYUGfS8gvSAMV6pXYSxIEIQY2zdIWmf+egnVQdsA+asAbeKPvV5eIL2DOwmBtPvM6ukJOr1D20KfkTNJdr4bXBitpl3RNrE9RAvDnbNdIs7MmvFdJuEqinb0U67IdHOwE3mOSrKZbRbhQ9J0StcrVLzPWK/BlC12gVklmo+yzQWZjdOez5WfPsgFTpPGoz1e6v/xfRM69O4k5ReHZUpS+ca6U8exiuM4VZAfas4vh4zpKqmJlCkqGHiGQlKLKCCRD+xE4ZRRv4Jf5r6e6r/3fkm8kcAVFpv2u66WbzTHz0xiFocIBcONrcZG+EU9wsSYyLokkM727dZSYxLPsJD+JZ6Ieopj68wgFdYqlG+tOGfdr0xXjajfpfj2JZ27z7bu3b4/f5FZ2FARNHzffOY1332LndePYdybHb44c1Pz2qInxUeMdxvAeXLES7iQW7s1S/Tfg5AZz4c5vxrEkoRvTCaHJfUnSU9s8Jp//8hk+06QLl/t10wNXWZPdDBkx3RE00qaf/JdpilUKW69V1QnnUJf8oAlLQmOJVcBOi9OUBfgVCAZyjszP/vixkGyZ/nYQTjvJtSsv/GiE6aRKauVpkfxVUjxXEVM//yI0m/W5BZD9RBE4PthiHstA9wZyaMIze2eExDTY/M2HP/eSLXuZlv8URiQAxXfT21u12DlSBulE+pYEnln/LwAA///VJYvXbkkAAA==",
        "provisionScriptParametersCommon": "[concat('TENANT_ID=',variables('tenantID'),' HYPERKUBE_URL=',variables('kubernetesHyperkubeSpec'),' APISERVER_PUBLIC_KEY=',variables('apiserverCertificate'),' SUBSCRIPTION_ID=',variables('subscriptionId'),' RESOURCE_GROUP=',variables('resourceGroup'),' LOCATION=',variables('location'),' SUBNET=',variables('subnetName'),' NETWORK_SECURITY_GROUP=',variables('nsgName'),' VIRTUAL_NETWORK=',variables('virtualNetworkName'),' VIRTUAL_NETWORK_RESOURCE_GROUP=',variables('virtualNetworkResourceGroupName'),' ROUTE_TABLE=',variables('routeTableName'),' PRIMARY_AVAILABILITY_SET=',variables('primaryAvailabilitySetName'),' SERVICE_PRINCIPAL_CLIENT_ID=',variables('servicePrincipalClientId'),' SERVICE_PRINCIPAL_CLIENT_SECRET=',variables('singleQuote'),variables('servicePrincipalClientSecret'),variables('singleQuote'),' KUBELET_PRIVATE_KEY=',variables('clientPrivateKey'),' TARGET_ENVIRONMENT=',variables('targetEnvironment'),' NETWORK_POLICY=',variables('networkPolicy'),' FQDNSuffix=',variables('fqdnEndpointSuffix'),' VNET_CNI_PLUGINS_URL=',variables('vnetCniLinuxPluginsURL'),' CNI_PLUGINS_URL=',variables('cniPluginsURL'),' CLOUDPROVIDER_BACKOFF=',variables('cloudProviderBackoff'),' CLOUDPROVIDER_BACKOFF_RETRIES=',variables('cloudProviderBackoffRetries'),' CLOUDPROVIDER_BACKOFF_EXPONENT=',variables('cloudProviderBackoffExponent'),' CLOUDPROVIDER_BACKOFF_DURATION=',variables('cloudProviderBackoffDuration'),' CLOUDPROVIDER_BACKOFF_JITTER=',variables('cloudProviderBackoffJitter'),' CLOUDPROVIDER_RATELIMIT=',variables('cloudProviderRatelimit'),' CLOUDPROVIDER_RATELIMIT_QPS=',variables('cloudProviderRatelimitQPS'),' CLOUDPROVIDER_RATELIMIT_BUCKET=',variables('cloudProviderRatelimitBucket'),' USE_MANAGED_IDENTITY_EXTENSION=',variables('useManagedIdentityExtension'),' USE_INSTANCE_METADATA=',variables('useInstanceMetadata'),' CONTAINER_RUNTIME=',variables('containerRuntime'),' KUBECONFIG_SERVER=',variables('kubeconfigServer'))]",
        "provisionScriptParametersMaster": "[concat('MASTER_NODE=true APISERVER_PRIVATE_KEY=',variables('apiServerPrivateKey'),' CA_CERTIFICATE=',variables('caCertificate'),' CA_PRIVATE_KEY=',variables('caPrivateKey'),' MASTER_FQDN=',variables('masterFqdnPrefix'),' KUBECONFIG_CERTIFICATE=',variables('kubeConfigCertificate'),' KUBECONFIG_KEY=',variables('kubeConfigPrivateKey'),' ETCD_SERVER_CERTIFICATE=',variables('etcdServerCertificate'),' ETCD_CLIENT_CERTIFICATE=',variables('etcdClientCertificate'),' ETCD_SERVER_PRIVATE_KEY=',variables('etcdServerPrivateKey'),' ETCD_CLIENT_PRIVATE_KEY=',variables('etcdClientPrivateKey'),' ETCD_PEER_CERTIFICATES=',string(variables('etcdPeerCertificates')),' ETCD_PEER_PRIVATE_KEYS=',string(variables('etcdPeerPrivateKeys')),' ADMINUSER=',variables('username'))]",
        "provisionSource": "H4sIAAAAAAAA/8xTTXPTMBC951c8gibTMmMaF05oAr30xo0DhzTjUexVrEGWXGkNLU3+O2M7yaQhuOHW29qrfR+rp7dvrpbGXcVyNArE4TGviszoTCtjm0AXl3hC+99QnIlU4pcyPBPXEmwq8g3PxAeJWBrNmEyOCgntAwyMg7iIdI8UYot1KVH4HQbEvni62UjMIb4goXtMgUWLtgykfmC9RrRENUQrogVwJEF56XH7QHnDVOBuLG7uxhCmw44Sm1OuMuezyIrj67d3oH9FnLEKS2XtgO7+QKe7CXYmPr4sUwUk/FtDbIeHJA5tc4+LFOkUeRMsEh2/fYXoSn/AcNJq+5VpHzJt7ED02m6tuOxMvmDOaMyRaIjdEBYSXJLrLbVgJ8RgM1I1dxtv6kJxL+YvqnQ67VlUzcmKGP1hXH+epFhjFahG8oDx/Pvt4tP7d+PdYh396+7T07E+wj+Md3yMTFXONgsUWQU+J9OIP3OnKjorHscp3jOiUFR5lwSyXhXdu9i3tmIgtkzPu88G//dF/AkAAP//Ky0c8bIEAAA=",
        "readerRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
        "registerWithTaints": "node-role.kubernetes.io/master=true:NoSchedule",
        "resourceGroup": "[resourceGroup().name]",
        "routeTableID": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]",
        "routeTableName": "[concat(variables('masterVMNamePrefix'),'routetable')]",
        "scope": "[resourceGroup().id]",
        "servicePrincipalClientId": "[parameters('servicePrincipalClientId')]",
        "servicePrincipalClientSecret": "[parameters('servicePrincipalClientSecret')]",
        "singleQuote": "'",
        "sshKeyPath": "[concat('/home/',variables('username'),'/.ssh/authorized_keys')]",
        "sshNatPorts": [
            22,
            2201,
            2202,
            2203,
            2204
        ],
        "sshPublicKeyData": "[parameters('sshRSAPublicKey')]",
        "storageAccountBaseName": "[uniqueString(concat(variables('masterFqdnPrefix'),variables('location')))]",
        "storageAccountPrefixes": [
            "0",
            "6",
            "c",
            "i",
            "o",
            "u",
            "1",
            "7",
            "d",
            "j",
            "p",
            "v",
            "2",
            "8",
            "e",
            "k",
            "q",
            "w",
            "3",
            "9",
            "f",
            "l",
            "r",
            "x",
            "4",
            "a",
            "g",
            "m",
            "s",
            "y",
            "5",
            "b",
            "h",
            "n",
            "t",
            "z"
        ],
        "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
        "subnetName": "[split(parameters('masterVnetSubnetID'), '/')[variables('subnetNameResourceSegmentIndex')]]",
        "subnetNameResourceSegmentIndex": 10,
        "subscriptionId": "[subscription().subscriptionId]",
        "targetEnvironment": "[parameters('targetEnvironment')]",
        "tenantId": "[subscription().tenantId]",
        "truncatedResourceGroup": "[take(replace(replace(resourceGroup().name, '(', '-'), ')', '-'), 63)]",
        "useInstanceMetadata": "true",
        "useManagedIdentityExtension": "false",
        "username": "[parameters('linuxAdminUsername')]",
        "virtualNetworkName": "[split(parameters('masterVnetSubnetID'), '/')[variables('vnetNameResourceSegmentIndex')]]",
        "virtualNetworkResourceGroupName": "[split(parameters('masterVnetSubnetID'), '/')[variables('vnetResourceGroupNameResourceSegmentIndex')]]",
        "vmSizesMap": {
            "Standard_A0": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A10": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A11": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A1_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A2_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A2m_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A4_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A4m_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A5": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A6": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A7": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A8": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A8_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A8m_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A9": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_B1ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_B1s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_B2ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_B2s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_B4ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_B8ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_D1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D11": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D11_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D11_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D12": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D12_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D12_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D13": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D13_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D13_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D14": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D14_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D14_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D15_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D16_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D16s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_D1_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_D3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D32_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D32s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_D3_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D3_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_D5_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D5_v2_Promo": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D64_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D64s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_D8_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D8s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS1": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS11": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS11_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS11_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS12": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS12_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS12_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13-2_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13-4_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14-4_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14-8_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS15_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS1_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS2_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS2_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS3_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS3_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS4": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS4_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS4_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS5_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS5_v2_Promo": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E16_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_E16s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E2_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_E2s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E32-16s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E32-8s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E32_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_E32s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E4_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_E4s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E64-16s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E64-32s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E64_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_E64s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_E8_v3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_E8s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_F16": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_F16s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F16s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F1s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_F2s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F2s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F32s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_F4s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F4s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F64s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F72s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F8": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_F8s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_F8s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_G1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G5": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_GS1": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS4": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS4-4": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS4-8": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS5": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS5-16": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS5-8": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_H16": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_H16m": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_H16mr": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_H16r": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_H8": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_H8m": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_L16s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_L32s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_L4s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_L8s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M128-32ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M128-64ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M128ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M128s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M64-16ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M64-32ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M64ms": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_M64s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC12": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_NC12s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC12s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC24": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_NC24r": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_NC24rs_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC24rs_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC24s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC24s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC6": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_NC6s_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NC6s_v3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_ND12s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_ND24rs": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_ND24s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_ND6s": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_NV12": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_NV24": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_NV6": {
                "storageAccountType": "Standard_LRS"
            }
        },
        "vmsPerStorageAccount": 20,
        "vnetCidr": "[parameters('vnetCidr')]",
        "vnetCniLinuxPluginsURL": "[parameters('vnetCniLinuxPluginsURL')]",
        "vnetCniWindowsPluginsURL": "[parameters('vnetCniWindowsPluginsURL')]",
        "vnetNameResourceSegmentIndex": 8,
        "vnetResourceGroupNameResourceSegmentIndex": 4,
        "vnetSubnetID": "[parameters('masterVnetSubnetID')]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('agentpriCount'), variables('agentpriOffset'))]",
                "name": "loop"
            },
            "dependsOn": [
                "[variables('nsgID')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('agentpriVMNamePrefix'), 'nic-', copyIndex(variables('agentpriOffset')))]",
            "properties": {
                "enableIPForwarding": true,
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "primary": true,
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('agentpriVnetSubnetID')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('nsgID')]"
                }
            },
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('apiVersionStorage')]",
            "copy": {
                "count": "[variables('agentpriStorageAccountsCount')]",
                "name": "loop"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpriStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpriStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpriAccountName'))]",
            "properties": {
                "accountType": "[variables('vmSizesMap')[variables('agentpriVMSize')].storageAccountType]"
            },
            "type": "Microsoft.Storage/storageAccounts"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[variables('location')]",
            "name": "[variables('agentpriAvailabilitySet')]",
            "properties": {},
            "type": "Microsoft.Compute/availabilitySets"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('agentpriCount'), variables('agentpriOffset'))]",
                "name": "vmLoopNode"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('agentpriOffset')),variables('maxVMsPerStorageAccount')),variables('agentpriStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('agentpriOffset')),variables('maxVMsPerStorageAccount')),variables('agentpriStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpriAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('agentpriVMNamePrefix'), 'nic-', copyIndex(variables('agentpriOffset')))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('agentpriAvailabilitySet'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')))]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentpriAvailabilitySet'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('agentpriVMSize')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentpriVMNamePrefix'), 'nic-', copyIndex(variables('agentpriOffset'))))]"
                        }
                    ]
                },
                "osProfile": {
                    "adminUsername": "[variables('username')]",
                    "computername": "[concat(variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')))]",
                    "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n- path: \"/opt/azure/containers/provision_source.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionSource'),'\n\n\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('kubernetesAPIServerIP'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: \"/etc/systemd/system/hyperkube-extract.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=kubectl and kubelet extraction\n    Requires=docker.service\n    After=docker.service\n\n    ConditionPathExists=!/usr/local/bin/kubectl\n\n\n    [Service]\n    TimeoutStartSec=0\n    Restart=on-failure\n    RestartSec=5s\n    ExecStartPre=/bin/mkdir -p /tmp/hyperkubedir\n    ExecStartPre=/usr/bin/docker pull ',variables('kubernetesHyperkubeSpec'),'\n    ExecStartPre=/usr/bin/docker run --rm -v /tmp/hyperkubedir:/opt/hyperkubedir ',variables('kubernetesHyperkubeSpec'),' /bin/bash -c \"cp /hyperkube /opt/hyperkubedir/\"\n\n    ExecStartPre=/bin/cp /tmp/hyperkubedir/hyperkube /usr/local/bin/kubelet\n    ExecStartPre=/bin/mv /tmp/hyperkubedir/hyperkube /usr/local/bin/kubectl\n    ExecStart=/bin/chmod a+x /usr/local/bin/kubelet /usr/local/bin/kubectl\n\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n\n    KUBELET_OPTS=\n\n    KUBELET_CONFIG=--address=0.0.0.0 --allow-privileged=true --anonymous-auth=false --authorization-mode=Webhook --azure-container-registry-config=/etc/kubernetes/azure.json --cadvisor-port=0 --cgroups-per-qos=true --client-ca-file=/etc/kubernetes/certs/ca.crt --cloud-config=/etc/kubernetes/azure.json --cloud-provider=azure --cluster-dns=10.0.0.10 --cluster-domain=cluster.local --enforce-node-allocatable=pods --event-qps=0 --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5% --feature-gates=Accelerators=true --image-gc-high-threshold=85 --image-gc-low-threshold=80 --keep-terminated-pod-volumes=false --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=110 --network-plugin=kubenet --node-status-update-frequency=10s --non-masquerade-cidr=10.244.0.0/16 --pod-infra-container-image=k8s-gcrio.azureedge.net/pause-amd64:3.1 --pod-manifest-path=/etc/kubernetes/manifests \n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_REGISTER_SCHEDULABLE=true\n    KUBELET_NODE_LABELS=kubernetes.io/role=agent,agentpool=agentpri,kubernetes.azure.com/cluster=',variables('labelResourceGroup'),'\n\n- path: /etc/systemd/system/kubelet.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4xTT0/jOhC/51OMWg7vHdy8luotC8qBP4GtQICaIA6lqhxnaKw6TtYzbmEXvvsqLbAtlNXmlPH8/nk0Ht1YzePgBEk5XbOubHTuMzTIwXFlc92cXEsu4gdNTFHoyYWmUtKEmbbh7AXahiF+99phHgSjBN1cKxwHQySWjiNpFvKRgtjOtatsiZZPtcEoRFZhjvfSG35TSrxSSBQ/aE5Ysqeo298N4gdUSaN17TBaOmeSCgirmkP5wzsMVWVZaouOXqU6VGzhlbNcOxA1hHPpQqOzN+e/wSqrP8siFLT0PYxg55+y8pbhCaYOa7hrvXe6a8ETLBQI8y8Ig/AfjOEAuEALK9slXYhM2/xDzI8HB3CvW9vSv8iUcoaCCunwo1rQhrTQBJpAQi0da2lgUbmZdJW3OXAF3PR9TexQltDshrPI2HDI437QBiiYa9oPw6nmwmcdVZVL/RVu/XdJobDf/dr9v70sVFU2+yB2u71+b+/LbvfdRai5CT2SYgNiARa5o+t5v8Oqnjhkp5F60d4mSaxYmLHMDBIIBiubSRhNvBWq6z9DP1l7uAvg5RMCbSMhCN0c3UbHVjkKIzM0FLV2fp7fHMUXcTq5vDqJJxeHR/FF8tzaIMyj3mZdGV+iqI2faity7VZPZ22wK8QKQGvcnVez46vL08HZ7/rqOk3WcW+phvHZIEnj4TLe87bG7SD9NkkPB5dp8hwEo4EllsaMg1tpGfOjx6j0hrXwhK7D0k2RfwUAAP//r6JgkWQEAAA=\n\n\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n\n\n    sed -i \"s|apparmor_parser|d|g\" \"/etc/systemd/system/kubelet.service\"\n\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\n\nruncmd:\n- echo `date`,`hostname`, startruncmd>>/opt/m\n# the first arg is the number of retries, the second arg is the wait duration between two retries and the rest of the args are the cmd to run\n- set -x\n- . /opt/azure/containers/provision_source.sh\n- retrycmd_if_failure 20 5 5 apt-mark hold walinuxagent\n- echo `date`,`hostname`, preaptupdate>>/opt/m\n- apt_get_update\n- echo `date`,`hostname`, postaptupdate>>/opt/m\n- retrycmd_if_failure 5 10 120 apt-get install -y apt-transport-https ca-certificates nfs-common iptables iproute2 socat util-linux mount ebtables ethtool init-system-helpers\n- echo `date`,`hostname`, aptinstall>>/opt/m\n- systemctl enable rpcbind\n- systemctl enable rpc-statd\n- retrycmd_if_failure 100 1 10 systemctl daemon-reload && systemctl restart rpcbind\n- retrycmd_if_failure 100 1 10 systemctl daemon-reload && systemctl restart rpc-statd\n- echo `date`,`hostname`, predockerinstall>>/opt/m\n- retrycmd_if_failure_no_stats 180 1 5 curl -fsSL https://aptdocker.azureedge.net/gpg > /tmp/aptdocker.gpg\n- cat /tmp/aptdocker.gpg | apt-key add -\n- echo \"deb ',variables('dockerEngineDownloadRepo'),' ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- apt_get_update\n- retrycmd_if_failure 20 10 120 apt-get install -y ebtables docker-engine\n- echo \"ExecStartPost=/sbin/iptables -P FORWARD ACCEPT\" >> /etc/systemd/system/docker.service.d/exec_start.conf\n- touch /opt/azure/containers/dockerinstall.complete\n- echo `date`,`hostname`, postdockerinstall>>/opt/m\n- mkdir -p /etc/kubernetes/manifests\n- usermod -aG docker ',variables('username'),'\n\n- echo `date`,`hostname`, PRE-APT-SYSTEMD-DAILY>>/opt/m\n- /usr/lib/apt/apt.systemd.daily\n- echo `date`,`hostname`, POST-APT-SYSTEMD-DAILY>>/opt/m\n- retrycmd_if_failure 20 5 5 apt-mark unhold walinuxagent\n- mkdir -p /opt/azure/containers && touch /opt/azure/containers/runcmd.complete\n- echo `date`,`hostname`, endruncmd>>/opt/m\n\n'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "true",
                        "ssh": {
                            "publicKeys": [
                                {
                                    "keyData": "[parameters('sshRSAPublicKey')]",
                                    "path": "[variables('sshKeyPath')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "offer": "[variables('agentpriosImageOffer')]",
                        "publisher": "[variables('agentpriosImagePublisher')]",
                        "sku": "[variables('agentpriosImageSKU')]",
                        "version": "[variables('agentpriosImageVersion')]"
                    },
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage",
                        "name": "[concat(variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')),'-osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('agentpriOffset')),variables('maxVMsPerStorageAccount')),variables('agentpriStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('agentpriOffset')),variables('maxVMsPerStorageAccount')),variables('agentpriStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpriAccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk/', variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')), '-osdisk.vhd')]"
                        }
                    }
                }
            },
            "tags": {
                "creationSource": "[concat(variables('generatorCode'), '-', variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')))]",
                "orchestrator": "[variables('orchestratorNameVersionTag')]",
                "poolName": "agentpri",
                "resourceNameSuffix": "[variables('nameSuffix')]"
            },
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('agentpriCount'), variables('agentpriOffset'))]",
                "name": "vmLoopNode"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('agentpriVMNamePrefix'), copyIndex(variables('agentpriOffset')),'/cse', '-agent-', copyIndex(variables('agentpriOffset')))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' /usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1\"')]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {},
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('agentpri2Count'), variables('agentpri2Offset'))]",
                "name": "loop"
            },
            "dependsOn": [
                "[variables('nsgID')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('agentpri2VMNamePrefix'), 'nic-', copyIndex(variables('agentpri2Offset')))]",
            "properties": {
                "enableIPForwarding": true,
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "primary": true,
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('agentpri2VnetSubnetID')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('nsgID')]"
                }
            },
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('apiVersionStorage')]",
            "copy": {
                "count": "[variables('agentpri2StorageAccountsCount')]",
                "name": "loop"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName'))]",
            "properties": {
                "accountType": "[variables('vmSizesMap')[variables('agentpri2VMSize')].storageAccountType]"
            },
            "type": "Microsoft.Storage/storageAccounts"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[variables('location')]",
            "name": "[variables('agentpri2AvailabilitySet')]",
            "properties": {},
            "type": "Microsoft.Compute/availabilitySets"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('agentpri2Count'), variables('agentpri2Offset'))]",
                "name": "vmLoopNode"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('agentpri2Offset')),variables('maxVMsPerStorageAccount')),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('agentpri2Offset')),variables('maxVMsPerStorageAccount')),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('agentpri2VMNamePrefix'), 'nic-', copyIndex(variables('agentpri2Offset')))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('agentpri2AvailabilitySet'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')))]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentpri2AvailabilitySet'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('agentpri2VMSize')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentpri2VMNamePrefix'), 'nic-', copyIndex(variables('agentpri2Offset'))))]"
                        }
                    ]
                },
                "osProfile": {
                    "adminUsername": "[variables('username')]",
                    "computername": "[concat(variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')))]",
                    "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n- path: \"/opt/azure/containers/provision_source.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionSource'),'\n\n\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('kubernetesAPIServerIP'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: \"/etc/systemd/system/hyperkube-extract.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=kubectl and kubelet extraction\n    Requires=docker.service\n    After=docker.service\n\n    ConditionPathExists=!/usr/local/bin/kubectl\n\n\n    [Service]\n    TimeoutStartSec=0\n    Restart=on-failure\n    RestartSec=5s\n    ExecStartPre=/bin/mkdir -p /tmp/hyperkubedir\n    ExecStartPre=/usr/bin/docker pull ',variables('kubernetesHyperkubeSpec'),'\n    ExecStartPre=/usr/bin/docker run --rm -v /tmp/hyperkubedir:/opt/hyperkubedir ',variables('kubernetesHyperkubeSpec'),' /bin/bash -c \"cp /hyperkube /opt/hyperkubedir/\"\n\n    ExecStartPre=/bin/cp /tmp/hyperkubedir/hyperkube /usr/local/bin/kubelet\n    ExecStartPre=/bin/mv /tmp/hyperkubedir/hyperkube /usr/local/bin/kubectl\n    ExecStart=/bin/chmod a+x /usr/local/bin/kubelet /usr/local/bin/kubectl\n\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n\n    KUBELET_OPTS=\n\n    KUBELET_CONFIG=--address=0.0.0.0 --allow-privileged=true --anonymous-auth=false --authorization-mode=Webhook --azure-container-registry-config=/etc/kubernetes/azure.json --cadvisor-port=0 --cgroups-per-qos=true --client-ca-file=/etc/kubernetes/certs/ca.crt --cloud-config=/etc/kubernetes/azure.json --cloud-provider=azure --cluster-dns=10.0.0.10 --cluster-domain=cluster.local --enforce-node-allocatable=pods --event-qps=0 --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5% --feature-gates=Accelerators=true --image-gc-high-threshold=85 --image-gc-low-threshold=80 --keep-terminated-pod-volumes=false --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=110 --network-plugin=kubenet --node-status-update-frequency=10s --non-masquerade-cidr=10.244.0.0/16 --pod-infra-container-image=k8s-gcrio.azureedge.net/pause-amd64:3.1 --pod-manifest-path=/etc/kubernetes/manifests \n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_REGISTER_SCHEDULABLE=true\n    KUBELET_NODE_LABELS=kubernetes.io/role=agent,agentpool=agentpri2,kubernetes.azure.com/cluster=',variables('labelResourceGroup'),'\n\n- path: /etc/systemd/system/kubelet.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4xTT0/jOhC/51OMWg7vHdy8luotC8qBP4GtQICaIA6lqhxnaKw6TtYzbmEXvvsqLbAtlNXmlPH8/nk0Ht1YzePgBEk5XbOubHTuMzTIwXFlc92cXEsu4gdNTFHoyYWmUtKEmbbh7AXahiF+99phHgSjBN1cKxwHQySWjiNpFvKRgtjOtatsiZZPtcEoRFZhjvfSG35TSrxSSBQ/aE5Ysqeo298N4gdUSaN17TBaOmeSCgirmkP5wzsMVWVZaouOXqU6VGzhlbNcOxA1hHPpQqOzN+e/wSqrP8siFLT0PYxg55+y8pbhCaYOa7hrvXe6a8ETLBQI8y8Ig/AfjOEAuEALK9slXYhM2/xDzI8HB3CvW9vSv8iUcoaCCunwo1rQhrTQBJpAQi0da2lgUbmZdJW3OXAF3PR9TexQltDshrPI2HDI437QBiiYa9oPw6nmwmcdVZVL/RVu/XdJobDf/dr9v70sVFU2+yB2u71+b+/LbvfdRai5CT2SYgNiARa5o+t5v8Oqnjhkp5F60d4mSaxYmLHMDBIIBiubSRhNvBWq6z9DP1l7uAvg5RMCbSMhCN0c3UbHVjkKIzM0FLV2fp7fHMUXcTq5vDqJJxeHR/FF8tzaIMyj3mZdGV+iqI2faity7VZPZ22wK8QKQGvcnVez46vL08HZ7/rqOk3WcW+phvHZIEnj4TLe87bG7SD9NkkPB5dp8hwEo4EllsaMg1tpGfOjx6j0hrXwhK7D0k2RfwUAAP//r6JgkWQEAAA=\n\n\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n\n\n    sed -i \"s|apparmor_parser|d|g\" \"/etc/systemd/system/kubelet.service\"\n\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\n\nruncmd:\n- echo `date`,`hostname`, startruncmd>>/opt/m\n# the first arg is the number of retries, the second arg is the wait duration between two retries and the rest of the args are the cmd to run\n- set -x\n- . /opt/azure/containers/provision_source.sh\n- retrycmd_if_failure 20 5 5 apt-mark hold walinuxagent\n- echo `date`,`hostname`, preaptupdate>>/opt/m\n- apt_get_update\n- echo `date`,`hostname`, postaptupdate>>/opt/m\n- retrycmd_if_failure 5 10 120 apt-get install -y apt-transport-https ca-certificates nfs-common iptables iproute2 socat util-linux mount ebtables ethtool init-system-helpers\n- echo `date`,`hostname`, aptinstall>>/opt/m\n- systemctl enable rpcbind\n- systemctl enable rpc-statd\n- retrycmd_if_failure 100 1 10 systemctl daemon-reload && systemctl restart rpcbind\n- retrycmd_if_failure 100 1 10 systemctl daemon-reload && systemctl restart rpc-statd\n- echo `date`,`hostname`, predockerinstall>>/opt/m\n- retrycmd_if_failure_no_stats 180 1 5 curl -fsSL https://aptdocker.azureedge.net/gpg > /tmp/aptdocker.gpg\n- cat /tmp/aptdocker.gpg | apt-key add -\n- echo \"deb ',variables('dockerEngineDownloadRepo'),' ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- apt_get_update\n- retrycmd_if_failure 20 10 120 apt-get install -y ebtables docker-engine\n- echo \"ExecStartPost=/sbin/iptables -P FORWARD ACCEPT\" >> /etc/systemd/system/docker.service.d/exec_start.conf\n- touch /opt/azure/containers/dockerinstall.complete\n- echo `date`,`hostname`, postdockerinstall>>/opt/m\n- mkdir -p /etc/kubernetes/manifests\n- usermod -aG docker ',variables('username'),'\n\n- echo `date`,`hostname`, PRE-APT-SYSTEMD-DAILY>>/opt/m\n- /usr/lib/apt/apt.systemd.daily\n- echo `date`,`hostname`, POST-APT-SYSTEMD-DAILY>>/opt/m\n- retrycmd_if_failure 20 5 5 apt-mark unhold walinuxagent\n- mkdir -p /opt/azure/containers && touch /opt/azure/containers/runcmd.complete\n- echo `date`,`hostname`, endruncmd>>/opt/m\n\n'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "true",
                        "ssh": {
                            "publicKeys": [
                                {
                                    "keyData": "[parameters('sshRSAPublicKey')]",
                                    "path": "[variables('sshKeyPath')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "offer": "[variables('agentpri2osImageOffer')]",
                        "publisher": "[variables('agentpri2osImagePublisher')]",
                        "sku": "[variables('agentpri2osImageSKU')]",
                        "version": "[variables('agentpri2osImageVersion')]"
                    },
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage",
                        "name": "[concat(variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')),'-osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('agentpri2Offset')),variables('maxVMsPerStorageAccount')),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('agentpri2Offset')),variables('maxVMsPerStorageAccount')),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk/', variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')), '-osdisk.vhd')]"
                        }
                    }
                }
            },
            "tags": {
                "creationSource": "[concat(variables('generatorCode'), '-', variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')))]",
                "orchestrator": "[variables('orchestratorNameVersionTag')]",
                "poolName": "agentpri2",
                "resourceNameSuffix": "[variables('nameSuffix')]"
            },
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('agentpri2Count'), variables('agentpri2Offset'))]",
                "name": "vmLoopNode"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('agentpri2VMNamePrefix'), copyIndex(variables('agentpri2Offset')),'/cse', '-agent-', copyIndex(variables('agentpri2Offset')))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' /usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1\"')]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {},
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersionStorageManagedDisks')]",
            "location": "[variables('location')]",
            "name": "[variables('masterAvailabilitySet')]",
            "properties": {
                "managed": true,
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 3
            },
            "type": "Microsoft.Compute/availabilitySets"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[variables('location')]",
            "name": "[variables('nsgName')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "allow_ssh",
                        "properties": {
                            "access": "Allow",
                            "description": "Allow SSH traffic to master",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22-22",
                            "direction": "Inbound",
                            "priority": 101,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allow_kube_tls",
                        "properties": {
                            "access": "Allow",
                            "description": "Allow kube-apiserver (tls) traffic to master",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443-443",
                            "direction": "Inbound",
                            "priority": 100,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            },
            "type": "Microsoft.Network/networkSecurityGroups"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[variables('location')]",
            "name": "[variables('routeTableName')]",
            "type": "Microsoft.Network/routeTables"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[variables('location')]",
            "name": "[variables('masterPublicIPAddressName')]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[variables('masterFqdnPrefix')]"
                },
                "publicIPAllocationMethod": "Dynamic"
            },
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ],
            "location": "[variables('location')]",
            "name": "[variables('masterLbName')]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "[variables('masterLbBackendPoolName')]"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('masterLbIPConfigName')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "LBRuleHTTPS",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                            },
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[variables('masterLbIPConfigID')]"
                            },
                            "frontendPort": 443,
                            "idleTimeoutInMinutes": 5,
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[concat(variables('masterLbID'),'/probes/tcpHTTPSProbe')]"
                            },
                            "protocol": "tcp"
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "tcpHTTPSProbe",
                        "properties": {
                            "intervalInSeconds": "5",
                            "numberOfProbes": "2",
                            "port": 443,
                            "protocol": "tcp"
                        }
                    }
                ]
            },
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
                "name": "masterLbLoopNode"
            },
            "dependsOn": [
                "[variables('masterLbID')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
            "properties": {
                "backendPort": 22,
                "enableFloatingIP": false,
                "frontendIPConfiguration": {
                    "id": "[variables('masterLbIPConfigID')]"
                },
                "frontendPort": "[variables('sshNatPorts')[copyIndex(variables('masterOffset'))]]",
                "protocol": "tcp"
            },
            "type": "Microsoft.Network/loadBalancers/inboundNatRules"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
                "name": "nicLoopNode"
            },
            "dependsOn": [
                "[variables('nsgID')]",
                "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex(variables('masterOffset')))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex(variables('masterOffset')))]",
            "properties": {
                "enableIPForwarding": true,
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex(variables('masterOffset')))]"
                                }
                            ],
                            "primary": true,
                            "privateIPAddress": "[variables('masterPrivateIpAddrs')[copyIndex(variables('masterOffset'))]]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('vnetSubnetID')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('nsgID')]"
                }
            },
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('apiVersionStorageManagedDisks')]",
            "copy": {
                "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
                "name": "vmLoopNode"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex(variables('masterOffset')))]",
                "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('masterVMSize')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'),'nic-', copyIndex(variables('masterOffset'))))]"
                        }
                    ]
                },
                "osProfile": {
                    "adminUsername": "[variables('username')]",
                    "computername": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
                    "customData": "[base64(concat('#cloud-config\n\n\npackages:\n - jq\n - traceroute\n\n\nwrite_files:\n- path: \"/opt/azure/containers/provision_source.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionSource'),'\n\n\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n\n- path: \"/etc/kubernetes/generate-proxy-certs.sh\"\n  permissions: \"0744\"\n  encoding: \"gzip\"\n  owner: \"root\"\n  content: !!binary |\n    ',variables('generateProxyCertsScript'),'\n\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: ',concat('https://', variables('masterPrivateIpAddrs')[copyIndex(variables('masterOffset'))], ':443'),'\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n\n\n\n\n- path: /etc/kubernetes/manifests/kube-scheduler.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4SRQW+jMBCF7/wKy+dFaK/WKpe9tIe0kSL1EvUwmClYsceWPRDx7yunQJomKdzwe+/z+A0E84YxGU9KyOGvLI6GGiXkzjeycMjQAIMqhCBwqIQ89jWWSXfY9BajnIQUQF/UMTG6LFmo0aacFoINRiW0J47elsEC4flcexc8IbES1+wiBdQ52/nEL8gnH49KcOxzLnPAEMaJXj6eL3/GQZvVf1mOhIzpaQwY8+8+oN7MRu2dg1zAQVbd7JB/hLwg3ycrxDYpcfiG3M+e/54+TLuZnYO3vcOt74mnca9GRtblBSIXgxAuR3bAnRKyQtbVPdvCGSCW1tRnlkV+CBogVtbU1Y1vJrlk1rIngBaJqy0QtNg8N0hseCz3yGyovXpFRGheyY7L8r76+Lm5+zXk5Z8vX4Dhlz7WunhMu1vKbSHrgPVmPgMAAP//6fKK/HMDAAA=\n\n- path: /etc/kubernetes/manifests/kube-controller-manager.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4ySsY6jMBCGe57Ccn0IXWud0qS5K3IXKdI10RaDmSVW7LFlD0S8/coJsJsNWZYO+OYb/t9AMP8xJuNJCdn/lMXZUKOE3PtGFg4ZGmBQhRAEDpWQ567GUnvi6K3FWDogaDHKkUgB9IylITG6/MpCjTZljRBsMCoxKspggfD6XHsXPCGxEk+WFCmgzpKTT/wX+eLjWQmOXRZkHAxhHNeU3/jifBkHbcZ+ZS4SMqbfQ8CYbw8B9WYCtXcOcjdHWZ0mQv4QcsH9Ms5AbJMSxw/u7QzvbuzW06tpN9NE723ncOc74jHIXRhkXb7L5AwI4fLIHvikhKyQdbWEzZ4eYmlNfXVZ5KeiHmJlTV09cJPJJbM2ewFokbi6BW7+NEhseCgPyGyovUsREZp/ZIf5WG99fD7T5Rryb3FdPgvDF32sdfHctljKYyHrgvVm3gIAAP//7hHuXJ8DAAA=\n\n- path: /etc/kubernetes/manifests/audit-policy.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/7RVwY7jNgy95ysI51Cg2HiwtyK3aQsUBabbRbrTHoo5KBJjC1FIV6ST8d8Xkhw7mWSAHqY3JabI954eSdP5PzGKZ1qD6Z3Xev+D1J4fjp+3qOYzLOFb6wW8QMR/eh/R1Yu9J7eGrxy8HRZL+JnpO4UGCaNRLGkAj0gqsOMIJoR8GUUFPMGmnDdo0R/RgahpsF7wwesf6SjrBcAKqjdx1SL2oXxcwhM30LED2xpqUMDonFY6JkEIeMSQM+XT+m3AAgAgonAfbUmbYpvIfbeGqsq/U6nNGAJVx04qcIySCB+M2nYmpgyGBpB+e84JvEsY5dOU6tR62yYtLZN4USSFk9cWtEXY/Pj4E3RZ1Hq8MaODv0v1l8VEP//xELipPo1nUaO9VEmM31CNM2puVTh/+W/0bxDcKziCKj4I3MDpWprtkAlWMojiYb3vt7jqIr8OFTABkuvYJ7NwBMF49BblEvEXpvJYvWDMQG4TveSAI8ZtDsgAxj/f5whLsBwRHr/+Wv68R3qCl1if4d1SNr22SOqtUXRXrrAY1XgCYlpN1njePEFntJX6Xaa/JESXdK9KjOSI6ezP583TRLF6MJ3/PhH8ywdnTXTFrp6aego5lsavZkulVxqhw5bdkBxsmXa+OZhu6jVPkJUvsOo7LfYRuk91ZaQ6TqI0BIApDGC6LnjMGk83E7jstQuEFZA5oHTGYj1lQsBDpwOIRk9NAmUNwRaT9C6lFAxoNb/adN3NhUqm6UuGfFnzolHvyipoI+pZ0/9LxFLlamykaczaYrwWLecy5ABfFSn5Ig/VPJhG6BnehyGdA+aKKXRcR0mjHADSch8cfPn9W3oeTzb0Lm2hzOgRbPL1Ku+Y5Azl0o4XLMdWHNlcT8b63dGY1KJmFXuiZJApTfB7LAMuWa81CrtUrCeHEXRy6MmHAMQ65pq3I10uyDvrsBjrehmOHXuzEP8NAAD//+gVlJa+BwAA\n\n- path: /etc/kubernetes/manifests/kube-apiserver.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4ySwc6bMBCE7zyF5XMR6tWqfqnqpf8hbaRIvUQ9LGZLLOy1ZS9EvH1lCqRJoQk3mJnPy6whmB8Yk/GkhBw+yqIz1Cghj76RhUOGBhhUIQSBQyVk19dYQjAJ44BRzkIKoFc1jYnRZclCjTbltBBsMCqhPXH0tgwWCKfv2rvgCYmVuGcXKaDO2YtP/A356mOnBMc+5zIHDGGc6eX+fPkxDtqsfspyJGRMX8eAMb+eAuq3xai9c5ALOMvqsjjkByFvyJ+zFWKblDj/hfx8fD9Nni+efpn2bXEO3vYOD74nnse9GxlZlzeIXA1CuBw5Al+UkBWyrrZsK2eAWFpTTyyLvAsaIFbW1NU/vpXkknmavgK0SFwdgKDF5r1BYsNjeUJmQ+3df0SE5jvZcV3fw3nJ6273QB+mEf+U+Lju7e7yjZniKzP8p8RnBe7TNptccC6ZlwGvlbnZ1z58Ku53AAAA//+XfMNr4AMAAA==\n\n- path: /etc/kubernetes/manifests/kube-addon-manager.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4yRsW7zMAyEdz8Fkd3w/w9ZhKJAxw5pAwTozkiEIySiXJFy4LcvZMdOWjRtR5LH43cSdv6NkvjIBvr/1dGzM7CNrgqk6FDRVACMgQwc855qdC5yHZCxpXQZSYd2nssgSqEC6G9cpSNbfA5R9IX0HNPRgKZMFYCNrOiZkhRF/dMtAB+wJQMPZZyYlOSpaDaTZNeRfRx1iSTmZGn0nBrvmUSXGsB22cA6LHWgENNgYP1v48dmH0850CZmntdmuJFLLpuhCLaoBwOrhtQ2V7ZmEq4WBnSvfBqW6FfHIP47ux5Tc/L75ozYEmsz5XTPjli9DvWOVD239y9MGT697A18+Y7x1GW9+y3FV9x7Bn/n/ggAAP//ovMbJ38CAAA=\n\n\n\n- path: /etc/kubernetes/addons/kube-heapster-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xWW2tjNxB+P79C+F1ep92AK+pCmk3bh2Y3JFAoLISxNOujWrfq4rX31xfpHNvnYgcTNlC9WGdGo2/mm4sMTv6FPkhrGNlcVWtpBCNP6DeS4w3nNplYaYwgIAKrCDGgkZEawYWIvhUEBxwZWacl0rALEXVFiIIlqpBtSNF4gxHDVNp3XKVsTEMDw8gk+oSTchKEsEaDgRX6ad9MW4GMPCK3hkuFFaW06rrvl8CnkGJtvfwGUVozXc+L5eZqiRH20d028I9W4YnQGv/ZPkL6VcaaGjBm93Yx3ZmQPN5tZYih8klhYBUl4OTv3iZX8CjBbUSTIw3lE5zLG4/BJs+xPSTQKbvTaGJWbtAvW8UKY/lVMjSbrxB5XXbJCYhYtq4IR9CTyRgJNy0IPZZA+2lFu3NWXObGd0jlr9IIaVb/y4xahY/4JYPsiX0hxIqQcZ1eEEtIy3+Qx1I6J9v48uYdpmM4GHokv47B/snGsT/6jl3iaXDIM7SzPrYllreMzGcFJoJfYXxoRfMfKkICKuTR+tbjeaDgXAcrB99E++HQTD02jo14qMazfIxuf8s6e2EYD/jc0+bRKckhMHI1YkbnzvyzE8zpcCJqpyBia9QhIi/Vsz9HCCFgjI2lCzqHA69RJIV+CsrVMCCAexklB0WdFawZUYTsAyu5twp9/05K1rhj5LY1vcn0hk9G7Q6Y1mUb6xk5kFru7bXSx2F15sWtiSAN+g6a1LBCRn4+er6v8SeH/JcDKrdagxHH0CmZvNvfP+lKKW2m8KJDRkhag989g5Ps8+Tz5GgwaqNm9Ub5UfhvwhB7MkK4S7lzdE+oUVu/Y+Tq/exedjRKavnqC06xVRL0iEF+u4gxZ8VzGYYDyrhLi/lMD6S4jR6Kbja9HiobDxfFwZN27YH3I3WsPYbaKrG4HmiOj/PiTG4PNXTugLNKUYdeWrH4cZbX0LkQpc4FvMCtswZNlKDOFcThFXxdWVyfyepPF1bFRfZoNt0kb0Al/M1b3b/vi0Ql2jd2JH+AWLPDaJpmDjrHGkru/35++PTh+ePN/d33Rysj+SXIp4eb2z1u/vv01JvEeeV3ZjAAbWBESZO21X8BAAD//0SxZ2rFCwAA\n\n- path: /etc/kubernetes/addons/kube-dns-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xYS2/jNhC++1cQ7ll+ZJHdQFgHCOKgG2yTGnXa+4QcS4QpkuHDjffXF5RkWZRsx14URX0T5/VxHt9IBs3/QmO5kinZTAdrLllKlmg2nOIdpcpLNyjQAQMH6YAQCQWmZO1fMWHS1gdWA92d2q11WAwIEfCKwgYbUkqMRId2xNWYCm8dmsRWYVIydMbjsNQExpQsQEKGZhSbFYphSv5AqiTlAgdJkgxOwY9wR2hubAJaR9e4BGOsWWXku3/F+fPyggxZjTTgqSM9LlLydV15qS/wuLgdEKKVcSXwpHa9AxwEKbn+VD0Y5RRVIiV/zhexcuKoPmXwch8MLAqkTpljKepmG7S24830FR3s8j5HLdS2wE7L/FwjHC7Spin21aSX62R/eCLfBrXgFGxKrnrXLsDR/LcW3mM4ekgcFlqAw9pP6/plV0upHDiuZOOXEEtzZF6gGYHQOXS6nRruOAWRaMVSMhzWZiICdxzeJak+cB1Cdukq4a9WXHK33YfVit1Jx+96gtBYuEJjkM294TJbVrfkMnvMpGqOH96R+pCQtmlC/kae5S4l08mkdV7Fq2O9oCnSSFhnZRmVsv0ry/rwrg1aG9dgH3mN23SXzZ6YEKXRQHBOHuUB8QaExwN+S8/dylQ/p7QSKtt+LwNHxcqVdaGLBztNEYK3kdd47+smuQusaX+XYjvoA35459Y1bauEL7DlpzNCVMkVzxov1eMT6PbVegy3jxlAgkhJaK5B48IBl2haQcFkrWQlZJgkTBXA5ezrPhOBUgW6+6pz56X8djTsmEmbBF6bTSeT608d4WZ21Tmp7pMwbmbjzp33mryADGs23kMJvKyR3jZqgm9QorULo16xnZ8VcOENvuQGba4ES8l1S5o7p39FF/eKBpenZDjOEYTLfyQhNJN22BmCwN83k5t4NgKPhIJ8e3lZtARhWDiIOQrYLsPSZDYln9um1lOK1rZwTltSxwtU3jWm+zvs698uf7OnduluCr8ocZcF6nVRyL9QFETEIPEuu9iho/qE02rfVT+DwPjBIp4sU2N2pEDTny7Qp8lZJTBolTc0phzBC+46JFRgocw2JdMvkyfekhh882i72lT7Mq/FQR+Ri4pInsILYlT103xCSBEsFmUeuxN4gh56kyxU5pR1DI2JBZWr+ckBD3oGrQPj5tIWYN9m8TYsuSJ+XHeZBGiOieU/MFDPpCOVKgRQYtM5D+sXzWx69WU0GU1G018O0VatNOYyAcbMCIyG8Zkm+vM56kJlyQooF9xtZ8kp5ps/L5/AvsXM10xaSN3ZBHB4WC+f++ND/+G4H2vaj5uS9Pbex02b0ILNpBVKrb1ur3iGK/DCjeyGjj5aeKSpJLkdM9yMpReiU05vxKxZHXVZuu36r0JJy6Y6E1Bvl5Uq5dIOu6xz/uY5ulMdGd4cv1Wu/7t93Esq+d/t4xrq2ePYwX1sP164Z64vWDOHt0zLA5N2oQSn2/BtWfZpLbDRHxTPh95HpWLY/yIIn6udDy1lUyK49O+DfwIAAP//KA420AwRAAA=\n\n- path: /etc/kubernetes/addons/kube-proxy-daemonset.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/5RUy27bMBC8+ysI3RklVyEuULgBemkawEDva2psE+ZDWS5d++8LSrUtOYmb8kTMLoczswSps7/AycbQKBwEoWxTvX9YQehhtrOhbdQ3go9hCZl5CLUk1MyUcrSCS2Wn1C6vwAGCdGdjbVxOAtYJvLcGjaqEM6q+00TfxYAgTX9IdxwPx74iFtyoEFvMlArkcdVRoNSROeHpmAR+ljqYIkLgO0eCQdBYaFljsbdlvJGi1OmKvhQdmKSkdIK02uE4tGuODnfTNDyVMM7csSvnIzfq6TWTO+N7cnkaVVlYr2GkUc9xabZos8PsZCAI2QAeyTDRewrtxaVWVb09duCiqBrBU7taVVqXFhPD2m7m9Z64dnZVF8xB6kutmh46TdrYluePpW0xIAvb8per5jVIMkNvSJDmT4cObD2CkFuwFWvIvcT2awhR+nzn0ySsp03J5/GS7veTtWUHM7rtncczLEaKmQ1GD6GArxlJJphSpsuNeri/92c0wWS2clzEIDjIuL1ju7cOG7SNKqovQ40ue/yIOYz5tfIFeSHZNqqqIaZOydUGLKka0Q4+UnK6L+ltTDIRTu3P4I5Xd77DfonsLT3E6Ev9v+k/81TGExlq/7qmOH2G/I68m+BDnqMnXxp7KeNp/JWWE9dpS4zaUJ+gXVtDkxBuJHyb+zO2PzB9m/ijcd0YVvl4lnAw5Vc5Hygf+NVPFFOjnA35MPsTAAD//zcsf+33BQAA\n\n- path: /etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xUT08bPxC976cY5b4J6HcB61ckChIXiqKk7X3inSZubI9rz6ZsP33lJVl2IYRQFak+WfP3zfMbYzBfKSbDXsHmtFgbXymYU9wYTZdac+2lcCRYoaAqACwuyKZ8A1ifpRJDULCuFxQ9CaWywrRaMMbqIaJzjA1PtK2TUCzTQ3kFI4k1jdpIrCr2Dj0uKY6HaY4rUjAjzV4bSwWAR0cvds3OFFBvI8rUJCFXlGVZ9IeNC9RjrGXF0fxCMezH67O23+Z0QYI7Lq4eQM/Y0kfjK+OXAz4OQvkHyIpsaUbfMgYM5iZyHQ7MXgA8m7obcocIK2d8kerFd9KSVFHCXtX8nWd6qsmXxXg0e6+9xJ/AToF0xhE4SguobK8Kzk7anoJxSTJtTecn59mYyJIWjsfJQ5pACu64olzkGU10L+TzNT2R7zUFy42jQ2v8Pkv6vkRHCtZoTApOn3HpUPTqtjfhEfSSCxaFtgV6TOVjB7WO2eUdzHw0e0HjKXYVSsC47NUroSxXhKElfsVJPqxEgppMdsZxjwK1lVQ+xuGSFPz/iON6B2MeSF8MA6e1tVO2RjcKLu1PbFLnt2ZDnlKaRl7QIzCADOSGpG8CCCgrBaPJaGjtq7tr7I0YtNdksZlndVRJwX/9CDGOuJZ9zoMCeWw6YLJje7oPTogsrNkq+Hw17eyREtdRU+qPGelHTUnScHQd6v18X02/zLYZF4MMR45jsz/pU+vbl2eNM2/pfZvj39p4kJQG3/fda9R7rmg+WLt88tfz5GfgpMAaX98XvwMAAP//QbpZm2wIAAA=\n\n- path: /etc/kubernetes/addons/azure-storage-classes.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8yQsWorMRBFe33F4F77cPdQmzaYEEPaMJbGzrCr0TIaGZKvD7veBOwYV8Gklu6dew6O/EJauUiAakXxQF3/v3Zc/h3XOzJcu54lBdieHh8GrNVlMkxoGByAYKYAifbYBnMAKFIMjYvU6Rm+auOU7KbKrm87UiGj+Q5Xv6T9/CfAyrTRygEMuKNhqTkPxaFVI/WV9MiRvjOjliNPOKThIoIfTcknrr0bUTGTkc7dEeMbyyGXRAE2Rch5791vmWmSUfBAyY9KmVv+6eg+mAsExliamL2PFODpNOn18Xl7RxHVUBJq+ksmtsummyqucN60c8XCPGrPA90Ffj50Ad+3zbzkjPgzAAD//wD1SX0IBAAA\n\n- path: /etc/kubernetes/addons/kube-tiller-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/9RUXWvbShB9169Y/C4Hc3PhslwCbmKSQJwaOy3tUxivpvY2+9WdWWP31xcpsaKvhuQhhepJu3uOzjkzo4WgP2Mk7Z0Uu0n2oF0hxQrjTiucKuWT48wiQwEMMhPCgUUpWBuD8WlJARRK8ZDWmNOBGG0mhIE1GioZojqJDhlprP2JMokYY06PIlKMOCYcVUgoCu8sONhgHLdp1hclduYoRZztNTGNsjzPs2aCuAY1hsRbH/VPYO3d+OG/ir6brJHhGPD80cPSG/ygXaHd5qWQfyZL9AaX+K2UgaAvo0/hhUCZEL0otfOjLSisdhml9XdUTDLLxWB/X9vVbrW789KqYbNoEIIUWzS2WnXE3rOmbbG8wGD84fcBKaAqHQcfubKe982WZ1Kcnk7+Oa3WDHGDvKh2axihQcU+viI+HwLWXbxe9IqMe0ZXvlJnhi+qMBY7P+jfXHdGGwwwPrpvpiqfZrJ+usGExw9X762hv+1ChVDeMWiHsdbIBbrds+BxGu6ub25my/vb6Xy2WkzPZzVAiB2Y1LsLB9lX16u7j8uv9/Pplz5/9P9zke8qj3PYX2liHw9noxqvLWxQih54FVCd1Sijd+iQaBH9GmVDbMscLpGbW0IE4K0UJ0dS+6ye/X8b+9pp1mAu0MBhhcq7gqSYNACsLfrEA2e9hh1VqFn1ujGLzr/3wkciQqHfnLpmvW/siORTVEhNExF/JCSmtjEV0kCDzxeflk/wsxbcovXxMMCYVwdDJKOtfrXqTQl+k2SL4XyBq9bdWD7lrda5VTxJYbRL++xXAAAA//9fQ5xvoQgAAA==\n\n- path: /etc/kubernetes/addons/azure-cloud-provider-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/7yQMW/jMAyFd/0KIouXUw7ZDtrubuieAl2CDLT8mqqRJYOkDDS/vrANZClQdCi6SiTf+z7vveMpPUE01RJIeo57bvZSJd3YUi376x/dp/p7PvQwPrhrKkOg/7mpQY41w40wHtg4OKLCIwLpmxrGwLcm8DHXNvhJ6pwGiCPK3CPrMk10bT2kwLBmxO2qV8icIgLtTBp2TlqGBueJp/QgtU0a6NR1Z0ck0NokYn1RRIHp+jFDeg1LBp26C6z71UUBG7qz+wbqf6kMqVx+Ar5mHPG8rHx0T3cln1B8qZq2/hXRVs1bzuNW5G+MtRW7H5kWa2oo5uea2wjfp7LBLQM68VJ+YfNbnnsPAAD//990ZYZlAgAA\n\n- path: /etc/kubernetes/addons/kube-metrics-server-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/9RWS08bSRC+z69o+cKpDWg5oNbuSiyLokgQWRhxjdo9xVBxv1RdY3B+fTQPP8aPEU6AkLm43dNVX331VVWPjngPlDB4JWan2RR9rsQYaIYGLowJpefMAetcs1aZEF47UMIBE5okE9AMqN1OURtQYlpOQKZ5YnCZEFZPwKbKUtRvyANDGmI4NrZMDFT7wMpwwFTCoD6p8zx4p70ugIZdMxdyUOLKp5Lg6hkTp0xKma3zoIk2Q13yYyD8rhmDH07Pa+Mlw8sG/DZY2EGviV5tsXwPMlRaSCqTQkf8RKGMNZ4Ug8oZQQolGWj3YshTvfAhh3a1EKL6OwOatEcL4PrXYmoWT5rN4w4YeGbwVR7TDsAcog1zB55f6P6XlPkPfY6++GgCBQu38FCBLHLXQywTYrvi+mmkcvINDNdFsLMfD+3CQ1SYAOuFFP0adNFl5U8S6Pz3z4OfVKgjzbINpI64RhE8o6nNF2Q/jFwv6pxuEKqtwFq8HCwUmsOf20gbNN5cmc0L89VuysMSuS1Sgz246YAPDlAzRTBVKAksGA7UVsJ5kjrGHaxiIF5eSsRKnJ39VZtEChxMsErcXY7qHdZUAI+WpzaTurqANur7/+Xl83pfJHsJvV3Z706tq+7L67XQ+oJjcNFqhtZ0LRnVsych1WM7AP38F3HW607ffNkPYIJnjR5oCSL74hECnS5Aib9XaWuLdlyfG0cw/3YPj0prR8GimStxYZ/0PC3fm+Cc9vmKnxTHe3ClkLL5tPlnTbFUOqdp/lVHVEdHW6WpIxIUmJh6xvDF6PP+cdAeHbZRrWbbewzcVeU1nrLeatnbQEUzqbcozFZjscmHEOgTmJJgPMV4dz2+B8KHuRIVgYWjEWEg5PkNenSlU+L05GTlbPG22f4RAAD//789LNetDAAA\n\n\n\n- path: \"/etc/systemd/system/hyperkube-extract.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=kubectl and kubelet extraction\n    Requires=docker.service\n    After=docker.service\n\n    ConditionPathExists=!/usr/local/bin/kubectl\n\n\n    [Service]\n    TimeoutStartSec=0\n    Restart=on-failure\n    RestartSec=5s\n    ExecStartPre=/bin/mkdir -p /tmp/hyperkubedir\n    ExecStartPre=/usr/bin/docker pull ',variables('kubernetesHyperkubeSpec'),'\n    ExecStartPre=/usr/bin/docker run --rm -v /tmp/hyperkubedir:/opt/hyperkubedir ',variables('kubernetesHyperkubeSpec'),' /bin/bash -c \"cp /hyperkube /opt/hyperkubedir/\"\n\n    ExecStartPre=/bin/cp /tmp/hyperkubedir/hyperkube /usr/local/bin/kubelet\n    ExecStartPre=/bin/mv /tmp/hyperkubedir/hyperkube /usr/local/bin/kubectl\n    ExecStart=/bin/chmod a+x /usr/local/bin/kubelet /usr/local/bin/kubectl\n\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n\n    KUBELET_OPTS=\n\n    KUBELET_CONFIG=--address=0.0.0.0 --allow-privileged=true --anonymous-auth=false --authorization-mode=Webhook --azure-container-registry-config=/etc/kubernetes/azure.json --cadvisor-port=0 --cgroups-per-qos=true --client-ca-file=/etc/kubernetes/certs/ca.crt --cloud-config=/etc/kubernetes/azure.json --cloud-provider=azure --cluster-dns=10.0.0.10 --cluster-domain=cluster.local --enforce-node-allocatable=pods --event-qps=0 --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5% --feature-gates= --image-gc-high-threshold=85 --image-gc-low-threshold=80 --keep-terminated-pod-volumes=false --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=110 --network-plugin=kubenet --node-status-update-frequency=10s --non-masquerade-cidr=10.244.0.0/16 --pod-infra-container-image=k8s-gcrio.azureedge.net/pause-amd64:3.1 --pod-manifest-path=/etc/kubernetes/manifests \n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_NODE_LABELS=kubernetes.io/role=master,kubernetes.azure.com/cluster=',variables('labelResourceGroup'),'\n\n  \n    KUBELET_REGISTER_NODE=--register-node=true\n    KUBELET_REGISTER_WITH_TAINTS=--register-with-taints=',variables('registerWithTaints'),'\n  \n\n\n- path: /etc/systemd/system/kubelet.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4xTT0/jOhC/51OMWg7vHdy8luotC8qBP4GtQICaIA6lqhxnaKw6TtYzbmEXvvsqLbAtlNXmlPH8/nk0Ht1YzePgBEk5XbOubHTuMzTIwXFlc92cXEsu4gdNTFHoyYWmUtKEmbbh7AXahiF+99phHgSjBN1cKxwHQySWjiNpFvKRgtjOtatsiZZPtcEoRFZhjvfSG35TSrxSSBQ/aE5Ysqeo298N4gdUSaN17TBaOmeSCgirmkP5wzsMVWVZaouOXqU6VGzhlbNcOxA1hHPpQqOzN+e/wSqrP8siFLT0PYxg55+y8pbhCaYOa7hrvXe6a8ETLBQI8y8Ig/AfjOEAuEALK9slXYhM2/xDzI8HB3CvW9vSv8iUcoaCCunwo1rQhrTQBJpAQi0da2lgUbmZdJW3OXAF3PR9TexQltDshrPI2HDI437QBiiYa9oPw6nmwmcdVZVL/RVu/XdJobDf/dr9v70sVFU2+yB2u71+b+/LbvfdRai5CT2SYgNiARa5o+t5v8Oqnjhkp5F60d4mSaxYmLHMDBIIBiubSRhNvBWq6z9DP1l7uAvg5RMCbSMhCN0c3UbHVjkKIzM0FLV2fp7fHMUXcTq5vDqJJxeHR/FF8tzaIMyj3mZdGV+iqI2faity7VZPZ22wK8QKQGvcnVez46vL08HZ7/rqOk3WcW+phvHZIEnj4TLe87bG7SD9NkkPB5dp8hwEo4EllsaMg1tpGfOjx6j0hrXwhK7D0k2RfwUAAP//r6JgkWQEAAA=\n\n- path: /etc/systemd/system/kms.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4SQsW4yMRCEez/FvYDxX/46yUWipEgLRCkIhTEDrM5nX3bXEHj66I6kOUVKY3lGn2alb/OaSbfmCRKZBqWSfbhVRteLWeKjEkP8vsQOvBDwmSLMw0HBPkMvhTtbcqKMhQY+Qo3ZrO7U1qyvA7xQPySYJUQDqw/pEq5i1tSjVF2N3QrR/zPPn4hT9K4Kux1ld7/acM3Nu2kaazPUn4rodzyXVHt4VwZtx2dWQ6Pr6g6coZB2ln+BRZKLYBUXgx0/dKAYFLKIrO3fyGzyHNgl2rlLCEdkbefFhDNpuJ1c91/spN12vbRpXBxVvmTRkNLWvIWs2D9efV+Tkq0C/hH+FQAA//884M3mwQEAAA==\n\n\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n    set -e\n\n\n\n    sed -i \"s|<kubernetesAddonManagerSpec>|',variables('kubernetesAddonManagerSpec'),'|g\" \"/etc/kubernetes/manifests/kube-addon-manager.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g; s|<kubeClusterCidr>|',variables('kubeClusterCidr'),'|g\" \"/etc/kubernetes/addons/kube-proxy-daemonset.yaml\"\n    sed -i \"s|<kubernetesKubeDNSSpec>|',variables('kubernetesKubeDNSSpec'),'|g; s|<kubernetesDNSMasqSpec>|',variables('kubernetesDNSMasqSpec'),'|g; s|<kubernetesExecHealthzSpec>|',variables('kubernetesExecHealthzSpec'),'|g; s|<kubernetesKubeletClusterDomain>|',variables('kubernetesKubeletClusterDomain'),'|g; s|<kubeDNSServiceIP>|',variables('kubeDNSServiceIP'),'|g\" \"/etc/kubernetes/addons/kube-dns-deployment.yaml\"\n    sed -i \"s|<kubernetesHeapsterSpec>|',variables('kubernetesHeapsterSpec'),'|g; s|<kubernetesAddonResizerSpec>|',variables('kubernetesAddonResizerSpec'),'|g\" \"/etc/kubernetes/addons/kube-heapster-deployment.yaml\"\n\n\n    sed -i \"s|<kubernetesDashboardSpec>|',variables('kubernetesDashboardSpec'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardCPURequests>|',variables('kubernetesDashboardCPURequests'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardMemoryRequests>|',variables('kubernetesDashboardMemoryRequests'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardCPULimit>|',variables('kubernetesDashboardCPULimit'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardMemoryLimit>|',variables('kubernetesDashboardMemoryLimit'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n\n\n\n    sed -i \"s|<kubernetesTillerSpec>|',variables('kubernetesTillerSpec'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerCPURequests>|',variables('kubernetesTillerCPURequests'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMemoryRequests>|',variables('kubernetesTillerMemoryRequests'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerCPULimit>|',variables('kubernetesTillerCPULimit'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMemoryLimit>|',variables('kubernetesTillerMemoryLimit'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMaxHistory>|',variables('kubernetesTillerMaxHistory'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n\n\n\n\n\n\n\n\n\n    sed -i \"s|<kubernetesMetricsServerSpec>|',variables('kubernetesMetricsServerSpec'),'|g\" \"/etc/kubernetes/addons/kube-metrics-server-deployment.yaml\"\n\n\n\n\n\n\n\n    sed -i \"s|<kubernetesControllerManagerConfig>|\\\"--allocate-node-cidrs=true\\\", \\\"--cloud-config=/etc/kubernetes/azure.json\\\", \\\"--cloud-provider=azure\\\", \\\"--cluster-cidr=10.244.0.0/16\\\", \\\"--cluster-name=tdproduction\\\", \\\"--cluster-signing-cert-file=/etc/kubernetes/certs/ca.crt\\\", \\\"--cluster-signing-key-file=/etc/kubernetes/certs/ca.key\\\", \\\"--feature-gates=ServiceNodeExclusion=true\\\", \\\"--kubeconfig=/var/lib/kubelet/kubeconfig\\\", \\\"--leader-elect=true\\\", \\\"--node-monitor-grace-period=40s\\\", \\\"--pod-eviction-timeout=5m0s\\\", \\\"--profiling=false\\\", \\\"--root-ca-file=/etc/kubernetes/certs/ca.crt\\\", \\\"--route-reconciliation-period=10s\\\", \\\"--service-account-private-key-file=/etc/kubernetes/certs/apiserver.key\\\", \\\"--terminated-pod-gc-threshold=5000\\\", \\\"--use-service-account-credentials=true\\\", \\\"--v=2\\\"|g\" \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n    sed -i \"s|<kubernetesAPIServerConfig>|\\\"--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,DenyEscalatingExec,AlwaysPullImages\\\", \\\"--advertise-address=<kubernetesAPIServerIP>\\\", \\\"--allow-privileged=true\\\", \\\"--anonymous-auth=false\\\", \\\"--audit-log-maxage=30\\\", \\\"--audit-log-maxbackup=10\\\", \\\"--audit-log-maxsize=100\\\", \\\"--audit-log-path=/var/log/audit.log\\\", \\\"--audit-policy-file=/etc/kubernetes/manifests/audit-policy.yaml\\\", \\\"--authorization-mode=Node,RBAC\\\", \\\"--bind-address=0.0.0.0\\\", \\\"--client-ca-file=/etc/kubernetes/certs/ca.crt\\\", \\\"--cloud-config=/etc/kubernetes/azure.json\\\", \\\"--cloud-provider=azure\\\", \\\"--etcd-cafile=/etc/kubernetes/certs/ca.crt\\\", \\\"--etcd-certfile=/etc/kubernetes/certs/etcdclient.crt\\\", \\\"--etcd-keyfile=/etc/kubernetes/certs/etcdclient.key\\\", \\\"--etcd-servers=https://127.0.0.1:2379\\\", \\\"--insecure-port=8080\\\", \\\"--kubelet-client-certificate=/etc/kubernetes/certs/client.crt\\\", \\\"--kubelet-client-key=/etc/kubernetes/certs/client.key\\\", \\\"--profiling=false\\\", \\\"--proxy-client-cert-file=/etc/kubernetes/certs/proxy.crt\\\", \\\"--proxy-client-key-file=/etc/kubernetes/certs/proxy.key\\\", \\\"--repair-malformed-updates=false\\\", \\\"--requestheader-allowed-names=\\\", \\\"--requestheader-client-ca-file=/etc/kubernetes/certs/proxy-ca.crt\\\", \\\"--requestheader-extra-headers-prefix=X-Remote-Extra-\\\", \\\"--requestheader-group-headers=X-Remote-Group\\\", \\\"--requestheader-username-headers=X-Remote-User\\\", \\\"--secure-port=443\\\", \\\"--service-account-key-file=/etc/kubernetes/certs/apiserver.key\\\", \\\"--service-account-lookup=true\\\", \\\"--service-cluster-ip-range=10.0.0.0/16\\\", \\\"--storage-backend=etcd3\\\", \\\"--tls-cert-file=/etc/kubernetes/certs/apiserver.crt\\\", \\\"--tls-private-key-file=/etc/kubernetes/certs/apiserver.key\\\", \\\"--v=4\\\"|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"s|<kubernetesSchedulerConfig>|\\\"--kubeconfig=/var/lib/kubelet/kubeconfig\\\", \\\"--leader-elect=true\\\", \\\"--profiling=false\\\", \\\"--v=2\\\"|g\" \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n    sed -i \"s|<kubernetesAPIServerIP>|',variables('kubernetesAPIServerIP'),'|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n\n    sed -i \"s|apparmor_parser|d|g\" \"/etc/systemd/system/kubelet.service\"\n\n\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\n- path: \"/opt/azure/containers/mountetcd.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('mountetcdScript'),'\n\n- path: \"/etc/systemd/system/etcd.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=etcd - highly-available key value store\n    Documentation=https://github.com/coreos/etcd\n    Documentation=man:etcd\n    After=network.target\n    Wants=network-online.target\n    [Service]\n    Environment=DAEMON_ARGS=\n    Environment=ETCD_NAME=%H\n    Environment=ETCD_DATA_DIR=\n    EnvironmentFile=-/etc/default/%p\n    Type=notify\n    User=etcd\n    PermissionsStartOnly=true\n    ExecStart=/usr/bin/etcd $DAEMON_ARGS\n    Restart=always\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/opt/azure/containers/setup-etcd.sh\"\n  permissions: \"0744\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n    set -x\n    source /opt/azure/containers/provision_source.sh\n    ETCD_VER=v',variables('etcdVersion'),'\n    DOWNLOAD_URL=',variables('etcdDownloadURLBase'),'\n    retrycmd_get_tarball 60 1 /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz ${DOWNLOAD_URL}/etcd-${ETCD_VER}-linux-amd64.tar.gz\n    tar xzvf /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz -C /usr/bin/ --strip-components=1\n    systemctl daemon-reload\n    systemctl enable etcd.service\n    sudo sed -i \"1iETCDCTL_ENDPOINTS=https://127.0.0.1:2379\" /etc/environment\n    sudo sed -i \"1iETCDCTL_CA_FILE=',variables('etcdCaFilepath'),'\" /etc/environment\n    sudo sed -i \"1iETCDCTL_KEY_FILE=',variables('etcdClientKeyFilepath'),'\" /etc/environment\n    sudo sed -i \"1iETCDCTL_CERT_FILE=',variables('etcdClientCertFilepath'),'\" /etc/environment\n\n\nruncmd:\n# the first arg is the number of retries, the second arg is the wait duration between two retries and the rest of the args are the cmd to run\n- set -x\n- . /opt/azure/containers/provision_source.sh\n- wait_for_file 1800 1 /opt/azure/containers/certs.ready\n- /opt/azure/containers/setup-etcd.sh > /opt/azure/containers/setup-etcd.log 2>&1\n- retrycmd_if_failure 20 5 5 apt-mark hold walinuxagent \n- /bin/echo DAEMON_ARGS=--name \"',variables('masterVMNames')[copyIndex(variables('masterOffset'))],'\" --peer-client-cert-auth --peer-trusted-ca-file=',variables('etcdCaFilepath'),' --peer-cert-file=',variables('etcdPeerCertFilepath')[copyIndex(variables('masterOffset'))],' --peer-key-file=',variables('etcdPeerKeyFilepath')[copyIndex(variables('masterOffset'))],' --initial-advertise-peer-urls \"',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\" --listen-peer-urls \"',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\" --client-cert-auth --trusted-ca-file=',variables('etcdCaFilepath'),' --cert-file=',variables('etcdServerCertFilepath'),' --key-file=',variables('etcdServerKeyFilepath'),' --advertise-client-urls \"',variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))],'\" --listen-client-urls \"',concat(variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))], ',https://127.0.0.1:', variables('masterEtcdClientPort')),'\" --initial-cluster-token \"k8s-etcd-cluster\" --initial-cluster ',variables('masterEtcdClusterStates')[div(variables('masterCount'), 2)],' --data-dir \"/var/lib/etcddisk\" --initial-cluster-state \"new\" | tee -a /etc/default/etcd\n- /opt/azure/containers/mountetcd.sh\n- /bin/chown -R etcd:etcd /var/lib/etcddisk\n- systemctl stop etcd\n- systemctl daemon-reload\n- retrycmd_if_failure 100 1 10 systemctl daemon-reload && systemctl restart etcd\n- MEMBER=\"$(sudo etcdctl member list | grep -E ',variables('masterVMNames')[copyIndex(variables('masterOffset'))],' | cut -d',variables('singleQuote'),':',variables('singleQuote'),' -f 1)\"\n- sudo etcdctl member update ${MEMBER} ',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\n- retrycmd_if_failure 5 5 10 curl --cacert /etc/kubernetes/certs/ca.crt --cert /etc/kubernetes/certs/etcdclient.crt --key /etc/kubernetes/certs/etcdclient.key --retry 5 --retry-delay 10 --retry-max-time 10 --max-time 60 \"',variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))],'\"/v2/machines\n- apt_get_update\n- retrycmd_if_failure 5 10 120 apt-get install -y apt-transport-https ca-certificates iptables iproute2 socat util-linux mount ebtables ethtool init-system-helpers\n- retrycmd_if_failure_no_stats 180 1 5 curl -fsSL https://aptdocker.azureedge.net/gpg > /tmp/aptdocker.gpg\n- cat /tmp/aptdocker.gpg | apt-key add -\n- echo \"deb ',variables('dockerEngineDownloadRepo'),' ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- apt_get_update\n- retrycmd_if_failure 20 10 120 apt-get install -y ebtables docker-engine\n- echo \"ExecStartPost=/sbin/iptables -P FORWARD ACCEPT\" >> /etc/systemd/system/docker.service.d/exec_start.conf\n- touch /opt/azure/containers/dockerinstall.complete\n- mkdir -p /etc/kubernetes/manifests\n- usermod -aG docker ',variables('username'),'\n- /usr/lib/apt/apt.systemd.daily\n\n- bash /etc/kubernetes/generate-proxy-certs.sh\n\n- retrycmd_if_failure 20 5 5 apt-mark unhold walinuxagent\n- apt-mark unhold walinuxagent\n- touch /opt/azure/containers/runcmd.complete\n\n'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "keyData": "[variables('sshPublicKeyData')]",
                                    "path": "[variables('sshKeyPath')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "dataDisks": [
                        {
                            "createOption": "Empty",
                            "diskSizeGB": "[variables('etcdDiskSizeGB')]",
                            "lun": 0,
                            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')),'-etcddisk')]"
                        }
                    ],
                    "imageReference": {
                        "offer": "[variables('osImageOffer')]",
                        "publisher": "[variables('osImagePublisher')]",
                        "sku": "[variables('osImageSku')]",
                        "version": "[variables('osImageVersion')]"
                    },
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                }
            },
            "tags": {
                "creationSource": "[concat(variables('generatorCode'), '-', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
                "orchestrator": "[variables('orchestratorNameVersionTag')]",
                "poolName": "master",
                "resourceNameSuffix": "[variables('nameSuffix')]"
            },
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "[variables('apiVersionDefault')]",
            "copy": {
                "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
                "name": "vmLoopNode"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')),'/cse', '-master-', copyIndex(variables('masterOffset')))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' ',variables('provisionScriptParametersMaster'), ' MASTER_INDEX=',copyIndex(variables('masterOffset')),' /usr/bin/nohup /bin/bash -c \"stat /opt/azure/containers/provision.complete > /dev/null 2>&1 || /bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1\"')]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {},
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "type": "Microsoft.Compute/virtualMachines/extensions"
        }
    ],
    "outputs": {
        "agentStorageAccountPrefixes": {
            "type": "array",
            "value": "[variables('storageAccountPrefixes')]"
        },
        "agentStorageAccountSuffix": {
            "type": "string",
            "value": "[variables('storageAccountBaseName')]"
        },
        "agentpri2StorageAccountCount": {
            "type": "int",
            "value": "[variables('agentpri2StorageAccountsCount')]"
        },
        "agentpri2StorageAccountOffset": {
            "type": "int",
            "value": "[variables('agentpri2StorageAccountOffset')]"
        },
        "agentpri2SubnetName": {
            "type": "string",
            "value": "[variables('agentpri2SubnetName')]"
        },
        "agentpriStorageAccountCount": {
            "type": "int",
            "value": "[variables('agentpriStorageAccountsCount')]"
        },
        "agentpriStorageAccountOffset": {
            "type": "int",
            "value": "[variables('agentpriStorageAccountOffset')]"
        },
        "agentpriSubnetName": {
            "type": "string",
            "value": "[variables('agentpriSubnetName')]"
        },
        "masterFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
        },
        "primaryAvailabilitySetName": {
            "type": "string",
            "value": "[variables('primaryAvailabilitySetName')]"
        },
        "resourceGroup": {
            "type": "string",
            "value": "[variables('resourceGroup')]"
        },
        "routeTableName": {
            "type": "string",
            "value": "[variables('routeTableName')]"
        },
        "securityGroupName": {
            "type": "string",
            "value": "[variables('nsgName')]"
        },
        "subnetName": {
            "type": "string",
            "value": "[variables('subnetName')]"
        },
        "virtualNetworkName": {
            "type": "string",
            "value": "[variables('virtualNetworkName')]"
        }
    }
}